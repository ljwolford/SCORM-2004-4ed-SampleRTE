<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   queryBinding="xslt2">

   <title>ContentAggregationSchematron</title>
   
   <ns prefix="imscp" uri="http://www.imsglobal.org/xsd/imscp_v1p1" />
   <ns prefix="adlcp" uri="http://www.adlnet.org/xsd/adlcp_v1p3" />
   <ns prefix="adlseq" uri="http://www.adlnet.org/xsd/adlseq_v1p3" />
   <ns prefix="imsss" uri="http://www.imsglobal.org/xsd/imsss" />
   <ns prefix="adlnav" uri="http://www.adlnet.org/xsd/adlnav_v1p3" />
   <ns prefix="URIHandler" uri="org.adl.validator.util.processor.URIHandler" />
   <ns prefix="ParameterHandler" uri="org.adl.validator.util.processor.ParameterHandler" />
   <ns prefix="parser" uri="org.adl.validator.packagechecker.parsers.SchematronValidationDOMParser" />
   
   <pattern name="main">
     
     <!-- Manifest attribute and element checks -->   
     <rule id="manifest" context="imscp:manifest"> 
           
        <assert test="count(.) &gt; 0">info~Testing the &lt;manifest&gt; element for conformance</assert>        
        
     	<!-- REQ_30 -->
        <!--  1 and only 1 root manifest element  -->
        <assert test="count(.) &gt; 0">info~Testing multiplicity of the &lt;manifest&gt; element</assert>
        <assert test="count(.) = 1">passed~The imsmanifest.xml file contains 1 and only 1 &lt;manifest&gt; element</assert>    
        
        <!-- REQ_30.1 -->
        <!-- 1 and only 1 identifier attribute -->  
        <assert test="count(@identifier) &gt; 0">info~Testing multiplicity of the "identifier" attribute</assert>
        <assert test="(count(@identifier) &lt; 1) or (count(@identifier) &gt; 1)">failed~The &lt;manifest&gt; element shall contain 1 and only 1 "identifier" attribute </assert>
        <assert test="count(@identifier) = 1">passed~The &lt;manifest&gt; element contains 1 "identifier" attribute</assert>
        
        <!-- REQ_30.1.1 -->
        <!-- identifer is type xs:ID -->
        <!-- Validated by IMSCP schema -->
        
        <!-- REQ_30.1.2 -->
        <!-- manifest:identfier is unique -->
        <let name="uniqueResult" value="parser:isIdentifierUnique(@identifier)"/>
        <assert test="count(@identifier) &gt; 0">info~Testing the "identifier" attribute for conformance</assert>
        <assert test="(count(@identifier) &gt; 0) and not($uniqueResult)">failed~The "identifier" attribute [<value-of select="@identifier"/>] of the &lt;manifest&gt; element is not unique within the manifest</assert>
		<assert test="(count(@identifier) &gt; 0) and $uniqueResult">passed~The "identifier" of manifest is unique within the manifest</assert>        

		<!-- REQ_30.2 -->
		<!-- manifest element must contain 0 or 1 version attributes -->
		<assert test="count(@version) &gt; 0">info~Testing multiplicity of the "version" attribute</assert>
		<assert test="count(@version) = 1">passed~The &lt;manifest&gt; element contains 1 "version" attribute</assert>
		
		<!-- REQ_PENDING -->
		<!-- version SPM 20 -->
		<assert test="count(@version) &gt; 0">info~Testing the character length of the "version" attribute value</assert>
		<assert test="(count(@version) &gt; 0) and (string-length(@version) &gt; 20)">warning~The value contained in the "version" attribute is greater than the SPM of 20 characters</assert>
		<assert test="(count(@version) &gt; 0) and (string-length(@version) &lt;= 20)">passed~The character length for the value of the "version" attribute has passed conformance</assert>
		
		<!-- REQ_30.2.1 -->
        <!-- version is type xs:string --> 
        <!-- Validated by IMSCP schema -->

		<!-- REQ_30.3 -->
		<!-- manifest element must contain 0 or 1 xml:base attributes -->
		<assert test="count(@xml:base) &gt; 0">info~Testing multiplicity of the "xml:base" attribute</assert>
		<assert test="count(@xml:base) = 1">passed~The &lt;manifest&gt; element contains 1 "xml:base" attribute</assert>
		
        <!-- REQ_30.3.1 -->
        <!-- xml:base is type xs:anyURI -->
        <!-- Validated by IMSCP schema -->

        <assert test="count(@xml:base) &gt; 0">info~Testing the "xml:base" attribute for conformance</assert>
        
		<!-- REQ_30.3.2 -->
		<!-- xml:base can contain no backward slashes ("\") -->
		<assert test="(count(@xml:base) = 1) and (contains(@xml:base, '\'))">failed~The "xml:base" attribute shall not contain any backward slashes</assert>
		
		<!-- REQ_30.3.3 -->
		<!-- xml:base shall not begin with a leading slash ("/") -->
		<assert test="(count(@xml:base) = 1) and (starts-with(@xml:base, '/'))">failed~The "xml:base" attribute shall not begin with a leading slash</assert>
				
		<!-- REQ_30.3.4 -->
		<!-- xml:base shall end with a trailing slash ("/") -->
		<assert test="(count(@xml:base) = 1) and (not(ends-with(@xml:base, '/')))">failed~The "xml:base" attribute shall end with a trailing slash</assert>
		
		<!-- xml:base is correctly formatted -->
		<assert test="(count(@xml:base) = 1) and ((not(contains(@xml:base, '\'))) and (not(starts-with(@xml:base, '/'))) and (ends-with(@xml:base, '/')))">passed~The "xml:base" attribute is correctly formatted</assert>		

		<!-- REQ_PENDING -->
		<!-- xml:base SPM 2000 -->
		<assert test="count(@xml:base) &gt; 0">info~Testing the character length of the "xml:base" attribute value</assert>
		<assert test="(count(@xml:base) &gt; 0) and (string-length(@xml:base) &gt; 2000)">warning~The value contained in the "xml:base" attribute is greater than the SPM of 2000 characters</assert>
		<assert test="(count(@xml:base) &gt; 0) and (string-length(@xml:base) &lt;= 2000)">passed~The character length for the value of the "xml:base" attribute has passed conformance</assert>

		<!-- REQ_30.4 -->
	    <!-- The child elements of an manifest element shall exist in the specified order -->
    	<!-- metadata, organizations, resources, manifest, extension elements -->
        <!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.5 -->
		<!-- manifest element shall contain 1 and only 1 metadata child element -->
		<assert test="true()">info~Testing multiplicity of the &lt;metadata&gt; element</assert>
		<assert test="(count(imscp:metadata) &lt; 1) or (count(imscp:metadata) &gt; 1)">failed~The &lt;manifest&gt; element shall contain 1 and only 1 &lt;metadata&gt; element</assert>
        <assert test="count(imscp:metadata) = 1">passed~The &lt;manifest&gt; element contains 1 and only 1 &lt;metadata&gt; element</assert>
        
        <!-- REQ_30.6 -->
		<!-- manifest element shall contain 1 and only 1 organizations child element -->
		<assert test="true()">info~Testing multiplicity of the &lt;organizations&gt; element</assert>
		<assert test="(count(imscp:organizations) &lt; 1) or (count(imscp:organizations) &gt; 1)">failed~The &lt;manifest&gt; element shall contain 1 and only 1 &lt;organizations&gt; element</assert>
        <assert test="count(imscp:organizations) = 1">passed~The &lt;manifest&gt; element contains 1 and only 1 &lt;organizations&gt; element</assert>	
        
        <!-- REQ_30.7 -->
		<!-- manifest element shall contain 1 and only 1 resources child element -->
		<assert test="true()">info~Testing multiplicity of the &lt;resources&gt; element</assert>
		<assert test="(count(imscp:resources) &lt; 1) or (count(imscp:resources) &gt; 1)">failed~The &lt;manifest&gt; element shall contain 1 and only 1 &lt;resources&gt; element</assert>
        <assert test="count(imscp:resources) = 1">passed~The &lt;manifest&gt; element contains 1 and only 1 &lt;resources&gt; element</assert>		
        
        <!-- REQ_30.8 -->
		<!-- The manifest element (root) shall contain 0 or More manifest child elements. -->
		<!-- i.e. submanifests -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.9 -->
		<!-- REQ_32 -->
		<!-- The <manifest> element shall contain 0 or 1 <imsss:sequencingCollection> child element. -->
		<assert test="count(imsss:sequencingCollection) &gt; 0">info~Testing multiplicity of the &lt;sequencingCollection&gt; element</assert>
		<assert test="count(imsss:sequencingCollection) &gt; 1">failed~The &lt;manifest&gt; element shall contain 0 or 1 &lt;sequencingCollection&gt; element</assert>
       <assert test="count(imsss:sequencingCollection) = 1">passed~The &lt;manifest&gt; element contains 1 &lt;sequencingCollection&gt; element</assert>	   	   
        
        <!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
      
      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
   </rule>
   	
   	<!-- metadata child of manifest -->
	<rule id="metadata" context="imscp:manifest/imscp:metadata">
		<assert test="count(.) &gt; 0">info~Testing the &lt;metadata&gt; element for conformance</assert>        
		
		<!-- REQ_30.5.1 -->
		<!-- the required children of metadata must be schema, schemaversion, and then extensions if applicable -->
		<!-- schema is the first child -->
		<assert test="local-name(child::*[1]) != 'schema'">failed~The first child of the &lt;metadata&gt; element shall be the &lt;schema&gt; element</assert>
		<assert test="local-name(child::*[1]) = 'schema'">passed~The first child of the &lt;metadata&gt; element is the &lt;schema&gt; element</assert>
		<!-- schemaversion is the second child -->
		<assert test="local-name(child::*[2]) != 'schemaversion'">failed~The second child of the &lt;metadata&gt; element shall be the &lt;schemaversion&gt; element</assert>
		<assert test="local-name(child::*[2]) = 'schemaversion'">passed~The second child of the &lt;metadata&gt; element is the &lt;schemaversion&gt; element</assert>
		
		<!-- REQ_30.5.2 -->
        <!-- 1 and only 1 schema element -->  
        <assert test="true()">info~Testing multiplicity of the &lt;schema&gt; element</assert>
        <assert test="(count(imscp:schema) &lt; 1) or (count(imscp:schema) &gt; 1)">failed~The &lt;metadata&gt; element shall contain 1 and only 1 &lt;schema&gt; element</assert>
        <assert test="count(imscp:schema) = 1">passed~The &lt;metadata&gt; element contains 1 and only 1 &lt;schema&gt; element</assert>

		<!-- REQ_30.5.3 -->
        <!-- 1 and only 1 schemaversion element -->  
        <assert test="true()">info~Testing multiplicity of the &lt;schemaversion&gt; element</assert>
        <assert test="(count(imscp:schemaversion) &lt; 1) or (count(imscp:schemaversion) &gt; 1)">failed~The &lt;metadata&gt; element shall contain 1 and only 1 &lt;schemaversion&gt; element</assert>
        <assert test="count(imscp:schemaversion) = 1">passed~The &lt;metadata&gt; element contains 1 and only 1 &lt;schemaversion&gt; element</assert>
		
		<!-- REQ_30.5.4.1.2 -->
        <!-- The <metadata> element shall contain 0 or More <adlcp:location> child elements to define the location (URL) of the {Metadata} describing the content aggregation. --> 
        <!-- This is "inline" metadata and handled by ContentPackageTester -->
        <assert test="count(adlcp:location) &gt; 0">info~Testing multiplicity of the &lt;adlcp:location&gt; element</assert> 
        <assert test="count(adlcp:location) &gt; 0">passed~The &lt;metadata&gt; element contains <value-of select="count(adlcp:location)"/> &lt;adlcp:location&gt; element(s)</assert>
			    
	    <!-- REQ_30.5.4 -->
        <!-- The metadata element shall be the container for 0 or more {Metadata} -->
        <!-- This is a high level requirement covered by all sub-level requirements (30.5.4.x) -->
        
   	    <!-- REQ_30.5.4.1 -->
        <!-- If providing Metadata, the {Metadata} shall be well-formed and valid according to the cooresponding Controlling Document (e.g., XSD) -->
        <!-- This is tested in ContentPackageTester and RequiredFilesChecker -->
	    	    
   	    <!-- REQ_30.5.4.1.1 -->
        <!-- The <metadata> element shall contain 0 or More XML extensions to the IMS Content Packaging namespace. --> 
        <!-- These inline extensions shall define the  {Metadata} describing the content aggregation. -->
        <!-- This is "inline" metadata and handled by ContentPackageTester, log it when it is found -->

		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
     
      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert> 
	</rule>
   	
   	<rule id="schema" context="imscp:schema">
   	
   		<!-- REQ_30.5.2.1 -->
		<!-- schema element must have the value 'ADL SCORM' -->
		<assert test="true()">info~Testing the &lt;schema&gt; element for conformance to the Vocabulary Data Type</assert>
		<assert test="normalize-space(.) != 'ADL SCORM'">failed~[<value-of select="."/>] is not a valid value for the &lt;schema&gt; element</assert>
		<assert test="normalize-space(.) = 'ADL SCORM'">passed~[ADL SCORM] is a valid value for the &lt;schema&gt; element</assert>
   	
   		<!-- REQ_30.7.3.4.2  -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2  -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
   	
   	<rule id="schemaversion" context="imscp:schemaversion">

		<!-- REQ_30.5.3.1 -->		
		<!-- schemaversion element must have the value '2004 4th Edition' -->		
		<assert test="true()">info~Testing the &lt;schemaversion&gt; element for conformance to the Vocabulary Data Type</assert>
		<assert test="(normalize-space(.) != '2004 3rd Edition') and (normalize-space(.) != 'CAM 1.3') and (normalize-space(.) != '2004 4th Edition')">failed~[<value-of select="."/>] is not a valid value for the &lt;schemaversion&gt; element</assert>
	    <assert test="normalize-space(.) = 'CAM 1.3'">warning~The value for the &lt;schemaversion&gt; element was [CAM 1.3] and is expected to be [2004 4th Edition]. Some systems may rely on this value for processing of the content package. ADL Recommends that this value be updated to be [2004 4th Edition]</assert>
	    <assert test="normalize-space(.) = '2004 3rd Edition'">warning~The value for the &lt;schemaversion&gt; element was [2004 3rd Edition] and is expected to be [2004 4th Edition]. Some systems may rely on this value for processing of the content package. ADL Recommends that this value be updated to be [2004 4th Edition]</assert>
	    <assert test="(normalize-space(.) = '2004 4th Edition') or (normalize-space(.) = 'CAM 1.3') or (normalize-space(.) = '2004 3rd Edition')">passed~[<value-of select="."/>] is a valid value for the &lt;schemaversion&gt; element</assert>	

   		<!-- REQ_30.7.3.4.2  -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert> 
	</rule>
   	
   	<!-- adlcp:location child of manifest/metadata -->
	<rule id="adlcp:location" context="adlcp:location">
        
        <!-- REQ_30.5.4.1.2.1 -->
        <!-- The value of this element shall be a characterstring that represents the URL. -->
        <!-- Tested by the IMSCP schema -->
	
      <!-- REQ_30.6.3.7.1.1.2.2 -->
      <!-- The <adlcp:location> element shall only exist as a child element of the <metadata> element.-->
		<assert test="count(.) &gt; 0">info~Testing the &lt;adlcp:location&gt; element for conformance</assert>
		<assert test="(local-name(parent::node()) != 'metadata') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1')">failed~The &lt;adlcp:location&gt; element shall be a child of the &lt;metadata&gt; element</assert>
		<assert test="(local-name(parent::node()) = 'metadata') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')">passed~The &lt;adlcp:location&gt; element is a child of the &lt;metadata&gt; element</assert>
		        
        <!-- REQ_PENDING -->
		<!-- adlcp:location SPM 2000 -->
		<assert test="count(.) &gt; 0">info~Testing the character length of the &lt;adlcp:location&gt; element value</assert>
		<assert test="string-length(.) &gt; 2000">warning~The value contained in the &lt;adlcp:location&gt; element is greater than the SPM of 2000 characters</assert>
		<assert test="string-length(.) &lt;= 2000">passed~The character length for the value of the &lt;adlcp:location&gt; element has passed conformance</assert>
	
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>     
     
     <rule id="organizations" context="imscp:organizations">
     
     	<assert test="count(.) &gt; 0">info~Testing the &lt;organizations&gt; element for conformance</assert>        
     	
     	<!-- REQ_30.6.1 -->
     	<!-- 1 and only 1 default -->  
     	<assert test="count(@default) &gt; 0">info~Testing multiplicity of the "default" attribute</assert>  
     	<assert test="(count(@default) &lt; 1) or (count(@default) &gt; 1)">failed~The &lt;organizations&gt; element shall contain 1 and only 1 "default" attribute</assert>
     	<assert test="count(@default) = 1">passed~The &lt;organizations&gt; element contains 1 and only 1 "default" attribute</assert>		
     	
     	<!-- REQ_30.6.1.1 -->
     	<!-- The default attribute's value shall be a valid identifier of the default <organization> in the manifest.  The value shall reference an -->
     	<!-- <organization> element that is a direct descendant of the <organizations> element. -->
     	<let name="default" value="normalize-space(@default)" />
     	<assert test="count(@default) &gt; 0">info~Testing the "default" attribute for conformance</assert>
     	<assert test="(count(@default) &gt; 0) and (count(imscp:organization[normalize-space(@identifier)=$default]) &lt; 1)">failed~The "default" attribute does not reference a valid "identifier" attribute of an &lt;organization&gt; element</assert>
     	<assert test="(count(@default) &gt; 0) and (count(imscp:organization[normalize-space(@identifier)=$default]) = 1)">passed~The "default" attribute references a valid "identifier" attribute of an &lt;organization&gt; element</assert>
     	
     	<!-- REQ_30.6.1.2 -->
     	<!-- The default attribute's value shall be represented as an xs:IDREF type. -->
     	<!-- Tested by IMSCP schema -->
     	
		<!-- REQ_30.6.2 -->
		<!-- The child elements of an <organizations> element shall exist in the specified order: -->
		<!-- organization, extension elements -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.6.3 -->		
		<!-- The <organizations> element shall contain 1 or More <organization> child elements. -->
		<assert test="true()">info~Testing multiplicity of the &lt;organization&gt; element</assert>
    	<assert test="count(imscp:organization) &lt; 1">failed~The &lt;organizations&gt; element shall contain 1 or more &lt;organization&gt; element(s)</assert>
		<assert test="count(imscp:organization) &gt; 0">passed~The &lt;organizations&gt; element contains <value-of select="count(imscp:organization)"/> &lt;organization&gt; element(s)</assert>
     	
   		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2-->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
   	
   	<rule id="organization" context="imscp:organizations/imscp:organization">
   	
   		<assert test="count(.) &gt; 0">info~Testing the &lt;organization&gt; element with the identifier value of [<value-of select="@identifier"/>] for conformance</assert>        
   		
   		<!-- REQ_30.6.3.1 -->
		<!-- The <organization> element shall contain 1 and only 1 identifier attribute. -->
		<assert test="true()">info~Testing multiplicity of the "identifier" attribute</assert>   
		<assert test="(count(@identifier) &lt; 1) or (count(@identifier) &gt; 1)">failed~The &lt;organization&gt; shall contain 1 and only 1 "identifier" attribute</assert>
        <assert test="count(@identifier) = 1">passed~The &lt;organization&gt; contains 1 and only 1 "identifier" attribute</assert>
   	
   		<!--  REQ_30.6.3.1.1 -->
   		<!-- The identifier attribute's value shall be represented as an xs:ID type. -->
   		<!-- Tested by IMSCP schema -->
   		
   		<!-- REQ_30.6.1.2 -->
   		<let name="uniqueResult" value="parser:isIdentifierUnique(@identifier)"/>
   		<assert test="count(@identifier) &gt; 0">info~Testing the "identifier" attribute for conformance</assert>
        <assert test="(count(@identifier) &gt; 0) and not($uniqueResult)">failed~The "identifier" attribute [<value-of select="@identifier"/>] of the &lt;organization&gt; element is not unique within the manifest</assert>
		<assert test="(count(@identifier) &gt; 0) and $uniqueResult">passed~The "identifier" of organization is unique within the manifest</assert>
   		   		
  		<!-- REQ_30.6.3.2 -->
  		<!-- The organization element shall contain 0 or 1 structure attribute. -->
  		<!-- Tested by IMSCP schema -->
  		<assert test="count(@structure) &gt; 0">info~Testing multiplicity of the "structure" attribute</assert>  
		<assert test="count(@structure) = 1">passed~The &lt;organization&gt; element contains 1 "structure" attribute</assert>
  		
  		<!-- REQ_30.6.3.2.1	-->
  		<!-- The structure attribute's value shall be a characterstring representing the structure of the organization. -->
		<!-- Tested by IMSCP schema -->  		

   		<!-- REQ_PENDING -->
		<!-- structure SPM 200 -->
		<assert test="count(@structure) &gt; 0">info~Testing the character length of the "structure" attribute value</assert>
		<assert test="(count(@structure) &gt; 0) and (string-length(@structure) &gt; 200)">warning~The value contained in the "structure" attribute is greater than the SPM of 200 characters</assert>
		<assert test="(count(@structure) &gt; 0) and (string-length(@structure) &lt;= 200)">passed~The character length for the value of the "structure" attribute has passed conformance</assert>
		
  		<!-- REQ_30.6.3.3 -->
  		<!-- The organization element shall contain 0 or 1 adlseq:objectivesGlobalToSystem attribute. -->
  		<!-- Tested by ADLSEQ schema -->
  		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing multiplicity of the "adlseq:objectivesGlobalToSystem" attribute</assert> 
  		<assert test="count(@adlseq:objectivesGlobalToSystem) = 1">passed~The &lt;organization&gt; element contains 1 "adlseq:objectivesGlobalToSystem" attribute</assert>

		<!-- REQ_30.6.3.3.1	--> 
		<!-- The adlseq:objectivesGlobalToSystem attribute shall be a boolean value of either true or false. -->
		<let name="objectivesGlobalToSystem" value="normalize-space(@adlseq:objectivesGlobalToSystem)"/>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the "adlseq:objectivesGlobalToSystem" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@adlseq:objectivesGlobalToSystem) &gt; 0) and ($objectivesGlobalToSystem != 'true') and ($objectivesGlobalToSystem != 'false')">failed~[<value-of select="@adlseq:objectivesGlobalToSystem"/>] is not a valid value for the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="(count(@adlseq:objectivesGlobalToSystem) &gt; 0) and ($objectivesGlobalToSystem = 'true') or ($objectivesGlobalToSystem = 'false')">passed~[<value-of select="@adlseq:objectivesGlobalToSystem"/>] is a valid value for the "adlseq:objectivesGlobalToSystem" attribute</assert>
   		
      <!-- REQ_30.6.3.4 -->
      <!-- The organization element shall contain 0 or 1 adlcp:sharedDataGlobalToSystem attribute. -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing multiplicity of the "adlcp:sharedDataGlobalToSystem" attribute</assert> 
      <assert test="count(@adlcp:sharedDataGlobalToSystem) = 1">passed~The &lt;organization&gt; element contains 1 "adlcp:sharedDataGlobalToSystem" attribute</assert>         
      
      <!-- REQ_30.6.3.4.2  --> 
      <!-- The adlcp:sharedDataGlobalToSystem attribute shall be a boolean value of either true or false. -->
      <let name="sharedDataGlobalToSystem" value="normalize-space(@adlcp:sharedDataGlobalToSystem)"/>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the "adlcp:sharedDataGlobalToSystem" attribute for conformance to the Vocabulary Data Type</assert>
      <assert test="(count(@adlcp:sharedDataGlobalToSystem) &gt; 0) and ($sharedDataGlobalToSystem != 'true') and ($sharedDataGlobalToSystem != 'false')">failed~[<value-of select="@adlcp:sharedDataGlobalToSystem"/>] is not a valid value for the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="(count(@adlcp:sharedDataGlobalToSystem) &gt; 0) and ($sharedDataGlobalToSystem = 'true') or ($sharedDataGlobalToSystem = 'false')">passed~[<value-of select="@adlcp:sharedDataGlobalToSystem"/>] is a valid value for the "adlcp:sharedDataGlobalToSystem" attribute</assert>         
   		
      <!--  REQ_30.6.3.4 --> 
      <!-- The child elements of an organization element, if used, shall exist in the specified order: -->
		<!-- title, item, metadata, extension elements -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.6.3.5 -->
		<!-- The organization element shall contain 1 and only 1 title element -->
		<assert test="true()">info~Testing multiplicity of the &lt;title&gt; element</assert>
		<assert test="(count(imscp:title) &lt; 1) or (count(imscp:title) &gt; 1)">failed~The &lt;organization&gt; element shall contain 1 and only 1 &lt;title&gt; element</assert>
     	<assert test="count(imscp:title) = 1">passed~The &lt;organization&gt; element contains 1 and only 1 &lt;title&gt; element</assert>		
   		
   		<!--  REQ_30.6.3.5.1 --> 
   		<!-- The <title> element's value shall be represented as an xs:string. -->
   		<!-- Tested by IMSCP schema -->
   		
   		<!-- REQ_30.6.3.6 -->
		<!-- The organization element shall contain 1 or more item elements -->
		<assert test="true()">info~Testing multiplicity of the &lt;item&gt; element</assert>/
		<assert test="count(imscp:item) &lt; 1">failed~The &lt;organization&gt; element shall contain 1 or more &lt;item&gt; element(s)</assert>
     	<assert test="count(imscp:item) &gt;= 1">passed~The &lt;organization&gt; element contains <value-of select="count(imscp:item)"/> &lt;item&gt; element(s)</assert>		
   		
   		<!-- REQ_30.6.3.7 -->	
       <!-- The <organization> element shall contain 0 or 1 <metadata> child elements. -->
       <!-- Tested by IMSCP schema -->
       <assert test="count(imscp:metadata) &gt; 0">info~Testing multiplicity of the &lt;metadata&gt; element</assert>
       <assert test="count(imscp:metadata) &gt; 1">failed~The &lt;organization&gt; element shall contain 0 or 1 &lt;metadata&gt; element</assert>
       <assert test="count(imscp:metadata) = 1">passed~The &lt;organization&gt; element contains 1 &lt;metadata&gt; element</assert>	   	   
       
       <!-- REQ_30.6.3.7.1 -->
       <!-- The <metadata> element shall be the container for 0 or More {Metadata}. -->
       <!-- Tested by IMSCP schema -->
	   
	   <!-- REQ_30.6.3.7.1.1 --> 
	   <!-- If providing Metadata, the {Metadata} shall be well-formed and valid according to the cooresponding Controlling Document (e.g., XSD). -->
	   <!-- Tested by CP Test -->
	   
	   <!-- REQ_30.6.3.7.1.1.1 --> 
	   <!-- The <metadata> element shall contain 0 or More XML extensions to the IMS Content Packaging namespace. -->
	   <!-- Tested by IMSCP schema -->
       
       <!-- REQ_30.6.3.7.1.1.2.1 -->
       <!-- The value of this element shall be a characterstring that represents the URL. -->
       <!-- Tested by IMSCP schema -->
       
       <!-- REQ_30.6.3.8 -->	
       <!-- The <organization> element shall contain 0 or 1 <imsss:sequencing> child elements. -->
       <!-- Tested by IMSCP schema -->
       <assert test="count(imsss:sequencing) &gt; 0">info~Testing multiplicity of the &lt;sequencing&gt; element</assert>
       <assert test="count(imsss:sequencing) &gt; 1">failed~The &lt;organization&gt; element shall contain 0 or 1 &lt;sequencing&gt; element</assert>
       <assert test="count(imsss:sequencing) = 1">passed~The &lt;organization&gt; element contains 1 &lt;sequencing&gt; element</assert>	   	   
   		
   		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">passed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">passed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

	</rule>
   	
   	<rule id="organization-title" context="imscp:organization/imscp:title">
	
	    <assert test="count(.) &gt; 0">info~Testing the &lt;title&gt; element for conformance</assert>
		<!-- REQ_PENDING -->
		<!-- <title> SPM 200 -->
		<assert test="count(.) &gt; 0">info~Testing the character length of the &lt;title&gt; element value</assert>
		<assert test="string-length(.) &gt; 200">warning~The value contained in the &lt;title&gt; element is greater than the SPM of 200 characters</assert>
		<assert test="string-length(.) &lt;= 200">passed~The character length for the value of the &lt;title&gt; element has passed conformance</assert>
	
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
   	
   	<rule id="organization-metadata" context="imscp:organization/imscp:metadata">
   	
   	   <assert test="(count(.) &gt; 0) and (count(adlcp:location) &gt; 0)">info~Testing the &lt;metadata&gt; element for conformance</assert>
       <!-- REQ_30.6.3.7.1.1.2 -->
	   <!--	The <metadata> element shall contain 0 or More <adlcp:location> child elements to define the location (URL) of the {Metadata} describing the Activity. -->
	   <!-- Tested by IMSCP schema -->
	    <assert test="count(adlcp:location) &gt; 0">info~Testing multiplicity of the &lt;adlcp:location&gt; element</assert> 
        <assert test="count(adlcp:location) &gt; 0">passed~The &lt;metadata&gt; element contains <value-of select="count(adlcp:location)"/> &lt;adlcp:location&gt; element(s)</assert> 	
   	
   		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
   	
   	<!-- REQ_30.6.3.6.7.1 -->
   	<!-- The <item> element can be nested an arbitrary number of depths, each nested <item> element shall adhere to the same requirements. -->
   	<!-- <item> element is tested the same regardless of nesting location -->
   	<rule id="item" context="imscp:item">
   	
   	   <assert test="count(.) &gt; 0">info~Testing the &lt;item&gt; element with the identifier value of [<value-of select="@identifier"/>] for conformance</assert>        
   	          
       <!-- REQ_PENDING -->
       <!-- A warning shall be raised if the parameters attribute is used when an identifierref attribute does not exist on an item -->
       <assert test="(count(@identifierref) &lt; 1 ) and (count(@parameters) &gt; 0 )">warning~The "parameters" attribute should not exist when an "identifierref" attribute does not reference a &lt;resource&gt; element</assert>
       
   	   <!-- REQ_30.6.3.6.1 -->
	   <!-- The <item> element shall contain 1 and only 1 identifier attribute. -->
	   <assert test="count(@identifier) &gt; 0">info~Testing multiplicity of the "identifier" attribute</assert>   
	   <assert test="(count(@identifier) &lt; 1) or (count(@identifier) &gt; 1)">failed~The &lt;item&gt; element shall contain 1 and only 1 "identifier" attribute</assert>
       <assert test="count(@identifier) = 1">passed~The &lt;item&gt; element contains 1 and only 1 "identifier" attribute</assert>
       
       <!--  REQ_30.6.3.6.1.1 --> 
       <!-- The identifier attribute's value shall be represented as an xs:ID type. -->
       <!-- Tested by IMSCP schema -->

       <!-- REQ_30.6.3.6.1.2 -->
   	   <!-- The identifier attribute shall be unique within the Manifest. -->
   	   <let name="uniqueResult" value="parser:isIdentifierUnique(@identifier)"/>
   	   <assert test="count(@identifier) &gt; 0">info~Testing the "identifier" attribute for conformance</assert>
       <assert test="(count(@identifier) &gt; 0) and not($uniqueResult)">failed~The "identifier" attribute [<value-of select="@identifier"/>] of the &lt;item&gt; element is not unique within the manifest</assert>
	   <assert test="(count(@identifier) &gt; 0) and $uniqueResult">passed~The "identifier" of item is unique within the manifest</assert>
   	   
       <!-- REQ_30.6.3.6.2 --> 
       <!-- The <item> element shall contain 0 or 1 identifierref attribute. -->
	   <!-- Tested by IMSCP schema -->
	   <assert test="count(@identifierref) &gt; 0">info~Testing multiplicity of the "identifierref" attribute</assert> 
	   <assert test="count(@identifierref) = 1">passed~The &lt;item&gt; element contains 1 "identifierref" attribute</assert>
	   
	   <!-- REQ_30.6.3.6.2.1 --> 
	   <!-- The identifierref attribute's value shall be represented as an xs:string. -->
	   <!-- Tested by IMSCP schema -->
	   
	   <!-- REQ_30.6.3.6.2.2 -->    
        <!-- The identifierref attribute shall match either an idendtifier attribute of a resource --> 
        <!-- in a sub-manifest, an identifier attribute of manifest (sub-manifest in  the scope of -->
        <!-- the current manifest -->
        <let name="idref" value="@identifierref" />
        <assert test="count(@identifierref) &gt; 0">info~Testing the "identifierref" value of [<value-of select="$idref" />] for valid referencing of a valid "identifier" attribute value</assert>     
        <assert test="(count(@identifierref) &gt; 0) and (count(.) &gt; 0) and (count(//imscp:resource[normalize-space(@identifier)=$idref]) &gt; 0)">passed~The "identifierref" value of [<value-of select="@identifierref" />] references a valid "identifier" attribute of a &lt;resource&gt; element</assert>
        <assert test="(count(@identifierref) &gt; 0) and (count(.) &gt; 0) and ((count(//imscp:resource[normalize-space(@identifier)=$idref]) = 0) and (count(//imscp:manifest/imscp:manifest[normalize-space(@identifier)=$idref]) = 0))">failed~The "identifierref" value of [<value-of select="@identifierref" />] does not reference a valid "identifier" attribute value</assert>
        
        <!-- REQ_31.2.1 -->
        <!-- If a leaf <item> element references a (sub)manifest, that leaf <item> element shall not have a <sequencing> element as a child. -->
        <!-- This REQ is currently not being tested due to uncertainty dealing with the handling -->
        <!-- of sub-manifests -->
	   
	   <!-- REQ_30.6.3.6.2.3 -->
	   <!-- The identifierref shall not be used on <item> elements that contain other <item> elements. -->
	   <assert test="(count(imscp:item) &gt; 0) and (count(@identifierref) &gt; 0)">info~Testing the "identifierref" attribute for conformance</assert>
 	   <assert test="(count(imscp:item) &gt; 0) and (count(@identifierref) &gt; 0)">failed~The "identifierref" attribute shall not be used on a non-leaf &lt;item&gt; element.  Only leaf Items (Items that do not have children) may reference a learning resource</assert>
   	   
	   <!-- REQ_30.6.3.6.2.4 -->
	   <!-- A leaf item shall contain an identifierref attribute. -->
	   <assert test="(count(imscp:item) = 0) and (count(@identifierref) &lt; 1)">info~Testing the "identifierref" attribute for conformance</assert>
 	   <assert test="(count(imscp:item) = 0) and (count(@identifierref) &lt; 1)">failed~The leaf &lt;item&gt; element was detected with a missing "identifierref" attribute.  Leaf &lt;item&gt; elements shall reference a resource</assert>
       
       <!-- REQ_PENDING -->
	   <!-- identifierref SPM 2000 -->
	   <assert test="count(@identifierref) &gt; 0">info~Testing the character length of the "identifierref" attribute value</assert>
	   <assert test="(count(@identifierref) &gt; 0) and (string-length(@identifierref) &gt; 2000)">warning~The value contained in the "identifierref" attribute is greater than the SPM of 2000 characters</assert>
	   <assert test="(count(@identifierref) &gt; 0) and (string-length(@identifierref) &lt;= 2000)">passed~The character length for the value of the "identifierref" attribute has passed conformance</assert>
       
       <!-- REQ_30.6.3.6.3 -->
       <!-- The <item> element shall contain 0 or 1 isvisible attribute. -->
       <!-- Tested by IMSCP schema -->
       <assert test="count(@isvisible) &gt; 0">info~Testing multiplicity of the "isvisible" attribute</assert> 
	   <assert test="count(@isvisible) = 1">passed~The &lt;item&gt; element contains 1 "isvisible" attribute</assert>

       <!-- REQ_30.6.3.6.3.1 --> 
       <!-- The isvisible attribute shall be a characterstring representation of the boolean values true and false. -->
       <let name="isvisible" value="normalize-space(@isvisible)"/>
       <assert test="count(@isvisible) &gt; 0">info~Testing the "isvisible" attribute for conformance to the Vocabulary Data Type</assert>  
       <assert test="(count(@isvisible) &gt; 0) and ($isvisible != 'true') and ($isvisible != 'false')">failed~[<value-of select="@isvisible"/>] is not a valid value for the "isvisible" attribute</assert>
       <assert test="(count(@isvisible) &gt; 0) and ($isvisible = 'true') or ($isvisible = 'false')">passed~[<value-of select="@isvisible"/>] is a valid value for the "isvisible" attribute</assert>
       
       <!-- REQ_30.6.3.6.4 --> 
       <!-- The <item> element shall contain 0 or 1 parameters attribute. -->
       <!-- Tested by IMSCP schema -->
       <assert test="count(@parameters) &gt; 0">info~Testing multiplicity of the "parameters" attribute</assert>
       <assert test="count(@parameters) = 1">passed~The &lt;item&gt; element contains 1 "parameters" attribute</assert>
       
	   <!-- REQ_30.6.3.6.4.1 --> 
	   <!-- The parameters attribute's value shall be a valid characterstring. -->
	   <!-- Tested by IMSCP schema -->
       
       <!-- REQ_30.6.3.6.4.2 -->
       <!-- The parameters attribute's value syntax shall be valid -->
       <let name="paramResult" value="ParameterHandler:checkParameters(@parameters)"/>
       <assert test="count(@parameters) &gt; 0">info~Testing the "parameters" attribute for conformance</assert>   
       <assert test="(count(@parameters) &gt; 0) and not($paramResult)">failed~[<value-of select="@parameters"/>] does not adhere to the syntax defined by IMS CP 1.1.4 and SCORM for the "parameters" attribute</assert>
       <assert test="(count(@parameters) &gt; 0) and ($paramResult)">passed~[<value-of select="@parameters"/>] adheres to the syntax defined by IMS CP 1.1.4 and SCORM for the "parameters" attribute</assert>
        
       <!-- REQ_PENDING -->
	   <!-- parameters SPM 1000 -->
	   <assert test="count(@parameters) &gt; 0">info~Testing the character length of the "parameters" attribute value</assert>
	   <assert test="(count(@parameters) &gt; 0) and (string-length(@parameters) &gt; 1000)">warning~The value contained in the "parameters" attribute is greater than the SPM of 1000 characters</assert>
       <assert test="(count(@parameters) &gt; 0) and (string-length(@parameters) &lt;= 1000)">passed~The character length for the value of the "parameters" attribute has passed conformance</assert>
        
       <!-- REQ_30.6.3.6.5 -->
       <!-- The child elements of an <item> element, if used, shall exist in the specified order: -->
	   <!-- <title>, <item>, <metadata>, extension elements -->
	   <!-- Tested by IMSCP schema -->
       
       <!-- REQ_30.6.3.6.6 -->
	   <!-- The item element shall contain 1 and only 1 title element -->
	   <assert test="true()">info~Testing multiplicity of the &lt;title&gt; element</assert>
	   <assert test="(count(imscp:title) &lt; 1) or (count(imscp:title) &gt; 1)">failed~The &lt;item&gt; element shall contain 1 and only 1 &lt;title&gt; element</assert>
       <assert test="count(imscp:title) = 1">passed~The &lt;item&gt; element contains 1 and only 1 &lt;title&gt; element</assert>		
       
       <!-- REQ_30.6.3.6.6.1 --> 
       <!-- The <title> element's value shall be represented as an xs:string. -->
	   <!-- Tested by IMSCP schema -->
	   
	   <!-- >REQ_30.6.3.6.7 --> 
	   <!-- The <item> element shall contain 0 or More <item> child elements. -->
	   <assert test="count(imscp:item) &gt; 0">info~Testing multiplicity of the &lt;item&gt; element</assert>
       <assert test="count(imscp:item) &gt; 0">passed~The &lt;item&gt; element contains <value-of select="count(imscp:item)"/> &lt;item&gt; element(s)</assert>
               
       <!-- REQ_30.6.3.6.8 -->	
       <!-- The <item> element shall contain 0 or 1 <metadata> child element. -->
	   <assert test="count(imscp:metadata) &gt; 0">info~Testing multiplicity of the &lt;metadata&gt; element</assert>
	   <assert test="count(imscp:metadata) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;metadata&gt; element</assert>
	   <assert test="count(imscp:metadata) = 1">passed~The &lt;item&gt; element contains 1 &lt;metadata&gt; element</assert>
       
       <!-- REQ_30.6.3.6.8.1 -->
       <!-- The <metadata> element shall be the container for 0 or More {Metadata}. -->
	   <!-- Tested by IMSCP schema -->
	   
	   <!-- REQ_30.6.3.6.8.1.1 -->
	   <!--	If providing Metadata, the {Metadata} shall be well-formed and valid according to the cooresponding Controlling Document (e.g., XSD). -->
	   <!-- Tested by IMSCP schema -->
	   
	   <!-- REQ_30.6.3.6.8.1.1.1 -->
	   <!-- The <metadata> element shall contain 0 or More XML extensions to the IMS Content Packaging namespace.-->
	   <!-- Tested by IMSCP schema -->
	  	   
	   <!-- REQ_30.6.3.6.8.1.1.2.1 -->
	   <!-- The value of this element shall be a characterstring that represents the URL. -->
	   <!-- Tested by IMSCP schema -->
	   
	   <!-- REQ_30.6.3.6.9 -->	
       <!-- The <item> element shall contain 0 or 1 <adlcp:timeLimitAction> child element. -->
       <assert test="count(adlcp:timeLimitAction) &gt; 0">info~Testing multiplicity of the &lt;adlcp:timeLimitAction&gt; element</assert>
	   <assert test="count(adlcp:timeLimitAction) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;adlcp:timeLimitAction&gt; element</assert>
	   <assert test="count(adlcp:timeLimitAction) = 1">passed~The &lt;item&gt; element contains 1 &lt;adlcp:timeLimitAction&gt; element</assert>
       
       <!-- REQ_30.6.3.6.10 -->	
       <!-- The <item> element shall contain 0 or 1 <adlcp:dataFromLMS> child element. -->
	   <assert test="count(adlcp:dataFromLMS) &gt; 0">info~Testing multiplicity of the &lt;adlcp:dataFromLMS&gt; element</assert>
	   <assert test="count(adlcp:dataFromLMS) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;adlcp:dataFromLMS&gt; element</assert>
	   <assert test="count(adlcp:dataFromLMS) = 1">passed~The &lt;item&gt; element contains 1 &lt;adlcp:dataFromLMS&gt; element</assert>
       
       <!-- REQ_30.6.3.6.11 -->	
       <!-- The <item> element shall contain 0 or 1 <imsss:sequencing> child elements. -->
       <!-- Tested by IMSCP schema -->
	   <assert test="count(imsss:sequencing) &gt; 0">info~Testing multiplicity of the &lt;sequencing&gt; element</assert>
	   <assert test="count(imsss:sequencing) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;sequencing&gt; element</assert>
	   <assert test="count(imsss:sequencing) = 1">passed~The &lt;item&gt; element contains 1 &lt;sequencing&gt; element</assert>

	   <!-- REQ_30.6.3.6.12  & REQ_33 -->	
       <!-- The <item> element shall contain 0 or 1 <adlnav:presentation> child elements. -->
       <!-- Tested by IMSCP schema -->
	   <assert test="count(adlnav:presentation) &gt; 0">info~Testing multiplicity of the &lt;adlnav:presentation&gt; element</assert>
	   <assert test="count(adlnav:presentation) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;adlnav:presentation&gt; element</assert>
	   <assert test="count(adlnav:presentation) = 1">passed~The &lt;item&gt; element contains 1 &lt;adlnav:presentation&gt; element</assert> 

	   <!-- REQ_30.6.3.6.13 -->	
       <!-- The <item> element shall contain 0 or 1 <adlcp:completionThreshold> child elements. -->
       <!-- Tested by IMSCP schema -->
	   <assert test="count(adlcp:completionThreshold) &gt; 0">info~Testing multiplicity of the &lt;adlcp:completionThreshold&gt; element</assert>
	   <assert test="count(adlcp:completionThreshold) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;adlcp:completionThreshold&gt; element</assert>
	   <assert test="count(adlcp:completionThreshold) = 1">passed~The &lt;item&gt; element contains 1 &lt;adlcp:completionThreshold&gt; element</assert>    	   

      <!-- REQ_30.6.3.7.14 -->   
      <!-- The <item> element shall contain 0 or 1 <adlcp:data> child elements. -->
      <assert test="count(adlcp:data) &gt; 0">info~Testing multiplicity of the &lt;adlcp:data&gt; element</assert>
      <assert test="count(adlcp:data) &gt; 1">failed~The &lt;item&gt; element shall contain 0 or 1 &lt;adlcp:data&gt; element</assert>
      <assert test="count(adlcp:data) = 1">passed~The &lt;item&gt; element contains 1 &lt;adlcp:data&gt; element</assert>    
       
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

	<rule id="adlnav:presentation" context="adlnav:presentation">
	
		<!-- REQ_33.2 -->	
        <!-- The adlnav:presentation element shall only be used with <item> elements that reference SCO or Asset resources.-->
        <assert test="count(.) &gt; 0">info~Testing the &lt;adlnav:presentation&gt; element for conformance</assert>
        <let name="presid" value="parent::node()/attribute::identifierref" />
		<assert test="(count(parent::*[@identifierref]) &lt; 1) or
    				  (count(//imscp:resource[normalize-space(@identifier)=$presid]) &lt; 1) or
    				  ((//imscp:resource[normalize-space(@identifier)=$presid]/normalize-space(attribute::adlcp:scormType) != 'sco') and
    				  (//imscp:resource[normalize-space(@identifier)=$presid]/normalize-space(attribute::adlcp:scormType) != 'asset'))">failed~The &lt;adlnav:presentation&gt; element shall only be used with &lt;item&gt; elements that reference SCO or Asset resources</assert>
		
		<!-- REQ_33.1 -->
    	<!-- The <adlnav:presentation> element shall only be used as a child of the <item> element. -->
		<assert test="true()">info~Testing the location of the &lt;adlnav:presentation&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'item') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1')">failed~The &lt;adlnav:presentation&gt; element must exist as a child of the &lt;item&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')">passed~The &lt;adlnav:presentation&gt; element is the child of the &lt;item&gt; element</assert>
    	
    	<!-- REQ_33.1 -->	
        <!-- The <adlnav:presentation> element shall contain 0 or 1 <adlnav:navigationInterface> element. -->
        <assert test="count(adlnav:navigationInterface) &gt; 0">info~Testing multiplicity of the &lt;adlnav:navigationInterface&gt; element</assert>
	    <assert test="count(adlnav:navigationInterface) &gt; 1">failed~The &lt;adlnav:presentation&gt; element shall contain 0 or 1 &lt;adlnav:navigationInterface&gt; element</assert>
	    <assert test="count(adlnav:navigationInterface) = 1">passed~The &lt;adlnav:presentation&gt; element contains 1 &lt;adlnav:navigationInterface&gt; element</assert> 
	
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

    <rule id="auxiliaryResources" context="imsss:auxiliaryResources">
    
      <assert test="count(.) &gt; 0">info~Testing the &lt;auxiliaryResource&gt; element for conformance</assert>
      <!-- ADL Note:  At this time, the SCORM does not require an LMS to support auxiliary resources. -->
    	<!-- <auxiliaryResources> can only appear as a child of <sequencing> -->
		<assert test="true()">info~Testing the location of the &lt;auxiliaryResources&gt; element</assert>
    	<assert test="count(.) &gt; 0">warning~At this time, SCORM recommends use of the &lt;auxiliaryResources&gt; element with caution due to the various concerns that have risen dealing with defining requirements on its usage</assert>
    	
    	<!-- REQ_31.8.1 -->
      <!-- The <auxilliaryResources> element shall contain 0 or 1 auxiliaryResourceID attribute.-->
      <assert test="count(@auxiliaryResourceID) &gt; 0">info~Testing the multiplicity of the "auxiliaryResourceID" attribute</assert>
	   <assert test="count(@auxilliaryResourceID) &gt; 0">passed~The &lt;auxilliaryResources&gt; element contains 1 "auxiliaryResourceID" attribute</assert>
	     
	    <!-- REQ_31.8.1.1 -->
	    <!-- The auxiliaryResourceID attribute's value shall be represented as an xs:anyURI. -->
	    <!-- Tested by IMSSS schema -->
	     
	    <!-- REQ_31.8.2 -->
       <!-- The <auxilliaryResources> element shall contain 0 or 1 purpose attribute.-->
       <assert test="count(@purpose) &gt; 0">info~Testing the multiplicity of the "purpose" attribute</assert>
	    <assert test="count(@purpose) &gt; 0">passed~The &lt;auxilliaryResources&gt; element contains 1 "purpose" attribute</assert>
	     
	    <!-- REQ_31.8.2.1 -->
	    <!-- The purpose attribute's value shall be represented as an xs:string. -->
	    <!-- Tested by IMSSS schema --> 
    
    	<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_31.8.3 -->
      <!-- The <auxiliaryResourses> element shall only exist as a child element of the <sequencing> element. -->
      <assert test="true()">info~Testing the location of the &lt;auxiliaryResources&gt; element</assert>
      <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;auxiliaryResources&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
      <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;auxiliaryResources&gt; element is the child of the &lt;sequencing&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

	<rule id="item-title" context="imscp:item/imscp:title">
	
	    <assert test="count(.) &gt; 0">info~Testing the &lt;title&gt; element for conformance</assert>
		<!-- REQ_PENDING -->
		<!-- <title> SPM 200 -->
		<assert test="count(.) &gt; 0">info~Testing the character length of the &lt;title&gt; element value</assert>
		<assert test="string-length(.) &gt; 200">warning~The value contained in the &lt;title&gt; element is greater than the SPM of 200 characters</assert>
		<assert test="string-length(.) &lt;= 200">passed~The character length for the value of the &lt;title&gt; element has passed conformance</assert>
	
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

	<rule id="item-metadata" context="imscp:item/imscp:metadata">
	
	   <assert test="(count(.) &gt; 0) and (count(adlcp:location) &gt; 0)">info~Testing the &lt;metadata&gt; element for conformance</assert>
	   <!-- REQ_30.6.3.6.8.1.1.2 -->
	   <!--	The <metadata> element shall contain 0 or More <adlcp:location> child elements to define the location (URL) of the {Metadata} describing the Activity. -->
	   <!-- Tested by IMSCP schema -->
        <assert test="count(adlcp:location) &gt; 0">info~Testing multiplicity of the &lt;adlcp:location&gt; element</assert> 
        <assert test="count(adlcp:location) &gt; 0">passed~The &lt;metadata&gt; element contains <value-of select="count(adlcp:location)"/> &lt;adlcp:location&gt; element(s)</assert>
	
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

    <rule id="adlcp:timeLimitAction" context="adlcp:timeLimitAction">
    
        <assert test="count(.) &gt; 0">info~Testing the &lt;adlcp:timeLimitAction&gt; element for conformance</assert>
    	
    	<!-- REQ_30.6.3.6.9.1.1 -->
    	<!-- The <adlcp:timeLimitAction> element shall only be used with <item> elements that references SCO resources.	-->
    	<let name="id" value="parent::node()/attribute::identifierref" />
    	<assert test="(count(parent::*[@identifierref]) &lt; 1) or
    				  (count(//imscp:resource[normalize-space(@identifier)=$id]) &lt; 1) or
    				  (//imscp:resource[normalize-space(@identifier)=$id]/normalize-space(attribute::adlcp:scormType) != 'sco')">failed~Only those &lt;item&gt; elements that reference a SCO resource can contain the &lt;adlcp:timeLimitAction&gt; element</assert>
    
    
    	<!-- REQ_30.6.3.6.9.2 --> 
    	<!-- The <adlcp:timeLimitAction> element's value shall be one of the following restricted characterstrings: -->
		<!-- exit,message    exit,no message    continue,message    continue,no message -->
		<let name="timeLimitAction" value="normalize-space(.)"/>
		<assert test="true()">info~Testing the &lt;timeLimitAction&gt; element for conformance to the Vocabulary Data Type</assert>
		<assert test="($timeLimitAction != 'exit,message') and 
					  ($timeLimitAction != 'exit,no message') and 
					  ($timeLimitAction != 'continue,message') and 
					  ($timeLimitAction != 'continue,no message')">failed~[<value-of select="."/>] is not a valid value for the &lt;timeLimitAction&gt; element</assert>
        <assert test="($timeLimitAction = 'exit,message') or 
					  ($timeLimitAction = 'exit,no message') or 
					  ($timeLimitAction = 'continue,message') or 
					  ($timeLimitAction = 'continue,no message')">passed~[<value-of select="."/>] is a valid value for the &lt;timeLimitAction&gt; element</assert>
    
    	<!-- REQ_30.6.3.6.9.1 -->
    	<!-- The <adlcp:timeLimitAction> element shall only exist as a child element of an <item> element. -->
		<assert test="true()">info~Testing the location of the &lt;timeLimitAction&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'item') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1')">failed~The &lt;timeLimitAction&gt; must exist as a child of the &lt;item&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')">passed~The &lt;timeLimitAction&gt; is the child of the &lt;item&gt; element</assert>
    
    	<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule> 
    
    <rule id="adlcp:dataFromLMS" context="adlcp:dataFromLMS">
    
        <assert test="count(.) &gt; 0">info~Testing the &lt;adlcp:dataFromLMS&gt; element for conformance</assert>
    	
    	<!-- REQ_30.6.3.6.10.2 -->
    	<!-- The <adlcp:dataFromLMS> element shall only be used with <item> elements that references SCO resources.	-->
    	<let name="id" value="parent::node()/attribute::identifierref" />
    	<assert test="(count(parent::*[@identifierref]) &lt; 1) or
    				  (count(//imscp:resource[normalize-space(@identifier)=$id]) &lt; 1) or
    				  (//imscp:resource[normalize-space(@identifier)=$id]/normalize-space(attribute::adlcp:scormType) != 'sco')">failed~Only those &lt;item&gt; elements that reference a SCO resource can contain the &lt;adlcp:dataFromLMS&gt; element</assert>
    
    	<!-- REQ_30.6.3.6.10.2 -->	
    	<!-- The <adlcp:dataFromLMS> element's value shall be represented as an xs:string. -->
    	<!-- Tested by IMSCP schema -->
    	
    	<!-- REQ_PENDING -->
		<!-- adlcp:dataFromLMS SPM 4000 -->
		<assert test="count(.) &gt; 0">info~Testing the character length of the &lt;adlcp:dataFromLMS&gt; element value</assert>
		<assert test="string-length(.) &gt; 4000">warning~The value contained in the &lt;adlcp:dataFromLMS&gt; element is greater than the SPM of 4000 characters</assert>
		<assert test="string-length(.) &lt;= 4000">passed~The character length for the value of the &lt;adlcp:dataFromLMS&gt; element has passed conformance</assert>
    
    	<!-- REQ_30.6.3.6.10.1 -->
    	<!-- The <adlcp:dataFromLMS> element shall only exist as a child element of an <item> element. -->
		<assert test="true()">info~Testing the location of the &lt;dataFromLMS&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'item') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1')">failed~The &lt;dataFromLMS&gt; must exist as a child of the &lt;item&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')">passed~The &lt;dataFromLMS&gt; is the child of the &lt;item&gt; element</assert>
    
    	<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule> 
    
    <rule id="adlcp:completionThreshold" context="adlcp:completionThreshold">
    	
    	<assert test="count(.) &gt; 0">info~Testing the &lt;adlcp:completionThreshold&gt; element for conformance</assert>
    	
        <let name="attributesExist" value="(normalize-space(.) = '') or (count(@completedByMeasure) &gt; 0) or (count(@minProgressMeasure) &gt; 0) or (count(@progressWeight) &gt; 0)" />
      
        <!-- No Attributes, execute the deprecated (As of 2004 4th Edition) rules -->

        <!-- Note:  This use of <adlcp:completionThreshold> is deprecated with -->
        <!-- SCORM 2004 4th Ed..  Legacy packages may continue to use the element -->
        <!-- value in this manner, however using the element value for <adlcp:completionThreshold> may only be applied to <item> -->
        <assert test="($attributesExist = false())">info~Testing the location of the &lt;completionThreshold&gt; element</assert>
        <assert test="($attributesExist = false()) and ((local-name(parent::node()) != 'item') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1'))">failed~The &lt;completionThreshold&gt; must exist as a child of the &lt;item&gt; element</assert>
        <assert test="($attributesExist = false()) and ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1'))">passed~The &lt;completionThreshold&gt; is the child of the &lt;item&gt; element</assert>
        
        <!-- REQ_PENDING -->
        <assert test="($attributesExist = false()) and (normalize-space(.) != '')">warning~This use of &lt;adlcp:completionThreshold&gt; is deprecated with SCORM 2004 4th Edition.  Legacy SCORM 2004 3rd Edition packages may continue to use the element value in this manner, however using the element value for &lt;adlcp:completionThreshold&gt; may only be applied to &lt;item&gt; elements who reference SCOs.  These packages should be updated to use the new adlcp:minProgressMeasure attribute.</assert>
        
    	<!-- REQ_30.6.3.6.13.1 -->
    	<!-- The <adlcp:completionThreshold> element shall only be used with <item> elements that references SCO resources.	-->
    	<let name="id" value="parent::node()/attribute::identifierref" />
    	<assert test="($attributesExist = false()) and ((count(parent::*[@identifierref]) &lt; 1) or
    				  (count(//imscp:resource[normalize-space(@identifier)=$id]) &lt; 1) or
    				  (//imscp:resource[normalize-space(@identifier)=$id]/normalize-space(attribute::adlcp:scormType) != 'sco'))">failed~Only those &lt;item&gt; elements that reference a SCO resource can contain the &lt;adlcp:completionThreshold&gt; element</assert>
	    
	    <!-- REQ_30.6.3.6.13.2 -->
	    <!-- The <adlcp:completionThreshold> element's value shall be represented as an xs:decimal value that falls in the range of (0.0..1.0), inclusive.-->
	    <let name="value" value="number(.)" />
	    <assert test="($attributesExist = false()) and (count(.) &gt; 0)">info~Testing the decimal range of the &lt;adlcp:completionThreshold&gt; element value</assert>
	    <assert test="($attributesExist = false()) and (($value &gt;= 0.0) and ($value &lt;= 1.0)) and (string($value) != 'NaN')">passed~The &lt;adlcp:completionThreshold&gt; value [<value-of select="normalize-space(.)"/>] is within the specified decimal range</assert>
	    <assert test="($attributesExist = false()) and (($value &lt; 0.0) or ($value &gt; 1.0) or (string($value) = 'NaN'))">failed~The &lt;adlcp:completionThreshold&gt; value [<value-of select="normalize-space(.)"/>] was not within the specified decimal range</assert>
	    
	    <!-- Attributes are present, execute the new (As of 2004 4th Edition) rules -->

        <!-- REQ_PENDING -->
        <!-- <completionThreshold> can only appear as a child of <item> or <organization> -->
        <assert test="$attributesExist = true()">info~Testing the location of the &lt;completionThreshold&gt; element</assert>
        <assert test="($attributesExist = true()) and ((local-name(parent::node()) != 'item') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1')) and ((local-name(parent::node()) != 'organization') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1'))">failed~The &lt;completionThreshold&gt; must exist as a child of the &lt;item&gt; or &lt;organization&gt; element</assert>
        <assert test="(namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1') and ($attributesExist = true()) and ((local-name(parent::node()) = 'item') or (local-name(parent::node()) != 'organization'))">passed~The &lt;completionThreshold&gt; is the child of the &lt;item&gt; or &lt;organization&gt; element</assert>
        

        <!-- REQ_PENDING -->
        <!-- If any of the three new attributes exist, the package cannot include an element value for completionThreshold -->
        <assert test="($attributesExist = true())">info~Testing the value of the &lt;completionThreshold&gt; element</assert>
        <assert test="($attributesExist = true()) and (normalize-space(.) = '')">passed~The &lt;completionThreshold&gt; element does not contain a value</assert>
        <assert test="($attributesExist = true()) and (normalize-space(.) != '')">failed~The &lt;completionThreshold&gt; element is not permitted to contain a value</assert>
       
        <!-- REQ_PENDING -->
        <!-- The completedByMeasure attribute's value shall be either true or false -->
        <let name="completedByMeasure" value="normalize-space(@completedByMeasure)" />
        <assert test="($attributesExist = true()) and count(@completedByMeasure) &gt; 0">info~Testing the "completedByMeasure" attribute for conformance to the Vocabulary Data Type</assert>
        <assert test="($attributesExist = true()) and (count(@completedByMeasure) &gt; 0) and ($completedByMeasure != 'true') and ($completedByMeasure != 'false')">failed~[<value-of select="@completedByMeasure" />] is not a valid value for the "completedByMeasure" attribute</assert>
        <assert test="($attributesExist = true()) and (count(@completedByMeasure) &gt; 0) and ($completedByMeasure = 'true') or ($completedByMeasure = 'false')">passed~[<value-of select="@completedByMeasure" />] is a valid value for the "completedByMeasure" attribute</assert>        
        
        <!-- REQ_PENDING -->
        <!-- The minProgressMeasure attribute's value shall be represented as an xs:decimal value that falls in the range of (0.0..1.0), inclusive.-->
        <let name="minProgressMeasure" value="number(@minProgressMeasure)" />
        <assert test="($attributesExist = true()) and (count(@minProgressMeasure) &gt; 0)">info~Testing the decimal range of the "minProgressMeasure" attribute value</assert>
        <assert test="($attributesExist = true()) and (count(@minProgressMeasure) &gt; 0) and (($minProgressMeasure &gt;= 0.0) and ($minProgressMeasure &lt;= 1.0)) and (string($minProgressMeasure) != 'NaN')">passed~The "minProgressMeasure" attribute value [<value-of select="@minProgressMeasure" />] is within the specified decimal range</assert>
        <assert test="($attributesExist = true()) and (count(@minProgressMeasure) &gt; 0) and (($minProgressMeasure &lt; 0.0) or ($minProgressMeasure &gt; 1.0) or (string($minProgressMeasure) = 'NaN'))">failed~The "minProgressMeasure" attribute value [<value-of select="@minProgressMeasure" />] was not within the specified decimal range</assert>

        <!-- REQ_PENDING -->
        <!-- The progressWeight attribute's value shall be represented as an xs:decimal value that falls in the range of (0.0..1.0), inclusive.-->
        <let name="progressWeight" value="number(@progressWeight)" />
        <assert test="($attributesExist = true()) and (count(@progressWeight) &gt; 0)">info~Testing the decimal range of the "progressWeight" attribute value</assert>
        <assert test="($attributesExist = true()) and (count(@progressWeight) &gt; 0) and (($progressWeight &gt;= 0.0) and ($progressWeight &lt;= 1.0)) and (string($progressWeight) != 'NaN')">passed~The "progressWeight" attribute value [<value-of select="@progressWeight" />] is within the specified decimal range</assert>
        <assert test="($attributesExist = true()) and (count(@progressWeight) &gt; 0) and (($progressWeight &lt; 0.0) or ($progressWeight &gt; 1.0) or (string($progressWeight) = 'NaN'))">failed~The "progressWeight" attribute value [<value-of select="@progressWeight" />] was not within the specified decimal range</assert>        
       
    	<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
      
	</rule>    
      <rule id="adlcp:data" context="adlcp:data">
      <!-- REQ_30.6.3.7.14.1.1 -->
      <!-- The adlcp:data element shall only be used with <item> elements that reference SCO or Asset resources.-->
      <assert test="count(.) &gt; 0">info~Testing the &lt;adlcp:data&gt; element for conformance</assert>
      <let name="presid" value="parent::node()/attribute::identifierref" />
      <assert test="(count(parent::*[@identifierref]) &lt; 1) or
                 (count(//imscp:resource[normalize-space(@identifier)=$presid]) &lt; 1) or
                 ((//imscp:resource[normalize-space(@identifier)=$presid]/normalize-space(attribute::adlcp:scormType) != 'sco') and
                 (//imscp:resource[normalize-space(@identifier)=$presid]/normalize-space(attribute::adlcp:scormType) != 'asset'))">failed~The &lt;adlcp:data&gt; element shall only be used with &lt;item&gt; elements that reference SCO or Asset resources</assert>   

      <!-- REQ_30.6.3.7.14.1-->
      <!-- <adlcp:data> can only appear as a child of <item> -->
      <assert test="true()">info~Testing the location of the &lt;adlcp:data&gt; element</assert>
      <assert test="(local-name(parent::node()) != 'item') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imscp_v1p1')">failed~The &lt;adlcp:data&gt; element must exist as a child of the &lt;item&gt; element</assert>
      <assert test="(local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1') ">passed~The &lt;adlcp:data&gt; element is the child of the &lt;item&gt; element</assert>
       
      <!-- REQ_30.6.3.7.14.2 -->
      <!-- The <adlcp:data> element shall contain 1 or more <adlcp:map> elements. -->
      <assert test="true()">info~Testing multiplicity of the &lt;adlcp:map&gt; element</assert>
      <assert test="count(adlcp:map) &gt; 0">passed~The &lt;adlcp:data&gt; element contains 1 or More &lt;adlcp:map&gt; elements</assert>
      <assert test="count(adlcp:map) &lt; 1">failed~The &lt;adlcp:data&gt; element shall contain 1 or More &lt;adlcp:map&gt; elements</assert>   

      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>      
   </rule>
   <rule id="adlcp:map" context="adlcp:map">
   
       <assert test="count(.) &gt; 0">info~Testing the &lt;adlcp:map&gt; element with the targetID value of [<value-of select="@targetID"/>] for conformance</assert>
       
       <!-- REQ_30.6.3.7.14.2.1 -->
        <!-- 1 and only 1 targetID attribute -->  
        <assert test="true()">info~Testing multiplicity of the "targetID" attribute</assert>  
        <assert test="(count(@targetID) &lt; 1) or (count(@targetID) &gt; 1)">failed~The &lt;adlcp:map&gt; element shall contain 1 and only 1 "targetID" attribute</assert>
        <assert test="count(@targetID) = 1">passed~The &lt;adlcp:map&gt; element contains 1 and only 1 "targetID" attribute</assert>
           
       <!-- REQ_30.6.3.7.14.2.1.2 -->
       <!-- The value held by the targetID shall not be an empty characterstring  nor contain all white space characters. -->
       <assert test="count(@targetID) &gt; 0">info~Testing the character length of the "targetID" attribute value</assert>
       <assert test="(count(@targetID) &gt; 0) and (normalize-space(@targetID) = '') and (string-length(@targetID) &gt; 0)">failed~Attribute "targetID" must contain valid characters, all whitespace found.</assert>
       <assert test="(count(@targetID) &gt; 0) and (string-length(@targetID) = 0)">failed~No text was found in attribute "targetID" and fails the minimum character length test</assert>
       <assert test="(count(@targetID) &gt; 0) and (normalize-space(@targetID) != '') and (string-length(@targetID) &gt; 0)">passed~The character length for the value of the "targetID" attribute has passed conformance</assert>  
       
       <!-- REQ_30.6.3.7.14.2.2 -->
       <!-- The <adlcp:map> element shall contain 0 or 1 readSharedData attribute.-->
       <assert test="count(@readSharedData) &gt; 0">info~Testing the multiplicity of the "readSharedData" attribute</assert>
       <assert test="count(@readSharedData) &gt; 0">passed~The &lt;adlcp:map&gt; element contains 1 "readSharedData" attribute</assert>
       
        <!-- REQ_30.6.3.7.14.2.2.2 -->
        <!-- The readSharedData attribute's value shall be either true or false -->
        <let name="readSharedData" value="normalize-space(@readSharedData)" />
        <assert test="count(@readSharedData) &gt; 0">info~Testing the "readSharedData" attribute for conformance to the Vocabulary Data Type</assert>
        <assert test="(count(@readSharedData) &gt; 0) and ($readSharedData!= 'true') and ($readSharedData!= 'false')">failed~[<value-of select="@readSharedData" />] is not a valid value for the "readSharedData" attribute</assert>
        <assert test="(count(@readSharedData) &gt; 0) and ($readSharedData= 'true') or ($readSharedData= 'false')">passed~[<value-of select="@readSharedData" />] is a valid value for the "readSharedData" attribute</assert>
       
       <!-- REQ_30.6.3.7.14.2.3 -->
       <!-- The <adlcp:map> element shall contain 0 or 1 writeSharedData attribute.-->
       <assert test="count(@writeSharedData) &gt; 0">info~Testing the multiplicity of the "writeSharedData" attribute</assert>
       <assert test="count(@writeSharedData) &gt; 0">passed~The &lt;adlcp:map&gt; element contains 1 "writeSharedData" attribute</assert>
       
        <!-- REQ_30.6.3.7.14.2.3.2 -->
        <!-- The writeSharedData attribute's value shall be either true or false -->
        <let name="writeSharedData" value="normalize-space(@writeSharedData)" />
        <assert test="count(@writeSharedData) &gt; 0">info~Testing the "writeSharedData" attribute for conformance to the Vocabulary Data Type</assert>
        <assert test="(count(@writeSharedData) &gt; 0) and ($writeSharedData!= 'true') and ($writeSharedData!= 'false')">failed~[<value-of select="@writeSharedData" />] is not a valid value for the "writeSharedData" attribute</assert>
        <assert test="(count(@writeSharedData) &gt; 0) and ($writeSharedData= 'true') or ($writeSharedData= 'false')">passed~[<value-of select="@writeSharedData" />] is a valid value for the "writeSharedData" attribute</assert>
        
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>                        
   </rule>
    
    <rule id="adlseq:constrainedChoiceConsiderations" context="adlseq:constrainedChoiceConsiderations">
	    
	    <assert test="count(.) &gt; 0">info~Testing the &lt;adlseq:constrainedChoiceConsiderations&gt; element for conformance</assert>
	    <!-- REQ_31.13.1 -->
    	<!-- The <adlseq:constrainedChoiceConsiderations> shall only exist as a child element of the <sequencing> element. -->
		<assert test="true()">info~Testing the location of the &lt;adlseq:constrainedChoiceConsiderations&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;adlseq:constrainedChoiceConsiderations&gt; must exist as a child of the &lt;sequencing&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;adlseq:constrainedChoiceConsiderations&gt; is the child of the &lt;sequencing&gt; element</assert>
    	
    	<!-- REQ_31.13.2 -->
         <!-- The <adlseq:constrainedChoiceConsiderations> element shall contain 0 or 1 preventActivation attribute.-->
      	 <assert test="count(@preventActivation) &gt; 0">info~Testing the multiplicity of the "preventActivation" attribute</assert>
	     <assert test="count(@preventActivation) &gt; 0">passed~The &lt;adlseq:constrainedChoiceConsiderations&gt; element contains 1 "preventActivation" attribute</assert>
         	     
	     <!-- REQ_31.13.2.1 -->
	     <!-- The preventActivation attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.13.2.2 -->
	     <!-- The preventActivation attribute's value shall be either true or false -->
	     <let name="preventActivation" value="normalize-space(@preventActivation)" />
	     <assert test="count(@preventActivation) &gt; 0">info~Testing the "preventActivation" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@preventActivation) &gt; 0) and ($preventActivation!= 'true') and ($preventActivation!= 'false')">failed~[<value-of select="@preventActivation" />] is not a valid value for the "preventActivation" attribute</assert>
		 <assert test="(count(@preventActivation) &gt; 0) and ($preventActivation= 'true') or ($preventActivation= 'false')">passed~[<value-of select="@preventActivation" />] is a valid value for the "preventActivation" attribute</assert>
      
         <!-- REQ_31.13.3 -->
         <!-- The <adlseq:constrainedChoiceConsiderations> element shall contain 0 or 1 constrainChoice attribute.-->
      	 <assert test="count(@constrainChoice) &gt; 0">info~Testing the multiplicity of the "constrainChoice" attribute</assert>
	     <assert test="count(@constrainChoice) &gt; 0">passed~The &lt;adlseq:constrainedChoiceConsiderations&gt; element contains 1 "constrainChoice" attribute</assert>
         	     
	     <!-- REQ_31.13.3.1 -->
	     <!-- The constrainChoice attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.13.3.2 -->
	     <!-- The constrainChoice attribute's value shall be either true or false -->
	     <let name="constrainChoice" value="normalize-space(@constrainChoice)" />
	     <assert test="count(@constrainChoice) &gt; 0">info~Testing the "constrainChoice" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@constrainChoice) &gt; 0) and ($constrainChoice!= 'true') and ($constrainChoice!= 'false')">failed~[<value-of select="@constrainChoice" />] is not a valid value for the "constrainChoice" attribute</assert>
		 <assert test="(count(@constrainChoice) &gt; 0) and ($constrainChoice= 'true') or ($constrainChoice= 'false')">passed~[<value-of select="@constrainChoice" />] is a valid value for the "constrainChoice" attribute</assert>
	    
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
    
    <rule id="adlseq:rollupConsiderations" context="adlseq:rollupConsiderations">
	    
	    <assert test="count(.) &gt; 0">info~Testing the &lt;adlseq:rollupConsiderations&gt; element for conformance</assert>
	    <!-- REQ_31.14.1-->
    	<!-- The <adlseq:rollupConsiderations> shall only exist as a child element of the <sequencing> element. -->
		<assert test="true()">info~Testing the location of the &lt;adlseq:rollupConsiderations&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;adlseq:rollupConsiderations&gt; must exist as a child of the &lt;sequencing&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;adlseq:rollupConsiderations&gt; is the child of the &lt;sequencing&gt; element</assert>
    	
    	<!-- REQ_31.14.2 -->
         <!-- The <adlseq:rollupConsiderations> element shall contain 0 or 1 requiredForSatisfied attribute. -->         
         <assert test="count(@requiredForSatisfied) &gt; 0">info~Testing the multiplicity of the "requiredForSatisfied" attribute</assert>
	     <assert test="count(@requiredForSatisfied) &gt; 0">passed~The &lt;adlseq:rollupConsiderations&gt; element contains 1 "requiredForSatisfied" attribute</assert>	

         <!-- REQ_31.14.2.1	-->
         <!-- The requiredForSatisfied attribute's value shall be represented as an xs:token type. -->
         <!-- Tested by ADLSEQ schema -->
    
	     <!-- REQ_31.14.2.2 -->
		 <!-- The requiredForSatisfied attribute's value shall be one of the following restricted tokens: -->
		 <!-- ifAttempted, ifNotSkipped, ifNotSuspended, always -->
		 <let name="requiredForSatisfied" value="normalize-space(@requiredForSatisfied)"/>
		 <assert test="count(@requiredForSatisfied) &gt; 0">info~Testing the "requiredForSatisfied" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@requiredForSatisfied) &gt; 0) 
		 		and ($requiredForSatisfied != 'ifAttempted') 
                and ($requiredForSatisfied != 'ifNotSkipped')
		 		and ($requiredForSatisfied != 'ifNotSuspended') 
		 		and ($requiredForSatisfied != 'always')">failed~[<value-of select="@requiredForSatisfied" />] is not a valid value for the "requiredForSatisfied" attribute</assert>
		 <assert test="(count(@requiredForSatisfied) &gt; 0) and 
		 		( ($requiredForSatisfied = 'ifAttempted') 
		 		or ($requiredForSatisfied = 'ifNotSkipped') 
                or ($requiredForSatisfied = 'ifNotSuspended') 
		 		or ($requiredForSatisfied = 'always') )">passed~[<value-of select="@requiredForSatisfied" />] is a valid value for the "requiredForSatisfied" attribute</assert>
         
         <!-- REQ_31.14.3 -->
         <!-- The <adlseq:rollupConsiderations> element shall contain 0 or 1 requiredForNotSatisfied attribute. -->         
         <assert test="count(@requiredForNotSatisfied) &gt; 0">info~Testing the multiplicity of the "requiredForNotSatisfied" attribute</assert>
	     <assert test="count(@requiredForNotSatisfied) &gt; 0">passed~The &lt;adlseq:rollupConsiderations&gt; element contains 1 "requiredForNotSatisfied" attribute</assert>	

         <!-- REQ_31.14.3.1	-->
         <!-- The requiredForNotSatisfied attribute's value shall be represented as an xs:token type. -->
         <!-- Tested by ADLSEQ schema -->

	     <!-- REQ_31.14.3.2 -->
		 <!-- The requiredForNotSatisfied attribute's value shall be one of the following restricted tokens: -->
		 <!-- ifAttempted, ifNotSkipped, ifNotSuspended, always -->
		 <let name="requiredForNotSatisfied" value="normalize-space(@requiredForNotSatisfied)"/>
		 <assert test="count(@requiredForNotSatisfied) &gt; 0">info~Testing the "requiredForNotSatisfied" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@requiredForNotSatisfied) &gt; 0) 
		 		and ($requiredForNotSatisfied != 'ifAttempted') 
                and ($requiredForNotSatisfied != 'ifNotSkipped')
		 		and ($requiredForNotSatisfied != 'ifNotSuspended') 
		 		and ($requiredForNotSatisfied != 'always')">failed~[<value-of select="@requiredForNotSatisfied" />] is not a valid value for the "requiredForNotSatisfied" attribute</assert>
		 <assert test="(count(@requiredForNotSatisfied) &gt; 0) and 
		 		( ($requiredForNotSatisfied = 'ifAttempted') 
		 		or ($requiredForNotSatisfied = 'ifNotSkipped') 
                or ($requiredForNotSatisfied = 'ifNotSuspended') 
		 		or ($requiredForNotSatisfied = 'always') )">passed~[<value-of select="@requiredForNotSatisfied" />] is a valid value for the "requiredForNotSatisfied" attribute</assert>
          
         <!-- REQ_31.14.4 -->
         <!-- The <adlseq:rollupConsiderations> element shall contain 0 or 1 requiredForCompleted attribute. -->         
         <assert test="count(@requiredForCompleted) &gt; 0">info~Testing the multiplicity of the "requiredForCompleted" attribute</assert>
	     <assert test="count(@requiredForCompleted) &gt; 0">passed~The &lt;adlseq:rollupConsiderations&gt; element contains 1 "requiredForCompleted" attribute</assert>	

         <!-- REQ_31.14.4.1	-->
         <!-- The requiredForCompleted attribute's value shall be represented as an xs:token type. -->
         <!-- Tested by ADLSEQ schema -->

	     <!-- REQ_31.14.4.2 -->
		 <!-- The requiredForCompleted attribute's value shall be one of the following restricted tokens: -->
		 <!-- ifAttempted, ifNotSkipped, ifNotSuspended, always -->
		 <let name="requiredForCompleted" value="normalize-space(@requiredForCompleted)"/>
		 <assert test="count(@requiredForCompleted) &gt; 0">info~Testing the "requiredForCompleted" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@requiredForCompleted) &gt; 0) 
		 		and ($requiredForCompleted != 'ifAttempted') 
                and ($requiredForCompleted != 'ifNotSkipped')
		 		and ($requiredForCompleted != 'ifNotSuspended') 
		 		and ($requiredForCompleted != 'always')">failed~[<value-of select="@requiredForCompleted" />] is not a valid value for the "requiredForCompleted" attribute</assert>
		 <assert test="(count(@requiredForCompleted) &gt; 0) and 
		 		( ($requiredForCompleted = 'ifAttempted') 
		 		or ($requiredForCompleted = 'ifNotSkipped') 
                or ($requiredForCompleted = 'ifNotSuspended') 
		 		or ($requiredForCompleted = 'always') )">passed~[<value-of select="@requiredForCompleted" />] is a valid value for the "requiredForCompleted" attribute</assert>
         
         <!-- REQ_31.14.5 -->
         <!-- The <adlseq:rollupConsiderations> element shall contain 0 or 1 requiredForIncomplete attribute. -->         
         <assert test="count(@requiredForIncomplete) &gt; 0">info~Testing the multiplicity of the "requiredForIncomplete" attribute</assert>
	     <assert test="count(@requiredForIncomplete) &gt; 0">passed~The &lt;adlseq:rollupConsiderations&gt; element contains 1 "requiredForIncomplete" attribute</assert>	

         <!-- REQ_31.14.5.1	-->
         <!-- The requiredForIncomplete attribute's value shall be represented as an xs:token type. -->
         <!-- Tested by ADLSEQ schema -->

	     <!-- REQ_31.14.5.2 -->
		 <!-- The requiredForIncomplete attribute's value shall be one of the following restricted tokens: -->
		 <!-- ifAttempted, ifNotSkipped, ifNotSuspended, always -->
		 <let name="requiredForIncomplete" value="normalize-space(@requiredForIncomplete)"/>
		 <assert test="count(@requiredForIncomplete) &gt; 0">info~Testing the "requiredForIncomplete" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@requiredForIncomplete) &gt; 0) 
		 		and ($requiredForIncomplete != 'ifAttempted') 
                and ($requiredForIncomplete != 'ifNotSkipped')
		 		and ($requiredForIncomplete != 'ifNotSuspended') 
		 		and ($requiredForIncomplete != 'always')">failed~[<value-of select="@requiredForIncomplete" />] is not a valid value for the "requiredForIncomplete" attribute</assert>
		 <assert test="(count(@requiredForIncomplete) &gt; 0) and 
		 		( ($requiredForIncomplete = 'ifAttempted') 
		 		or ($requiredForIncomplete = 'ifNotSkipped') 
                or ($requiredForIncomplete = 'ifNotSuspended') 
		 		or ($requiredForIncomplete = 'always') )">passed~[<value-of select="@requiredForIncomplete" />] is a valid value for the "requiredForIncomplete" attribute</assert>
       
         <!-- REQ_31.14.6 -->
         <!-- The <adlseq:rollupConsiderations> element shall contain 0 or 1 measureSatisfactionIfActive attribute.-->
      	 <assert test="count(@measureSatisfactionIfActive) &gt; 0">info~Testing the multiplicity of the "measureSatisfactionIfActive" attribute</assert>
	     <assert test="count(@measureSatisfactionIfActive) &gt; 0">passed~The &lt;adlseq:rollupConsiderations&gt; element contains 1 "measureSatisfactionIfActive" attribute</assert>
         	     
	     <!-- REQ_31.14.6.1 -->
	     <!-- The measureSatisfactionIfActive attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.14.6.2 -->
	     <!-- The measureSatisfactionIfActive attribute's value shall be either true or false -->
	     <let name="measureSatisfactionIfActive" value="normalize-space(@measureSatisfactionIfActive)" />
	     <assert test="count(@measureSatisfactionIfActive) &gt; 0">info~Testing the "measureSatisfactionIfActive" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@measureSatisfactionIfActive) &gt; 0) and ($measureSatisfactionIfActive!= 'true') and ($measureSatisfactionIfActive!= 'false')">failed~[<value-of select="@measureSatisfactionIfActive" />] is not a valid value for the "measureSatisfactionIfActive" attribute</assert>
		 <assert test="(count(@measureSatisfactionIfActive) &gt; 0) and ($measureSatisfactionIfActive= 'true') or ($measureSatisfactionIfActive= 'false')">passed~[<value-of select="@measureSatisfactionIfActive" />] is a valid value for the "measureSatisfactionIfActive" attribute</assert>
	    
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
    
    <rule id="adlseq:objectives" context="adlseq:objectives">
      
      <assert test="true()">info~Testing the &lt;adlseq:objectives&gt; element for conformance</assert>
      
      <!-- REQ_31.15.1 -->
      <!-- The <adlseq:objectives> shall only exist as a child of the <imsss:sequencing> element -->
      <assert test="true()">info~Testing the location of the &lt;adlseq:objectives&gt; element</assert>
      <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;adlseq:objectives&gt; must exist as a child of the &lt;sequencing&gt; element</assert>
      <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;adlseq:objectives&gt; is the child of the &lt;sequencing&gt; element</assert>
      
      <!-- REQ_31.15.2 -->
      <!-- The <adlseq:objectives> element shall contain 1 or more <adlseq:objective> child element -->
      <assert test="true()">info~Testing multiplicity of the &lt;adlseq:objective&gt; element</assert>
      <assert test="count(adlseq:objective) &gt; 0">passed~The &lt;adlseq:objectives&gt; element contains 1 or More &lt;adlseq:objective&gt; elements</assert>
      <assert test="count(adlseq:objective) &lt; 1">failed~The &lt;adlseq:objectives&gt; element shall contain 1 or More &lt;adlseq:objective&gt; elements</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
    </rule>
      
    <rule id="adlseq:objective" context="adlseq:objective">
      
       <assert test="count(@objectiveID) &gt; 0">info~Testing the &lt;adlseq:objective&gt; element with the objectiveID value of [<value-of select="@objectiveID"/>] for conformance</assert>
       
       <!-- REQ_31.15.2.3 -->
       <!-- The <adlseq:objective> element shall only be used as a child element of the <adlseq:objectives> element. -->
       <assert test="true()">info~Testing the location of the &lt;adlseq:objective&gt; element</assert>
       <assert test="(local-name(parent::node()) != 'objectives') or (namespace-uri(parent::node()) != 'http://www.adlnet.org/xsd/adlseq_v1p3')">failed~The &lt;adlseq:objective&gt; element must exist as a child of the &lt;adlseq:objectives&gt; element</assert>
       <assert test="(local-name(parent::node()) = 'objectives') and (namespace-uri(parent::node()) = 'http://www.adlnet.org/xsd/adlseq_v1p3')">passed~The &lt;adlseq:objective&gt; element is a child of the &lt;adlseq:objectives&gt; element</assert>
       
       <!-- REQ_31.15.2.1 -->
       <!-- The <adlseq:objective> element shall contain 1 and only 1 objectiveID attribute. -->
       <assert test="true()">info~Testing multiplicity of the "objectiveID" attribute</assert>    
       <assert test="(count(@objectiveID) &lt; 1) or (count(@objectiveID) &gt; 1)">failed~The &lt;adlseq:objective&gt; element shall contain 1 and only 1 "objectiveID" attribute</assert>
       <assert test="count(@objectiveID) = 1">passed~The &lt;adlseq:objective&gt; element contains 1 and only 1 "objectiveID" attribute</assert>
    
       <!-- REQ_31.15.2.1.1 -->
       <!-- The objectiveID attribute's value shall be represented as an xs:anyURI type. -->
       <!-- Refer to W3C XML Schema Part 2: Datatype for information on the valid set of values of an xs:anyURI. -->
       <!-- Tested by ADLSEQ schema -->
    
       <!-- REQ_31.15.2.1.2 -->
       <!-- The values for the objectiveID attributes shall be unique within the set of objectives defined for an activity. -->
       <let name="objectiveID" value="URIHandler:processWhitespace(@objectiveID)" />
       <assert test="count(@objectiveID) &gt; 0">info~Testing the "objectiveID" attribute for conformance</assert>
       <assert test="(count(@objectiveID) &gt; 0) and (count(../child::*[URIHandler:processWhitespace(@objectiveID)=$objectiveID]) = 1)">passed~The "objectiveID" attribute is unique within the &lt;adlseq:objectives&gt; element</assert>
       <assert test="(count(@objectiveID) &gt; 0) and (count(../child::*[URIHandler:processWhitespace(@objectiveID)=$objectiveID]) &gt; 1)">failed~The "objectiveID" attribute [<value-of select="@objectiveID" />] is not unique within the &lt;adlseq:objectives&gt; element</assert>
        
       <!-- REQ_31.15.2.1.3 -->
       <!-- The value held by the objectiveID shall not be an empty characterstring  nor contain all white space characters. -->
       <assert test="count(@objectiveID) &gt; 0">info~Testing the character length of the "objectiveID" attribute value</assert>
       <assert test="(count(@objectiveID) &gt; 0) and (URIHandler:processWhitespace(@objectiveID) = '') and (string-length(@objectiveID) &gt; 0)">failed~Attribute "objectiveID" must contain valid characters, all whitespace found.</assert>
       <assert test="(count(@objectiveID) &gt; 0) and (string-length(@objectiveID) = 0)">failed~No text was found in attribute "objectiveID" and fails the minimum character length test</assert>
       <assert test="(count(@objectiveID) &gt; 0) and (URIHandler:processWhitespace(@objectiveID) != '') and (string-length(@objectiveID) &gt; 0)">passed~The character length for the value of the "objectiveID" attribute has passed conformance</assert>     
       
       <!-- REQ_31.15.2.1.4 -->
       <!-- The adlseq:objectiveID attribute shall match an imsss:objectiveID attribute of an <imsss:objective> element within the same <sequencing> element -->
       <let name="objID" value="URIHandler:processWhitespace(@objectiveID)" />
       <let name="idRef" value="normalize-space(../../@IDRef)" />
       
       <!-- objectiveID under non-sequencingCollection -->
       <assert test="(count(@objectiveID)) and ((../local-name(parent::node()) = 'sequencing') and (../namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss'))">info~Test the "objectiveID" attribute for objective referencing</assert>
       
       <assert test="if ( count(../../imsss:objectives) &gt; 0 )
                     then( ((../local-name(parent::node()) = 'sequencing') and (../namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and ((../../local-name(parent::node()) != 'sequencingCollection') or (../../namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')) and (count(@objectiveID) &gt; 0) and (count(../../imsss:objectives/*[URIHandler:processWhitespace(@objectiveID) = $objID]) &lt; 1) )
                     else ( ((../local-name(parent::node()) = 'sequencing') and (../namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and ((../../local-name(parent::node()) != 'sequencingCollection') or (../../namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')) and (count(@objectiveID) &gt; 0) and (count(//imsss:sequencingCollection/imsss:sequencing[normalize-space(@ID)=$idRef]/imsss:objectives/*[URIHandler:processWhitespace(@objectiveID) = $objID]) &lt; 1) )"
                     >failed~The "objectiveID" attribute [<value-of select="@objectiveID" />] shall reference the "objectiveID" of a &lt;imsss:primaryObjective&gt; or &lt;imsss:objective&gt; element within the same &lt;sequencing&gt; element</assert>
       
       <assert test="if ( count(../../imsss:objectives) &gt; 0 )
                     then( ((../local-name(parent::node()) = 'sequencing') and (../namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and ((../../local-name(parent::node()) != 'sequencingCollection') or (../namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')) and (count(@objectiveID) &gt; 0) and (count(../../imsss:objectives/*[URIHandler:processWhitespace(@objectiveID) = $objID]) &gt; 0) )
                     else ( ((../local-name(parent::node()) = 'sequencing') and (../namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and ((../../local-name(parent::node()) != 'sequencingCollection') or (../namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')) and (count(@objectiveID) &gt; 0) and (count(//imsss:sequencingCollection/imsss:sequencing[normalize-space(@ID)=$idRef]/imsss:objectives/*[URIHandler:processWhitespace(@objectiveID) = $objID]) &gt; 0) )"
                     >passed~The "objectiveID" attribute [<value-of select="@objectiveID" />] referenced the "objectiveID" of a &lt;imsss:primaryObjective&gt; or &lt;imsss:objective&gt; element within the same &lt;sequencing&gt; element</assert>
       
       
       <!-- objectiveID under sequencingCollection -->
       <let name="objId" value="URIHandler:processWhitespace(@objectiveID)" />
       <let name="seqId" value="normalize-space(../../@ID)" />
         
       <assert test="(count(@objectiveID) &gt; 0) and (local-name(../../parent::node()) = 'sequencingCollection') and (parser:isSCObjectiveIDValid($objId, $seqId) = false())">failed~[<value-of select="@objectiveID" />] is not a valid value for the "objectiveID" attribute.  The "objectiveID" attribute shall represent an identifier of an objective found within each given activity</assert>        
       
       <!-- REQ_31.15.2.2 -->
       <!-- The <adlseq:objective> element shall contain 1 or more <adlseq:mapInfo> child elements. -->
       <assert test="true()">info~Testing multiplicity of the &lt;adlseq:mapInfo&gt; element</assert>
       <assert test="count(adlseq:mapInfo) &gt; 0">passed~The &lt;adlseq:objective&gt; element contains 1 or More &lt;adlseq:mapInfo&gt; elements</assert>
       <assert test="count(adlseq:mapInfo) &lt; 1">failed~The &lt;adlseq:objective&gt; element shall contain 1 or More &lt;adlseq:mapInfo&gt; elements</assert>        

       <!-- REQ_31.15.2.2.12 -->
       <!-- The <adlseq:mapInfo> element shall adhere to the following when dealing with Read Maps: -->
         
       <!-- REQ_31.15.2.2.12.1 -->
       <!-- If multiple <mapInfo> elements exist for an objective then only one <adlseq:mapInfo> element shall have the readRawScore attribute set to true. -->
       <assert test="count(adlseq:mapInfo) &gt; 1">info~Testing the vocabulary of the "readRawScore" atrribute</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readRawScore)='true']) &gt; 1)">failed~Objective [<value-of select="@objectiveID"/>] is set up to read the raw score more than once from the global objective</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readRawScore)='true']) &lt;= 1)">passed~Objective [<value-of select="@objectiveID"/>] is set up to read the raw score from only one global objective</assert>
         
       <!-- REQ_31.15.2.2.12.2 -->
       <!-- If multiple <mapInfo> elements exist for an objective then only one <adlseq:mapInfo> element shall have the readMinScore attribute set to true. -->
       <assert test="count(adlseq:mapInfo) &gt; 1">info~Testing the vocabulary of the "readMinScore" atrribute</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readMinScore)='true']) &gt; 1)">failed~Objective [<value-of select="@objectiveID"/>] is set up to read the minimum score more than once from the global objective</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readMinScore)='true']) &lt;= 1)">passed~Objective [<value-of select="@objectiveID"/>] is set up to read the minimum score from only one global objective</assert>
         
       <!-- REQ_31.15.2.2.12.3 -->
       <!-- If multiple <mapInfo> elements exist for an objective then only one <adlseq:mapInfo> element shall have the readMaxScore attribute set to true. -->
       <assert test="count(adlseq:mapInfo) &gt; 1">info~Testing the vocabulary of the "readMaxScore" atrribute</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readMaxScore)='true']) &gt; 1)">failed~Objective [<value-of select="@objectiveID"/>] is set up to read the maximum score more than once from the global objective</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readMaxScore)='true']) &lt;= 1)">passed~Objective [<value-of select="@objectiveID"/>] is set up to read the maximum from only one global objective</assert>
         
       <!-- REQ_31.15.2.2.12.4 -->
       <!-- If multiple <mapInfo> elements exist for an objective then only one <adlseq:mapInfo> element shall have the readCompletionStatus attribute set to true. -->
       <assert test="count(adlseq:mapInfo) &gt; 1">info~Testing the vocabulary of the "readCompletionStatus" atrribute</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readCompletionStatus)='true']) &gt; 1)">failed~Objective [<value-of select="@objectiveID"/>] is set up to read the completion status more than once from the global objective</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readCompletionStatus)='true']) &lt;= 1)">passed~Objective [<value-of select="@objectiveID"/>] is set up to read the completion status from only one global objective</assert>
         
       <!-- REQ_31.15.2.2.12.5 -->
       <!-- If multiple <mapInfo> elements exist for an objective then only one <adlseq:mapInfo> element shall have the readProgressMeasure attribute set to true. -->
       <assert test="count(adlseq:mapInfo) &gt; 1">info~Testing the vocabulary of the "readProgressMeasure" atrribute</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readProgressMeasure)='true']) &gt; 1)">failed~Objective [<value-of select="@objectiveID"/>] is set up to read the progress measure more than once from the global objective</assert>
       <assert test="(count(adlseq:mapInfo) &gt; 1) and (count(adlseq:mapInfo[normalize-space(@readProgressMeasure)='true']) &lt;= 1)">passed~Objective [<value-of select="@objectiveID"/>] is set up to read the progress measure from only one global objective</assert>

       <!-- REQ_31.15.2.2.13 -->
       <!-- The <adlseq:mapInfo> element shall adhere to the following when dealing with Write Maps: -->
         
       <!-- REQ_30.7.3.4.2 -->
       <!-- adlcp:scormType can only appear as an attribute on <resource> -->
       <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
       <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
       <!-- REQ_30.6.3.3.2 -->
       <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
       <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
       <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

       <!-- REQ_30.6.3.4.3 -->
       <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
       <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
       <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
    </rule>
    
    <rule id="adlseq:mapInfo" context="adlseq:mapInfo">
      
         <assert test="count(@targetObjectiveID) &gt; 0">info~Testing the &lt;adlseq:mapInfo&gt; element with the targetObjectiveID value of [<value-of select="@targetObjectiveID"/>] for conformance</assert>
         <assert test="count(@targetObjectiveID) &lt;= 0">info~Testing the &lt;adlseq:mapInfo&gt; element for conformance</assert>
      
         <!-- REQ_31.15.2.2.14 -->
         <!-- The <adlseq:mapInfo> element shall only be used as a child of the <adlseq:objective> element. -->
         <assert test="true()">info~Testing the location of the &lt;adlseq:mapInfo&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'objective') or (namespace-uri(parent::node()) != 'http://www.adlnet.org/xsd/adlseq_v1p3')">failed~The &lt;adlseq:mapInfo&gt; element must exist as a child of the &lt;adlseq:objective&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'objective') and (namespace-uri(parent::node()) = 'http://www.adlnet.org/xsd/adlseq_v1p3')">passed~The &lt;adlseq:mapInfo&gt; element is a child of the &lt;adlseq:objective&gt; element</assert>
      
         <!-- REQ_31.15.2.2.1 -->    
         <!-- The <adlseq:mapInfo> element shall contain 1 and only 1 targetObjectiveID attribute. -->
         <assert test="count(@targetObjectiveID) &gt; 0">info~Testing the multiplicity of the "targetObjectiveID" atrribute</assert>
         <assert test="( count(@targetObjectiveID) &gt; 1 ) or ( count(@targetObjectiveID) &lt; 1 )">failed~The &lt;adlseq:mapInfo&gt; element shall contain 1 and only 1 "targetObjectiveID" attribute</assert>
         <assert test="count(@targetObjectiveID) = 1">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "targetObjectiveID" attribute</assert>

         <!-- REQ_31.15.2.2.1.1 -->
         <!-- The targetObjectiveID attribute's value shall be represented as an xs:anyURI type. -->
         <!-- Tested by ADLSEQ schema -->
         
         <!-- REQ_31.15.2.2.1.2 -->
         <!-- The value held by the targetObjectiveID shall not be an empty characterstring nor contain all white space characters. -->
         <assert test="count(@targetObjectiveID) &gt; 0">info~Testing the character length of the "targetObjectiveID" attribute value</assert>
         <assert test="(count(@targetObjectiveID) &gt; 0) and (normalize-space(URIHandler:processWhitespace(@targetObjectiveID)) = '') and (string-length(@targetObjectiveID) &gt; 0)">failed~Attribute "targetObjectiveID" must contain valid characters, all whitespace found</assert>
         <assert test="(count(@targetObjectiveID) &gt; 0) and (string-length(@targetObjectiveID) = 0)">failed~No text was found in attribute "targetObjectiveID" and fails the minimum character length test</assert>
         <assert test="(count(@targetObjectiveID) &gt; 0) and (normalize-space(URIHandler:processWhitespace(@targetObjectiveID)) != '') and (string-length(@targetObjectiveID) &gt; 0)">passed~The character length for the value of the "targetObjectiveID" attribute has passed conformance</assert>     
         
         <!-- REQ_31.15.2.2.2 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 readRawScore attribute. -->
         <assert test="count(@readRawScore) &gt; 0">info~Testing the multiplicity of the "readRawScore" attribute</assert>
         <assert test="count(@readRawScore) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "readRawScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.2.1 -->
         <!-- The readRawScore attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.2.2 -->
         <!-- The readRawScore attribute's value shall be either true or false -->
         <let name="readRawScore" value="normalize-space(@readRawScore)" />
         <assert test="count(@readRawScore) &gt; 0">info~Testing the "readRawScore" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@readRawScore) &gt; 0) and ($readRawScore != 'true') and ($readRawScore != 'false')">failed~[<value-of select="@readRawScore" />] is not a valid value for the "readRawScore" attribute</assert>
         <assert test="(count(@readRawScore) &gt; 0) and ($readRawScore = 'true') or ($readRawScore = 'false')">passed~[<value-of select="@readRawScore" />] is a valid value for the "readRawScore" attribute</assert>

         <!-- REQ_31.15.2.2.3 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 readMinScore attribute. -->
         <assert test="count(@readMinScore) &gt; 0">info~Testing the multiplicity of the "readMinScore" attribute</assert>
         <assert test="count(@readMinScore) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "readMinScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.3.1 -->
         <!-- The readMinScore attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.3.2 -->
         <!-- The readMinScore attribute's value shall be either true or false -->
         <let name="readMinScore" value="normalize-space(@readMinScore)" />
         <assert test="count(@readMinScore) &gt; 0">info~Testing the "readMinScore" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@readMinScore) &gt; 0) and ($readMinScore != 'true') and ($readMinScore != 'false')">failed~[<value-of select="@readMinScore" />] is not a valid value for the "readMinScore" attribute</assert>
         <assert test="(count(@readMinScore) &gt; 0) and ($readMinScore = 'true') or ($readMinScore = 'false')">passed~[<value-of select="@readMinScore" />] is a valid value for the "readMinScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.4 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 readMaxScore attribute. -->
         <assert test="count(@readMaxScore) &gt; 0">info~Testing the multiplicity of the "readMaxScore" attribute</assert>
         <assert test="count(@readMaxScore) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "readMaxScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.4.1 -->
         <!-- The readMaxScore attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.4.2 -->
         <!-- The readMaxScore attribute's value shall be either true or false -->
         <let name="readMaxScore" value="normalize-space(@readMaxScore)" />
         <assert test="count(@readMaxScore) &gt; 0">info~Testing the "readMaxScore" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@readMaxScore) &gt; 0) and ($readMaxScore != 'true') and ($readMaxScore != 'false')">failed~[<value-of select="@readMaxScore" />] is not a valid value for the "readMaxScore" attribute</assert>
         <assert test="(count(@readMaxScore) &gt; 0) and ($readMaxScore = 'true') or ($readMaxScore = 'false')">passed~[<value-of select="@readMaxScore" />] is a valid value for the "readMaxScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.5 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 readCompletionStatus attribute. -->
         <assert test="count(@readCompletionStatus) &gt; 0">info~Testing the multiplicity of the "readCompletionStatus" attribute</assert>
         <assert test="count(@readCompletionStatus) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "readCompletionStatus" attribute</assert>
         
         <!-- REQ_31.15.2.2.5.1 -->
         <!-- The readCompletionStatus attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.5.2 -->
         <!-- The readCompletionStatus attribute's value shall be either true or false -->
         <let name="readCompletionStatus" value="normalize-space(@readCompletionStatus)" />
         <assert test="count(@readCompletionStatus) &gt; 0">info~Testing the "readCompletionStatus" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@readCompletionStatus) &gt; 0) and ($readCompletionStatus != 'true') and ($readCompletionStatus != 'false')">failed~[<value-of select="@readCompletionStatus" />] is not a valid value for the "readCompletionStatus" attribute</assert>
         <assert test="(count(@readCompletionStatus) &gt; 0) and ($readCompletionStatus = 'true') or ($readCompletionStatus = 'false')">passed~[<value-of select="@readCompletionStatus" />] is a valid value for the "readCompletionStatus" attribute</assert>
         
         <!-- REQ_31.15.2.2.6 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 readProgressMeasure attribute. -->
         <assert test="count(@readProgressMeasure) &gt; 0">info~Testing the multiplicity of the "readProgressMeasure" attribute</assert>
         <assert test="count(@readProgressMeasure) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "readProgressMeasure" attribute</assert>
         
         <!-- REQ_31.15.2.2.6.1 -->
         <!-- The readProgressMeasure attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.6.2 -->
         <!-- The readProgressMeasure attribute's value shall be either true or false -->
         <let name="readProgressMeasure" value="normalize-space(@readProgressMeasure)" />
         <assert test="count(@readProgressMeasure) &gt; 0">info~Testing the "readProgressMeasure" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@readProgressMeasure) &gt; 0) and ($readProgressMeasure != 'true') and ($readProgressMeasure != 'false')">failed~[<value-of select="@readProgressMeasure" />] is not a valid value for the "readProgressMeasure" attribute</assert>
         <assert test="(count(@readProgressMeasure) &gt; 0) and ($readProgressMeasure = 'true') or ($readProgressMeasure = 'false')">passed~[<value-of select="@readProgressMeasure" />] is a valid value for the "readProgressMeasure" attribute</assert>

         <!-- REQ_31.15.2.2.7 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 writeRawScore attribute. -->
         <assert test="count(@writeRawScore) &gt; 0">info~Testing the multiplicity of the "writeRawScore" attribute</assert>
         <assert test="count(@writeRawScore) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "writeRawScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.7.1 -->
         <!-- The writeRawScore attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.7.2 -->
         <!-- The writeRawScore attribute's value shall be either true or false -->
         <let name="writeRawScore" value="normalize-space(@writeRawScore)" />
         <assert test="count(@writeRawScore) &gt; 0">info~Testing the "writeRawScore" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@writeRawScore) &gt; 0) and ($writeRawScore != 'true') and ($writeRawScore != 'false')">failed~[<value-of select="@writeRawScore" />] is not a valid value for the "writeRawScore" attribute</assert>
         <assert test="(count(@writeRawScore) &gt; 0) and ($writeRawScore = 'true') or ($writeRawScore = 'false')">passed~[<value-of select="@writeRawScore" />] is a valid value for the "writeRawScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.8 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 writeMinScore attribute. -->
         <assert test="count(@writeMinScore) &gt; 0">info~Testing the multiplicity of the "writeMinScore" attribute</assert>
         <assert test="count(@writeMinScore) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "writeMinScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.8.1 -->
         <!-- The writeMinScore attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.8.2 -->
         <!-- The writeMinScore attribute's value shall be either true or false -->
         <let name="writeMinScore" value="normalize-space(@writeMinScore)" />
         <assert test="count(@writeMinScore) &gt; 0">info~Testing the "writeMinScore" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@writeMinScore) &gt; 0) and ($writeMinScore != 'true') and ($writeMinScore != 'false')">failed~[<value-of select="@writeMinScore" />] is not a valid value for the "writeMinScore" attribute</assert>
         <assert test="(count(@writeMinScore) &gt; 0) and ($writeMinScore = 'true') or ($writeMinScore = 'false')">passed~[<value-of select="@writeMinScore" />] is a valid value for the "writeMinScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.9 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 writeMaxScore attribute. -->
         <assert test="count(@writeMaxScore) &gt; 0">info~Testing the multiplicity of the "writeMaxScore" attribute</assert>
         <assert test="count(@writeMaxScore) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "writeMaxScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.9.1 -->
         <!-- The writeMaxScore attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.9.2 -->
         <!-- The writeMaxScore attribute's value shall be either true or false -->
         <let name="writeMaxScore" value="normalize-space(@writeMaxScore)" />
         <assert test="count(@writeMaxScore) &gt; 0">info~Testing the "writeMaxScore" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@writeMaxScore) &gt; 0) and ($writeMaxScore != 'true') and ($writeMaxScore != 'false')">failed~[<value-of select="@writeMaxScore" />] is not a valid value for the "writeMaxScore" attribute</assert>
         <assert test="(count(@writeMaxScore) &gt; 0) and ($writeMaxScore = 'true') or ($writeMaxScore = 'false')">passed~[<value-of select="@writeMaxScore" />] is a valid value for the "writeMaxScore" attribute</assert>
         
         <!-- REQ_31.15.2.2.10 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 writeCompletionStatus attribute. -->
         <assert test="count(@writeCompletionStatus) &gt; 0">info~Testing the multiplicity of the "writeCompletionStatus" attribute</assert>
         <assert test="count(@writeCompletionStatus) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "writeCompletionStatus" attribute</assert>
         
         <!-- REQ_31.15.2.2.10.1 -->
         <!-- The writeCompletionStatus attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.10.2 -->
         <!-- The writeCompletionStatus attribute's value shall be either true or false -->
         <let name="writeCompletionStatus" value="normalize-space(@writeCompletionStatus)" />
         <assert test="count(@writeCompletionStatus) &gt; 0">info~Testing the "writeCompletionStatus" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@writeCompletionStatus) &gt; 0) and ($writeCompletionStatus != 'true') and ($writeCompletionStatus != 'false')">failed~[<value-of select="@writeCompletionStatus" />] is not a valid value for the "writeCompletionStatus" attribute</assert>
         <assert test="(count(@writeCompletionStatus) &gt; 0) and ($writeCompletionStatus = 'true') or ($writeCompletionStatus = 'false')">passed~[<value-of select="@writeCompletionStatus" />] is a valid value for the "writeCompletionStatus" attribute</assert>
         
         <!-- REQ_31.15.2.2.11 -->
         <!-- The <adlseq:mapInfo> element shall contain 0 or 1 writeProgressMeasure attribute. -->
         <assert test="count(@writeProgressMeasure) &gt; 0">info~Testing the multiplicity of the "writeProgressMeasure" attribute</assert>
         <assert test="count(@writeProgressMeasure) &gt; 0">passed~The &lt;adlseq:mapInfo&gt; element contains 1 "writeProgressMeasure" attribute</assert>
         
         <!-- REQ_31.15.2.2.11.1 -->
         <!-- The writeProgressMeasure attribute's value shall be represented as an xs:boolean type. -->
         
         <!-- REQ_31.15.2.2.11.2 -->
         <!-- The writeProgressMeasure attribute's value shall be either true or false -->
         <let name="writeProgressMeasure" value="normalize-space(@writeProgressMeasure)" />
         <assert test="count(@writeProgressMeasure) &gt; 0">info~Testing the "writeProgressMeasure" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@writeProgressMeasure) &gt; 0) and ($writeProgressMeasure != 'true') and ($writeProgressMeasure != 'false')">failed~[<value-of select="@writeProgressMeasure" />] is not a valid value for the "writeProgressMeasure" attribute</assert>
         <assert test="(count(@writeProgressMeasure) &gt; 0) and ($writeProgressMeasure = 'true') or ($writeProgressMeasure = 'false')">passed~[<value-of select="@writeProgressMeasure" />] is a valid value for the "writeProgressMeasure" attribute</assert>
         
         <!-- REQ_31.15.2.2.13.1 -->
         <!-- For an activity, if multiple objectives have <adlseq:mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeRawScore attribute set to true. -->
         <let name="mapID" value="URIHandler:processWhitespace(@targetObjectiveID)" />
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeRawScore)='true']) &gt; 1)">info~Testing the "writeRawScore" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeRawScore)='true']) &gt; 1)">failed~The "writeRawScore" attribute shall be set to true for only one &lt;adlseq:mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
         
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeRawScore)='true']) &lt;= 1)">info~Testing the "writeRawScore" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeRawScore)='true']) &lt;= 1)">passed~The "writeRawScore" attribute is set to true for only one &lt;adlseq:mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>
         
         <!-- REQ_31.15.2.2.13.2 -->
         <!-- For an activity, if multiple objectives have <adlseq:mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeMinScore attribute set to true. -->
         <let name="mapID" value="URIHandler:processWhitespace(@targetObjectiveID)" />
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMinScore)='true']) &gt; 1)">info~Testing the "writeMinScore" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMinScore)='true']) &gt; 1)">failed~The "writeMinScore" attribute shall be set to true for only one &lt;adlseq:mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
         
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMinScore)='true']) &lt;= 1)">info~Testing the "writeMinScore" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMinScore)='true']) &lt;= 1)">passed~The "writeMinScore" attribute is set to true for only one &lt;adlseq:mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>
         
         <!-- REQ_31.15.2.2.13.3 -->
         <!-- For an activity, if multiple objectives have <adlseq:mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeMaxScore attribute set to true. -->
         <let name="mapID" value="URIHandler:processWhitespace(@targetObjectiveID)" />
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMaxScore)='true']) &gt; 1)">info~Testing the "writeMaxScore" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMaxScore)='true']) &gt; 1)">failed~The "writeMaxScore" attribute shall be set to true for only one &lt;adlseq:mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
         
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMaxScore)='true']) &lt;= 1)">info~Testing the "writeMaxScore" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeMaxScore)='true']) &lt;= 1)">passed~The "writeMaxScore" attribute is set to true for only one &lt;adlseq:mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>

         <!-- REQ_31.15.2.2.13.4 -->
         <!-- For an activity, if multiple objectives have <adlseq:mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeCompletionStatus attribute set to true. -->
         <let name="mapID" value="URIHandler:processWhitespace(@targetObjectiveID)" />
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeCompletionStatus)='true']) &gt; 1)">info~Testing the "writeCompletionStatus" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeCompletionStatus)='true']) &gt; 1)">failed~The "writeCompletionStatus" attribute shall be set to true for only one &lt;adlseq:mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
         
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeCompletionStatus)='true']) &lt;= 1)">info~Testing the "writeCompletionStatus" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeCompletionStatus)='true']) &lt;= 1)">passed~The "writeCompletionStatus" attribute is set to true for only one &lt;adlseq:mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>
         
         <!-- REQ_31.15.2.2.13.5 -->
         <!-- For an activity, if multiple objectives have <adlseq:mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeProgressMeasure attribute set to true. -->
         <let name="mapID" value="URIHandler:processWhitespace(@targetObjectiveID)" />
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeProgressMeasure)='true']) &gt; 1)">info~Testing the "writeProgressMeasure" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeProgressMeasure)='true']) &gt; 1)">failed~The "writeProgressMeasure" attribute shall be set to true for only one &lt;adlseq:mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
         
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeProgressMeasure)='true']) &lt;= 1)">info~Testing the "writeProgressMeasure" attribute for conformance</assert>
         <assert test="(count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
                       (count(../../child::*/adlseq:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeProgressMeasure)='true']) &lt;= 1)">passed~The "writeProgressMeasure" attribute is set to true for only one &lt;adlseq:mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>
         
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
    </rule>
    
    <rule id="adlnav:navigationInterface" context="adlnav:navigationInterface">
	    
	    <assert test="count(.) &gt; 0">info~Testing the &lt;adlnav:navigationInterface&gt; element for conformance</assert> 
	    <!-- REQ_33.3.2 -->
    	<!-- <adlnav:navigationInterface> can only appear as a child of <adlnav:presentation> -->
		<assert test="true()">info~Testing the location of the &lt;adlnav:navigationInterface&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'presentation') or (namespace-uri(parent::node()) != 'http://www.adlnet.org/xsd/adlnav_v1p3')">failed~The &lt;adlnav:navigationInterface&gt; must exist as a child of the &lt;adlnav:presentation&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'presentation') and (namespace-uri(parent::node()) = 'http://www.adlnet.org/xsd/adlnav_v1p3')">passed~The &lt;adlnav:navigationInterface&gt; is the child of the &lt;adlnav:presentation&gt; element</assert>
    	
    	<!-- REQ_33.1.1	-->
    	<!-- The <adlnav:navigationInterface> element shall contain 0 or More <adlnav:hideLMSUI> element. -->
    	<assert test="count(adlnav:hideLMSUI) &gt; 0">info~Testing the multiplicity of the &lt;adlnav:hideLMSUI&gt; element</assert>
	    <assert test="count(adlnav:hideLMSUI) &gt; 0">passed~The &lt;adlnav:navigationInterface&gt; element contains <value-of select="count(adlnav:hideLMSUI)"/> &lt;adlnav:hideLMSUI&gt; element(s)</assert>
	    
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
    
    <rule id="adlnav:hideLMSUI" context="adlnav:hideLMSUI">
	    
	    <!-- REQ_33.1.1.1 -->
	    <!-- The <adlnav:hideLMSUI> element's value shall be one of the following restricted vocabulary tokens: -->
		<!--  previous, continue, exit, exitAll, abandon, abandonAll, suspendAll -->
		<let name="hideLMSUI" value="normalize-space(.)"/>
		<assert test="true()">info~Testing the &lt;adlnav:hideLMSUI&gt; element for conformance to the Vocabulary Data Type</assert>
	    <assert test="($hideLMSUI != 'previous') and 
					  ($hideLMSUI != 'continue') and 
					  ($hideLMSUI != 'exit') and 
  					  ($hideLMSUI != 'exitAll') and 
  					  ($hideLMSUI != 'abandon') and 
  					  ($hideLMSUI != 'abandonAll') and 
					  ($hideLMSUI != 'suspendAll')">failed~[<value-of select="."/>] is not a valid value for the &lt;adlnav:hideLMSUI&gt; element</assert>
		<assert test="($hideLMSUI != 'previous') or 
					  ($hideLMSUI != 'continue') or 
					  ($hideLMSUI != 'exit') or 
  					  ($hideLMSUI != 'exitAll') or 
  					  ($hideLMSUI != 'abandon') or 
  					  ($hideLMSUI != 'abandonAll') or 
					  ($hideLMSUI != 'suspendAll')">passed~[<value-of select="."/>] is a valid value for the &lt;adlnav:hideLMSUI&gt; element</assert>
	    
	    <!-- REQ_33.3.1.2 -->
    	<!-- <adlnav:hideLMSUI> can only appear as a child of <adlnav:navigationInterface> -->
		<assert test="true()">info~Testing the location of the &lt;adlnav:hideLMSUI&gt; element</assert>
    	<assert test="(local-name(parent::node()) != 'navigationInterface')  or (namespace-uri(parent::node()) != 'http://www.adlnet.org/xsd/adlnav_v1p3')">failed~The &lt;adlnav:hideLMSUI&gt; must exist as a child of the &lt;adlnav:navigationInterface&gt; element</assert>
    	<assert test="(local-name(parent::node()) = 'navigationInterface') and (namespace-uri(parent::node()) = 'http://www.adlnet.org/xsd/adlnav_v1p3')">passed~The &lt;adlnav:hideLMSUI&gt; is the child of the &lt;adlnav:navigationInterface&gt; element</assert>
	    
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
    
    <!-- resources child of manifest -->
	<rule id="resources" context="imscp:manifest/imscp:resources">
	
		<assert test="count(.) &gt; 0">info~Testing the &lt;resources&gt; element for conformance</assert>        
		
		<!-- REQ_30.7.1 -->
		<!-- The resources element shall contain 0 or 1 xml:base attribute -->
		<assert test="count(@xml:base) &gt; 0">info~Testing multiplicity of the "xml:base" attribute</assert>
		<assert test="count(@xml:base) = 1">passed~The &lt;resources&gt; element contains 1 "xml:base" attribute</assert>
		
		<!-- REQ_30.7.1.1 -->
		<!-- The xml:base attribute's value shall be represented as an xs:anyURI datatype. -->
		<!-- Tested by the IMSCP schema -->
		
		<assert test="count(@xml:base) &gt; 0">info~Testing the "xml:base" attribute for conformance</assert>
		
		<!-- REQ_30.7.1.2 -->
		<!-- xml:base can contain no backward slashes ("\") -->
		<assert test="(count(@xml:base) = 1) and (contains(@xml:base, '\'))">failed~The "xml:base" attribute shall not contain any backward slashes</assert>
		
		<!-- REQ_30.7.1.3 -->
		<!-- xml:base shall not begin with a leading slash ("/") -->
		<assert test="(count(@xml:base) = 1) and (starts-with(@xml:base, '/'))">failed~The "xml:base" attribute shall not begin with a leading slash</assert>
		
		<!-- REQ_30.7.1.4 -->
		<!-- xml:base shall end with a trailing slash ("/") -->
		<assert test="(count(@xml:base) = 1) and (not(ends-with(@xml:base, '/')))">failed~The "xml:base" attribute shall end with a trailing slash</assert>
		
		<!-- xml:base is correctly formatted -->
		<assert test="(count(@xml:base) = 1) and ((not(contains(@xml:base, '\'))) and (not(starts-with(@xml:base, '/'))) and (ends-with(@xml:base, '/')))">passed~The "xml:base" attribute is correctly formatted</assert>		
		
		<!-- REQ_PENDING -->
		<!-- xml:base SPM 2000 -->
		<assert test="count(@xml:base) &gt; 0">info~Testing the character length of the "xml:base" attribute value</assert>
		<assert test="(count(@xml:base) &gt; 0) and (string-length(@xml:base) &gt; 2000)">warning~The value contained in the "xml:base" attribute is greater than the SPM of 2000 characters</assert>
		<assert test="(count(@xml:base) &gt; 0) and (string-length(@xml:base) &lt;= 2000)">passed~The character length for the value of the "xml:base" attribute has passed conformance</assert>
	
	    <!-- REQ_30.7.3 -->
		<!-- The resources element shall contain 0 or more resource elements -->
		<assert test="count(imscp:resource) &gt; 0">info~Testing multiplicity of the &lt;resource&gt; element</assert>
		<assert test="count(imscp:resource) &gt; 0">passed~The &lt;resources&gt; element contains <value-of select="count(imscp:resource)"/> &lt;resource&gt; element(s)</assert>

		<!-- REQ_30.7.2 -->
		<!-- The child elements of a resources element shall exist in the order: -->
		<!-- resource, extension elements  -->
		<!-- Tested by IMSCP schema -->		
		
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
  
	<!-- resource child of resources -->
	<rule id="resource" context="imscp:manifest/imscp:resources/imscp:resource">
	
		<assert test="count(.) &gt; 0">info~Testing the &lt;resource&gt; element with the identifier value of [<value-of select="@identifier"/>] for conformance</assert>        
		
		<!-- REQ_PENDING -->
		<!--  -->
		<let name="resID" value="normalize-space(@identifier)" />
        <assert test="( count(//imscp:item[@identifierref=$resID]) &lt; 1 ) and ( count(//imscp:dependency[normalize-space(@identifierref)=$resID]) &lt; 1 )">warning~All files included in the content package should be declared and referenced in the manifest when interchanging packages. The following resource is listed in the manifest but was not referenced by an "item" or "dependency". It appears that this may be a dangling reference. Appropriate action may need to be taken to correct this problem</assert>
		<assert test="( count(//imscp:item[@identifierref=$resID]) &lt; 1 ) and ( count(//imscp:dependency[normalize-space(@identifierref)=$resID]) &lt; 1 )">other~[<value-of select="@identifier"/>]</assert>
		
	    <!-- REQ_PENDING -->
		<!-- adlcp:persistState has been deprecated -->
		<assert test="count(@adlcp:persistState) &gt; 0">failed~The "adlcp:persistState" attribute has been removed from the http://www.adlnet.org/xsd/adlcp_v1p3 namespace.  The use of this attribute is not defined or supported</assert>
		
	    <!-- REQ_30.7.3.1 -->
        <!-- 1 and only 1 identifier attribute -->  
        <assert test="true()">info~Testing multiplicity of the "identifier" attribute</assert>	
        <assert test="(count(@identifier) &lt; 1) or (count(@identifier) &gt; 1)">failed~The &lt;resource&gt; element shall contain 1 and only 1 "identifier" attribute</assert>
        <assert test="count(@identifier) = 1">passed~The &lt;resource&gt; element contains 1 and only 1 "identifier" attribute</assert>
	
		<!-- REQ_30.7.3.1.1 -->
		<!-- The identifier attribute's value shall be a valid xs:id -->
		<!-- Tested by IMSCP schema -->
	
		<!-- REQ_30.7.3.1.2 -->
        <!-- resource:identfier is unique -->
        <let name="uniqueResult" value="parser:isIdentifierUnique(@identifier)"/>
        <assert test="count(@identifier) &gt; 0">info~Testing the "identifier" attribute for conformance</assert>
        <assert test="(count(@identifier) &gt; 0) and not($uniqueResult)">failed~The "identifier" of resource must be unique within the manifest</assert>
		<assert test="(count(@identifier) &gt; 0) and $uniqueResult">passed~The "identifier" of resource is unique within the manifest</assert>
        
		<!-- REQ_30.7.3.2 -->
        <!-- 1 and only 1 type attribute -->  
        <assert test="true()">info~Testing multiplicity of the "type" attribute</assert>	 
        <assert test="(count(@type) &lt; 1) or (count(@type) &gt; 1)">failed~The &lt;resource&gt; element shall contain 1 and only 1 "type" attribute</assert>
        <assert test="count(@type) = 1">passed~The &lt;resource&gt; element contains 1 and only 1 "type" attribute</assert>
        
        <!-- REQ_PENDING -->
	    <!-- type SPM 1000 -->
	    <assert test="count(@type) &gt; 0">info~Testing the character length of the "type" attribute value</assert>
	    <assert test="(count(@type) &gt; 0) and (string-length(@type) &gt; 1000)">warning~The value contained in the "type" attribute is greater than the SPM of 1000 characters</assert>
        <assert test="(count(@type) &gt; 0) and (string-length(@type) &lt;= 1000)">passed~The character length for the value of the "type" attribute has passed conformance</assert>
        
        <!-- REQ_30.7.3.2.1 -->
        <!-- The type attribute's value shall be represented as an xs:string type -->
		<!-- Tested by IMSCP schema -->
        
        <!-- REQ_30.7.3.3 -->
		<!-- resource element must contain 0 or 1 href attributes -->
		<assert test="count(@href) &gt; 0">info~Testing multiplicity of the "href" attribute</assert> 
		<assert test="count(@href) = 1">passed~The &lt;resource&gt; element contains 1 "href" attribute</assert>
		
		<!-- REQ_30.7.3.3.1 -->
		<!-- The href attribute shall be a characterstring that represents a URL -->
		<!-- Tested by IMSCP schema -->
		
		<assert test="count(@href) &gt; 0">info~Testing the "href" attribute with value [<value-of select="@href" />] for conformance</assert> 
				
		<!-- REQ_30.7.3.3.2 -->
		<!-- href can contain no backward slashes ("\") -->
		<assert test="(count(@href) = 1 ) and (contains(@href, '\'))">failed~The "href" attribute shall not contain any backward slashes</assert>
		
		<!-- REQ_30.7.3.3.3 -->
		<!-- href shall not begin with a leading slash ("/") -->
		<assert test="(count(@href) = 1 ) and (starts-with(@href, '/'))">failed~The "href" attribute shall not begin with a leading slash</assert>
				
		<!-- href is correctly formatted -->
		<assert test="(count(@href) = 1 ) and ((not(contains(@href, '\'))) and (not(starts-with(@href, '/'))))">passed~The "href" attribute is correctly formatted</assert>
		
		<!-- REQ_PENDING -->
		<!-- href can not reference local file system -->
		<assert test="(count(@href) = 1 ) and (starts-with(@href, 'file:'))">failed~The file [<value-of select="@href"/>] is referenced to the local file system.  The "href" attribute must reference a file that is local to the content package or reference an external file</assert>
		
		<!-- REQ_PENDING -->
		<!-- The "href" attribute is required if an &lt;item&gt; references a &lt;resource&gt; -->
		<let name="resHrefID" value="normalize-space(@identifier)" />
        <assert test="(count(//imscp:item[@identifierref=$resHrefID]) &gt; 0) and (count(@href) &lt; 1)">failed~The mandatory attribute "href" does not exist.  The "href" attribute is required if an &lt;item&gt; references a &lt;resource&gt;</assert> 
		
		<!-- REQ_PENDING -->
        <!-- The "href" attribute must contain a reference to a file which has a valid file extension -->
        <assert test="(count(@href) &gt; 0) and not(URIHandler:isValidExtension(@href))">info~Testing the file extension of the "href" attribute value</assert>
        <assert test="(count(@href) &gt; 0) and not(URIHandler:isValidExtension(@href))">failed~The file extension of the "href" attribute value is invalid or missing</assert>
      
		<!-- REQ_PENDING -->
		<!-- href SPM 2000 -->
		<assert test="count(@href) &gt; 0">info~Testing the character length of the "href" attribute value</assert>
		<assert test="(count(@href) &gt; 0) and (string-length(@href) &gt; 2000)">warning~The value contained in the "href" attribute is greater than the SPM of 2000 characters</assert>
		<assert test="(count(@href) &gt; 0) and (string-length(@href) &lt;= 2000)">passed~The character length for the value of the "href" attribute has passed conformance</assert>
		
		<!-- REQ_30.7.3.4 -->
        <!-- 1 and only 1 adlcp:scormType attribute -->  
        <assert test="true()">info~Testing multiplicity of the "adlcp:scormType" attribute</assert>
        <assert test="(count(@adlcp:scormType) &lt; 1) or (count(@adlcp:scormType) &gt; 1)">failed~The &lt;resource&gt; element shall contain 1 and only 1 "adlcp:scormType" attribute</assert>
        <assert test="count(@adlcp:scormType) = 1">passed~The &lt;resource&gt; element contains 1 and only 1 "adlcp:scormType" attribute</assert>
	
		<!-- REQ_30.7.3.4.1 -->
		<!-- The adlcp:scormType value shall be sco or asset -->
		<let name="scormType" value="normalize-space(@adlcp:scormType)"/>
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the "adlcp:scormType" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@adlcp:scormType) &gt; 0) and ($scormType != 'sco') and ($scormType != 'asset')">failed~[<value-of select="@adlcp:scormType"/>] is not a valid value for the "adlcp:scormType" attribute</assert>
		<assert test="(count(@adlcp:scormType) &gt; 0) and (($scormType = 'sco') or ($scormType = 'asset'))">passed~[<value-of select="@adlcp:scormType"/>] is a valid value for the "adlcp:scormType" attribute</assert>
		
		<!-- REQ_30.7.3.5 -->
		<!-- resource element must contain 0 or 1 xml:base attributes -->
		<assert test="count(@xml:base) &gt; 0">info~Testing multiplicity of the "xml:base" attribute</assert>
		<assert test="count(@xml:base) = 1">passed~The &lt;resource&gt; element contains 1 "xml:base" attribute</assert>
		
		<!-- REQ_30.7.3.5_1 -->
		<!-- The xml:base attribute's value shall be represented as an xs:anyURI Datatype -->
		<!-- Tested by IMSCP schema -->
		
		<assert test="count(@xml:base) &gt; 0">info~Testing the "xml:base" attribute for conformance</assert>
		
		<!-- REQ_30.7.3.5.2 -->
		<!-- xml:base can contain no backward slashes ("\") -->
		<assert test="(count(@xml:base) = 1) and (contains(@xml:base, '\'))">failed~The "xml:base" attribute shall not contain any backward slashes</assert>
		
		<!-- REQ_30.7.3.5.3 -->
		<!-- xml:base shall not begin with a leading slash ("/") -->
		<assert test="(count(@xml:base) = 1) and (starts-with(@xml:base, '/'))">failed~The "xml:base" attribute shall not begin with a leading slash</assert>
		
		<!-- REQ_30.7.3.5.4 -->
		<!-- xml:base shall end with a trailing slash ("/") -->
		<assert test="(count(@xml:base) = 1) and (not(ends-with(@xml:base, '/')))">failed~The "xml:base" attribute shall end with a trailing slash</assert>
		
		<!-- xml:base is correctly formatted -->
		<assert test="(count(@xml:base) = 1) and ((not(contains(@xml:base, '\'))) and (not(starts-with(@xml:base, '/'))) and (ends-with(@xml:base, '/')))">passed~The "xml:base" attribute is correctly formatted</assert>		
		
		<!-- REQ_PENDING -->
		<!-- xml:base SPM 2000 -->
		<assert test="count(@xml:base) &gt; 0">info~Testing the character length of the "xml:base" attribute value</assert>
		<assert test="(count(@xml:base) &gt; 0) and (string-length(@xml:base) &gt; 2000)">warning~The value contained in the "xml:base" attribute is greater than the SPM of 2000 characters</assert>
		<assert test="(count(@xml:base) &gt; 0) and (string-length(@xml:base) &lt;= 2000)">passed~The character length for the value of the "xml:base" attribute has passed conformance</assert>
		
		<!-- REQ_PENDING -->
		<assert test="not(((count(@href) &gt; 0) and (string-length(@href) &gt; 2000)) or 
					  ((count(../../@xml:base) &gt; 0) and (string-length(../../@xml:base) &gt; 2000)) or
					  ((count(../@xml:base) &gt; 0) and (string-length(../@xml:base) &gt; 2000)) or
					  ((count(@xml:base) &gt; 0) and (string-length(@xml:base) &gt; 2000))) and
					  (string-length(concat(../../@xml:base,../@xml:base,@xml:base,@href)) &gt; 2000)">warning~The total length of the text contained in the "xml:base" and "href" attributes when they are concatenated is greater than the SPM of 2000 characters</assert>
		
		<!-- REQ_30.7.3.7 -->
		<!-- Teh child elements of an resource element shall exist in the following order: -->
		<!-- metadata, file, dependency, extension elements -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.7.3.8 -->
		<!-- resource element must contain 0 or 1 metadata elements -->
		<assert test="count(imscp:metadata) &gt; 0">info~Testing multiplicity of the &lt;metadata&gt; element</assert>
		<assert test="count(imscp:metadata) &gt; 1">failed~The &lt;resource&gt; element shall contain 0 or 1 &lt;metadata&gt; element</assert>
		<assert test="count(imscp:metadata) = 1">passed~The &lt;resource&gt; element contains 1 &lt;metadata&gt; element</assert>
		
		<!--  REQ_30.7.3.9 -->
		<!-- The resource element shall contain 0 or More file child elements. -->
		<assert test="count(imscp:file) &gt; 0">info~Testing multiplicity of the &lt;file&gt; element</assert>
		<assert test="count(imscp:file) &gt; 0">passed~The &lt;resource&gt; element contains <value-of select="count(imscp:file)"/> &lt;file&gt; element(s)</assert>
				
		<!-- REQ_30.7.3.10 -->
		<!-- The resource element shall contain 0 or More dependency child elements. -->
		<assert test="count(imscp:dependency) &gt; 0">info~Testing multiplicity of the &lt;dependency&gt; element</assert>
		<assert test="count(imscp:dependency) &gt; 0">passed~The &lt;resource&gt; element contains <value-of select="count(imscp:dependency)"/> &lt;dependency&gt; element(s)</assert>
		
		<!-- REQ_30.7.3.8.1 -->
		<!-- The metadata element shall be the container for 0 or more {metadata} -->
		<!-- Tested by IMSCP schema -->
				
		<!-- REQ_30.7.3.8.1.1 -->
		<!-- If providing metadata, the metadata shall be well-formed and valid according -->
		<!-- to the controlling documents -->
		<!-- Tested in RequiredFilesChecker -->
		
		<!-- REQ_30.7.3.8.1.1.1 -->
		<!-- The metadata element shall contain 0 or more XML extensions to the IMS Content Packaging namespace. -->
		<!-- Tested by IMSCP schema -->

		<!-- REQ_30.7.3.8.1.1.2.1 -->
		<!-- The metadata element shall be a characterstring that represents the URL. -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.7.3.8.2.1 -->
		<!-- If providing metadata, the metadata shall be well-formed and valid according -->
		<!-- to the controlling documents -->
		<!-- Tested in RequiredFilesChecker -->
		
		<!-- REQ_30.7.3.8.1.2.1 -->
		<!-- The metadata element shall contain 0 or more XML extensions to the IMS Content Packaging namespace. -->
		<!-- Tested by IMSCP schema -->

		<!-- REQ_30.7.3.8.1.2.2 -->
		<!-- The metadata element shall contain 0 or more adlcp:location child elements. -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.7.3.8.1.2.2.1 -->
		<!-- The metadata element shall be a characterstring that represents the URL. -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.7.3.9.1.1 -->
		<!-- If the <resource> is local to the content package, then a <file> element must exist as a child of -->
		<!-- the defined <resource> element and the <file> element’s href attribute shall be identical to the -->
		<!-- <resource> element’s href attribute, exclusive of any URL parameters that may be specified in the -->
		<!-- href attribute of the <resource> element. -->
		<let name="checkResult" value="parser:checkHref(@identifier)"/>
		<let name="isURLResult" value="URIHandler:isURL(@href)"/>
        <assert test="not($checkResult='null') and (count(@href) &gt; 0) and not($isURLResult)">info~Testing to ensure that &lt;resource&gt; element's "href" attribute is equivalent to one of its &lt;file&gt; elements</assert>
        <assert test="not($checkResult='null') and (count(@href) &gt; 0) and (count(@identifier) &gt; 0 ) and not($isURLResult) and (not($checkResult='true'))">failed~The &lt;resource&gt; <value-of select="@identifier"/> shall contain a &lt;file&gt; element that shares an identical "href" as the &lt;resource&gt; element</assert>
        <assert test="not($checkResult='null') and (count(@href) &gt; 0) and (count(@identifier) &gt; 0 ) and not($isURLResult) and ($checkResult='true')">passed~The &lt;resource&gt; <value-of select="@identifier"/> contains a &lt;file&gt; element that shares an identical "href" as the &lt;resource&gt; element</assert>
				
		<!-- REQ_30.7.3.4.2 -->
		<!-- adlcp:scormType can only appear as an attribute on <resource> -->
		<assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
		<assert test="count(@adlcp:scormType) &gt; 0">passed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
		
		<!-- REQ_30.6.3.3.2 -->
		<!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
		<assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

	<rule id="resource-metadata" context="imscp:resource/imscp:metadata">
	
	   <assert test="(count(.) &gt; 0) and (count(adlcp:location) &gt; 0)">info~Testing the &lt;metadata&gt; element for conformance</assert>
	   <!-- REQ_30.7.3.8.1.1.2 -->
	   <!-- The metadata element shall contain 0 or more adlcp:location child elements. -->
	   <!-- Tested by IMSCP schema -->
        <assert test="count(adlcp:location) &gt; 0">info~Testing multiplicity of the &lt;adlcp:location&gt; element</assert> 
        <assert test="count(adlcp:location) &gt; 0">passed~The &lt;metadata&gt; element contains <value-of select="count(adlcp:location)"/> &lt;adlcp:location&gt; element(s)</assert>
	
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
			
	<!-- file child of resource -->
	<rule id="file" context="imscp:manifest/imscp:resources/imscp:resource/imscp:file">
	
		<assert test="count(.) &gt; 0">info~Testing the &lt;file&gt; element for conformance</assert>        
		
		<!-- REQ_30.7.3.9.3 -->
		<!-- The metadata element must be the first child of file followed by extensions if applicable -->
		<assert test="(count(imscp:metadata) &gt; 0) and (local-name(child::*[1]) != 'metadata')">failed~The first child of the &lt;file&gt; element shall be the &lt;metadata&gt; element</assert>
		<assert test="local-name(child::*[1]) = 'metadata'">passed~The first child of the &lt;file&gt; element is the &lt;metadata&gt; element</assert>
		
		<!-- REQ_30.7.3.9.1 -->		
		<!-- The file element shall identify 0 or More local files that this resource is dependent on. -->
		<!-- Tested by ResourceHrefChecker -->
	
		<!-- REQ_30.7.3.9.2 -->
		<!-- 1 and only 1 href attribute -->  
		<assert test="true()">info~Testing multiplicity of the "href" attribute</assert>
        <assert test="(count(@href) &lt; 1) or (count(@href) &gt; 1)">failed~The &lt;file&gt; element shall contain 1 and only 1 "href" attribute</assert>
        <assert test="count(@href) = 1">passed~The &lt;file&gt; element contains 1 and only 1 "href" attribute</assert>

		<!-- REQ_30.7.3.9.2.1 -->
		<!-- The href attribute's value shall be a characterstring that represents the URL. --> 
		<!-- Tested by IMSCP schema -->
        
        <assert test="count(@href) &gt; 0">info~Testing the "href" attribute with value [<value-of select="@href" />] for conformance</assert>	
        
        <!-- REQ_30.7.3.9.2.2 -->
		<!-- href can contain no backward slashes ("\") -->
		<assert test="(count(@href) = 1 ) and (contains(@href, '\'))">failed~The "href" attribute shall not contain any backward slashes</assert>
		
		<!-- REQ_30.7.3.9.2.3 -->
		<!-- href shall not begin with a leading slash ("/") -->
		<assert test="(count(@href) = 1 ) and (starts-with(@href, '/'))">failed~The "href" attribute shall not begin with a leading slash</assert>
				
		<!-- href is correctly formatted -->
		<assert test="(count(@href) = 1 ) and ((not(contains(@href, '\'))) and (not(starts-with(@href, '/'))))">passed~The "href" attribute is correctly formatted</assert>
                		
		<!-- REQ_PENDING -->
		<!-- href can not reference local file system -->
		<assert test="(count(@href) = 1 ) and (starts-with(@href, 'file:'))">failed~The file [<value-of select="@href"/>] is referenced to the local file system.  The "href" attribute must reference a file that is local to the content package or reference an external file</assert>
        
        <!-- REQ_PENDING -->
        <!-- The "href" attribute must contain a reference to a file which has a valid file extension -->
        <assert test="(count(@href) &gt; 0) and not(URIHandler:isValidExtension(@href))">info~Testing the file extension of the "href" attribute value</assert>
        <assert test="(count(@href) &gt; 0) and not(URIHandler:isValidExtension(@href))">failed~The file extension of the "href" attribute value is invalid or missing</assert>
        
   		<!-- REQ_PENDING -->
		<!-- href SPM 2000 -->
		<assert test="count(@href) &gt; 0">info~Testing the character length of the "href" attribute value</assert>
		<assert test="(count(@href) &gt; 0) and (string-length(@href) &gt; 2000)">warning~The value contained in the "href" attribute is greater than the SPM of 2000 characters</assert>
		<assert test="(count(@href) &gt; 0) and (string-length(@href) &lt;= 2000)">passed~The character length for the value of the "href" attribute has passed conformance</assert>
        
		<!-- REQ_PENDING -->
		<assert test="not(((count(@href) &gt; 0) and (string-length(@href) &gt; 2000)) or 
					  ((count(../../../@xml:base) &gt; 0) and (string-length(../../../@xml:base) &gt; 2000)) or
					  ((count(../../@xml:base) &gt; 0) and (string-length(../../@xml:base) &gt; 2000)) or
					  ((count(../@xml:base) &gt; 0) and (string-length(../@xml:base) &gt; 2000))) and
					  (string-length(concat(../../../@xml:base,../../@xml:base,../@xml:base,@href)) &gt; 2000)">warning~The total length of the text contained in the "xml:base" and "href" attributes when they are concatenated is greater than the SPM of 2000 characters</assert>
					  
		<!-- REQ_30.7.3.9.3 -->
		<!-- file element must contain 0 or 1 metadata elements -->
		<assert test="count(imscp:metadata) &gt; 0">info~Testing multiplicity of the &lt;metadata&gt; element</assert>
		<assert test="count(imscp:metadata) &gt; 1">failed~The &lt;file&gt; element shall contain 0 or 1 &lt;metadata&gt; elements</assert>
		<assert test="count(imscp:metadata) = 1">passed~The &lt;file&gt; element contains 1 &lt;metadata&gt; element</assert>
		
		<!-- REQ_30.7.3.9.4.1 -->
		<!-- The metadata element shall be the container for 0 or more {metadata} -->
		<!-- Tested by IMSCP schema -->
				
		<!-- REQ_30.7.3.9.4.1.1 -->
		<!-- If providing metadata, the metadata shall be well-formed and valid according -->
		<!-- to the controlling documents -->
		<!-- Tested in RequiredFilesChecker -->
		
		<!-- REQ_30.7.3.9.4.1.1.1 -->
		<!-- The metadata element shall contain 0 or more XML extensions to the IMS Content Packaging namespace. -->
		<!-- Tested by IMSCP schema -->

		<!-- REQ_30.7.3.9.4.1.1.2 -->
		<!-- The metadata element shall contain 0 or more adlcp:location child elements. -->
		<!-- Tested by IMSCP schema -->
		
		<!-- REQ_30.7.3.9.4.1.1.2.1 -->
		<!-- The metadata element shall be a characterstring that represents the URL. -->
		<!-- Tested by IMSCP schema -->
        
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
	
	<rule id="file-metadata" context="imscp:file/imscp:metadata">
	
	    <assert test="(count(.) &gt; 0) and (count(adlcp:location) &gt; 0)">info~Testing the &lt;metadata&gt; element for conformance</assert>
		<!-- REQ_30.7.3.9.4.1.1.2 -->
		<!-- The metadata element shall contain 0 or more adlcp:location child elements. -->
        <assert test="count(adlcp:location) &gt; 0">info~Testing multiplicity of the &lt;adlcp:location&gt; element</assert> 
        <assert test="count(adlcp:location) &gt; 0">passed~The &lt;metadata&gt; element contains <value-of select="count(adlcp:location)"/> &lt;adlcp:location&gt; element(s)</assert>
        
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

	<!-- dependency child of resource -->
	<rule id="dependency" context="imscp:manifest/imscp:resources/imscp:resource/imscp:dependency">
	
		<!-- REQ_30.7.3.10.2  was removed in the SCORM 2004 4th Edition Testing Requirments version 1.1 -->
        <!-- the dependency element shall be an empty xml element -->
        <!-- <assert test="count(.) &gt; 0">info~Testing the &lt;dependency&gt; element for conformance</assert>
        <assert test="(count(child::*) &gt; 0) or (. != '')">failed~The &lt;dependency&gt; element shall be an empty xml element</assert>
        <assert test="(count(child::*) = 0) and (. = '')">passed~The &lt;dependency&gt; element is an empty xml element</assert>-->
		
		<!-- REQ_30.7.3.10.1 -->
		<!-- 1 and ony 1 identifierref attribute -->  
		<assert test="true()">info~Testing multiplicity of the "identifierref" attribute</assert>
        <assert test="(count(@identifierref) &lt; 1) or (count(@identifierref) &gt; 1)">failed~The &lt;dependency&gt; element shall contain 1 and only 1 "identifierref" attribute</assert>
        <assert test="count(@identifierref) = 1">passed~The &lt;dependency&gt; element contains 1 and only 1 "identifierref" attribute</assert>
        
        <!-- REQ_30.7.3.10.1.1 -->
        <!-- The identifierref attribute's value shall be an xs:IDRef. -->
        <!-- Tested by IMSCP schema -->
        
		<!-- REQ_30.7.3.10.1.2 -->
		<!-- The identifierref attribute’s value shall reference an identifier attribute of a <resource>. -->
		<!-- The identifierref attribute references an identifier attribute of a <resource> (within the scope -->
		<!-- of the <manifest> element for which it is defined) and is used to resolve the ultimate location of the dependent resource. -->
        <let name="idref" value="normalize-space(@identifierref)" />
        <assert test="count(@identifierref) &gt; 0">info~Testing the "identifierref" value of [<value-of select="@identifierref" />] for valid referencing of a valid "identifier" attribute value</assert>
        <assert test="( count(@identifierref) &gt; 0 ) and ( count(//imscp:resource[normalize-space(@identifier)=$idref]) &gt; 0 )">passed~The "identifierref" value of [<value-of select="@identifierref" />] references a valid "identifier" attribute of a &lt;resource&gt; element</assert>
        <assert test="( count(@identifierref) &gt; 0 ) and ( count(//imscp:resource[normalize-space(@identifier)=$idref]) = 0 )">failed~The "identifierref" value of [<value-of select="@identifierref" />] does not reference a valid "identifier" attribute value</assert>
        
        <!-- REQ_PENDING -->
		<!-- identifierref SPM 2000 -->
		<assert test="count(@identifierref) &gt; 0">info~Testing the character length of the "identifierref" attribute value</assert>
		<assert test="(count(@identifierref) &gt; 0) and (string-length(@identifierref) &gt; 2000)">warning~The value contained in the "identifierref" attribute is greater than the SPM of 2000 characters</assert>
		<assert test="(count(@identifierref) &gt; 0) and (string-length(@identifierref) &lt;= 2000)">passed~The character length for the value of the "identifierref" attribute has passed conformance</assert>
        
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>		
	
	<rule id="sequencingCollection" context="imsss:sequencingCollection">
      
      	 <assert test="true()">info~Testing the &lt;sequencingCollection&gt; element for conformance</assert>
      
      	 <!-- REQ_31.1 -->
      	 <!-- REQ_23.1 -->
      	 <!-- The <sequencingCollection> element shall contain 1 or More <sequencing> elements -->
      	 <assert test="true()">info~Testing multiplicity of the &lt;sequencing&gt; element</assert>
         <assert test="count(imsss:sequencing) &gt; 0">passed~The &lt;sequencingCollection&gt; element contains 1 or More &lt;sequencing&gt; elements</assert>
         <assert test="count(imsss:sequencing) &lt; 1">failed~The &lt;sequencingCollection&gt; element shall contain 1 or More &lt;sequencing&gt; elements</assert>	   	   
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
	  <!-- REQ_31-->
      <!-- The <sequencing> element shall adhere to the following requirements. -->
      <!-- REQ_32.1.3 -->
      <!--The XML instance shall adhere to all other requirements defined for the <sequencing> element (refer to requirement REQ_31) -->
      <!-- Tested by rules and schemas -->
      <rule id="sequencing" context="imscp:item/imsss:sequencing|imscp:organization/imsss:sequencing|imsss:sequencingCollection/imsss:sequencing">
      
         <assert test="true()">info~Testing the &lt;sequencing&gt; element for conformance</assert>
            
         <!-- REQ_32.1.1 -->
         <!-- REQ_31.3.3 -->
         <!-- If the <sequencing> element is a child of a <sequencingCollection> element, the ID attribute is mandatory (1 and only 1 time). -->
         <assert test="(local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">info~Testing the attributes of the &lt;sequencing&gt; element that is defined in the &lt;sequencingCollection&gt;</assert>
         <assert test="((local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and ( (count(@ID) &gt; 1) or (count(@ID) &lt; 1) )">failed~The "ID" attribute is mandatory on a &lt;sequencing&gt; element that is defined in the &lt;sequencingCollection&gt; element</assert>
         <assert test="((local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@ID) = 1)">passed~The "ID" attribute of element &lt;sequencing&gt; element was detected. This attribute is mandatory on a &lt;sequencing&gt; element that is defined in the &lt;sequencingCollection&gt; element</assert>

         <!-- REQ_32.1.1.1 -->
         <!-- The ID attribute's value shall be represented as an xs:ID type. -->
         <!-- Tested by IMSSS Schema -->
         
         <!-- REQ_31.3.2 -->
         <!-- The ID shall be unique within the manifest -->
         <let name="uniqueIDRes" value="parser:isIDUnique(@ID)"/>
         <assert test="((local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@ID) &gt; 0)">info~Testing the "ID" attribute for conformance</assert>
         <assert test="((local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@ID) &gt; 0) and not($uniqueIDRes)">failed~The "ID" attribute [<value-of select="@ID"/>] is not unique within the manifest</assert>
         <assert test="((local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@ID) &gt; 0) and $uniqueIDRes">passed~The "ID" attribute is unique within the manifest</assert>   

         <!-- REQ_31.3-->
         <!-- REQ_31.3.4 -->
         <!-- If the <sequencing> element is a child of an <item> or <organization> element, then the ID attribute is not permitted. -->
         <assert test="(count(@ID) &gt; 0) and ( ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) or ((local-name(parent::node()) = 'organization') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) )">info~Testing the multiplicity of the "ID" attribute</assert>
         <assert test="(count(@ID) &gt; 0) and ( ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1'))or ((local-name(parent::node()) = 'organization') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) )">failed~The "ID" attribute is not permitted on a &lt;sequencing&gt; element that is a child of an &lt;item&gt; or &lt;organization&gt; element</assert> 
           
         <!-- REQ_31.3.1 -->
         <!-- REQ_32.1.1.1 -->
         <!-- The ID attribute's value shall be represented as an xs:ID type. -->
         <!-- Tested by IMSSS Schema -->
           
         <!-- REQ_31.4 -->
         <!-- The <sequencing> element shall contain 0 or 1 IDRef attribute. -->         
         <assert test="count(@IDRef) &gt; 0">info~Testing the multiplicity of the "IDRef" attribute</assert>
         <assert test="( ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) or ((local-name(parent::node()) = 'organization') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) ) and (count(@IDRef) &gt; 0)">passed~The &lt;sequencing&gt; element contains 1 "IDRef" attribute</assert>
         <assert test="((local-name(parent::node()) = 'sequencingCollection') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@IDRef) &gt; 0)">failed~The "IDRef" attribute is not permitted on a &lt;sequencing&gt; element that is defined in the &lt;sequencingCollection&gt;</assert>  
           
         <!-- REQ_31.3.1 -->
         <!-- The ID attribute's value shall be represented as an xs:ID type. -->
         <!-- Tested by IMSSS Schema -->
           
         <!-- REQ_31.4.2 -->
         <!-- The IDRef shall be unique within the manifest -->
         <!-- This requirement was removed from the requirements document and is no longer tested. -->

      
      	 <!-- REQ_31.4.3 -->
      	 <!-- If the <sequencing> element is defined to reference a <sequencing> element defined in the <sequencingCollection> then the <sequencing> element shall have an IDRef attribute value that matches a <sequencing> element's ID attribute found in the <sequencingCollection> -->
		 <let name = "idref" value="normalize-space(@IDRef)" />
		 <assert test="( ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) or ((local-name(parent::node()) = 'organization') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) ) and ( count(@IDRef) &gt; 0 )">info~Testing the "IDRef" attribute for conformance</assert>
		 <assert test="( ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) or ((local-name(parent::node()) = 'organization') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) ) and ( count(//imsss:sequencingCollection/imsss:sequencing[normalize-space(@ID)=$idref]) &gt; 0 )">passed~The "IDRef" attribute referenced a valid &lt;sequencing&gt; element "ID" attribute</assert>      	 
		 <assert test="( ((local-name(parent::node()) = 'item') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) or ((local-name(parent::node()) = 'organization') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imscp_v1p1')) ) and ( count(@IDRef) &gt; 0 ) and ( count(//imsss:sequencingCollection/imsss:sequencing[normalize-space(@ID)=$idref]) &lt; 1 )">failed~The "IDRef" attribute shall reference a valid &lt;sequencing&gt; element "ID" attribute defined in the &lt;sequencingCollection&gt;</assert>      	 
         
         <!-- REQ_31.5 -->
         <!-- The <sequencing> element shall contain 0 or 1 <controlMode> child elements -->
         <assert test="count(imsss:controlMode) &gt; 0">info~Testing the multiplicity of the &lt;controlMode&gt; element</assert>
		 <assert test="count(imsss:controlMode) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;controlMode&gt; element</assert>
		 <assert test="count(imsss:controlMode) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;controlMode&gt; element</assert>
      
      	 <!-- REQ_31.6 -->
      	 <!-- The <sequencing> element shall contain 0 or 1 <sequencingRules> child element -->
      	 <assert test="count(imsss:sequencingRules) &gt; 0">info~Testing the multiplicity of the &lt;sequencingRules&gt; element</assert>
		 <assert test="count(imsss:sequencingRules) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;sequencingRules&gt; element</assert>
		 <assert test="count(imsss:sequencingRules) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;sequencingRules&gt; element</assert>
	
		 <!-- REQ_31.7 -->
      	 <!-- The <sequencing> element shall contain 0 or 1 <limitConditions> child element -->
      	 <assert test="count(imsss:limitConditions) &gt; 0">info~Testing the multiplicity of the &lt;limitConditions&gt; element</assert>
		 <assert test="count(imsss:limitConditions) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;limitConditions&gt; element</assert>
		 <assert test="count(imsss:limitConditions) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;limitConditions&gt; element</assert>		
		 
		 <!-- REQ_31.8 -->
         <!-- The <limitConditions> element shall contain 0 or 1 <auxilliaryResources> elements -->
      	 <assert test="count(imsss:auxilliaryResources) &gt; 0">info~Testing the multiplicity of the &lt;auxilliaryResources&gt; element</assert>
	     <assert test="count(imsss:auxilliaryResources) &gt; 0">warning~At this time, SCORM recommends use of the &lt;auxilliaryResources&gt; element with caution due to the various concerns that have risen dealing with the requirements on its usage</assert>
	     
	     <!-- REQ_31.9 -->
      	 <!-- The <sequencing> element shall contain 0 or 1 <rollupRules> child element -->
      	 <assert test="count(imsss:rollupRules) &gt; 0">info~Testing the multiplicity of the &lt;rollupRules&gt; element</assert>
		 <assert test="count(imsss:rollupRules) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;rollupRules&gt; element</assert>
		 <assert test="count(imsss:rollupRules) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;rollupRules&gt; element</assert>		
		 
		 <!-- REQ_31.10 -->
      	 <!-- The <sequencing> element shall contain 0 or 1 <objectives> child element -->
      	 <assert test="count(imsss:objectives) &gt; 0">info~Testing the multiplicity of the &lt;objectives&gt; element</assert>
		 <assert test="count(imsss:objectives) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;objectives&gt; element</assert>
		 <assert test="count(imsss:objectives) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;objectives&gt; element</assert>		
		 
		 <!-- REQ_31.11 -->
         <!-- The <sequencing> element shall contain 0 or 1 <randomizationControls> child elements -->
         <assert test="count(imsss:randomizationControls) &gt; 0">info~Testing the multiplicity of the &lt;randomizationControls&gt; element</assert>
		 <assert test="count(imsss:randomizationControls) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;randomizationControls&gt; element</assert>
		 <assert test="count(imsss:randomizationControls) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;randomizationControls&gt; element</assert>
		 
		 <!-- REQ_31.12 -->
         <!-- The <sequencing> element shall contain 0 or 1 <deliveryControls> child elements -->
         <assert test="count(imsss:deliveryControls) &gt; 0">info~Testing the multiplicity of the &lt;deliveryControls&gt; element</assert>
		 <assert test="count(imsss:deliveryControls) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;deliveryControls&gt; element</assert>
		 <assert test="count(imsss:deliveryControls) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;deliveryControls&gt; element</assert>
		 
		 <!-- REQ_31.13 -->
         <!-- The <sequencing> element shall contain 0 or 1 <adlseq:constrainedChoiceConsiderations> child elements -->
         <assert test="count(adlseq:constrainedChoiceConsiderations) &gt; 0">info~Testing the multiplicity of the &lt;adlseq:constrainedChoiceConsiderations&gt; element</assert>
		 <assert test="count(adlseq:constrainedChoiceConsiderations) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;adlseq:constrainedChoiceConsiderations&gt; element</assert>
		 <assert test="count(adlseq:constrainedChoiceConsiderations) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;adlseq:constrainedChoiceConsiderations&gt; element</assert>
		 
		 <!-- REQ_31.14 -->
         <!-- The <sequencing> element shall contain 0 or 1 <adlseq:rollupConsiderations> child elements -->
         <assert test="count(adlseq:rollupConsiderations) &gt; 0">info~Testing the multiplicity of the &lt;adlseq:rollupConsiderations&gt; element</assert>
		 <assert test="count(adlseq:rollupConsiderations) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;adlseq:rollupConsiderations&gt; element</assert>
		 <assert test="count(adlseq:rollupConsiderations) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;adlseq:rollupConsiderations&gt; element</assert>
		
         <!-- REQ_31.15 -->
         <!-- The <sequencing> element shall contain 0 or 1 <adlseq:objectives > child element. -->
         <assert test="count(adlseq:objectives) &gt; 0">info~Testing the multiplicity of the &lt;adlseq:objectives&gt; element</assert>
         <assert test="count(adlseq:objectives) &gt; 1">failed~The &lt;sequencing&gt; element shall contain 0 or 1 &lt;adlseq:objectives&gt; element</assert>
         <assert test="count(adlseq:objectives) = 1">passed~The &lt;sequencing&gt; element contains 1 &lt;adlseq:objectives&gt; element</assert>   
       
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="sequencingRules" context="imsss:sequencingRules">
      
        <assert test="true()">info~Testing the &lt;sequencingRules&gt; element for conformance</assert>
      
      	<!-- REQ_31.6.1-->
      	<!-- The <sequencingRules> element shall contain 0 or More <preConditionRule> child elements.-->
      	<assert test="count(imsss:preConditionRule) &gt; 0">info~Testing multiplicity of the &lt;preConditionRule&gt; element</assert> 
        <assert test="count(imsss:preConditionRule) &gt; 0">passed~A &lt;sequencingRules&gt; element contains <value-of select="count(imsss:preConditionRule)"/> &lt;preConditionRule&gt; element(s)</assert>
        
        <!-- REQ_31.6.2-->
      	<!-- The <sequencingRules> element shall contain 0 or More <exitConditionRule> child elements.-->
      	<assert test="count(imsss:exitConditionRule) &gt; 0">info~Testing multiplicity of the &lt;exitConditionRule&gt; element</assert> 
        <assert test="count(imsss:exitConditionRule) &gt; 0">passed~A &lt;sequencingRules&gt; element contains <value-of select="count(imsss:exitConditionRule)"/> &lt;exitConditionRule&gt; element(s)</assert>
        
        <!-- REQ_31.6.3-->
      	<!-- The <sequencingRules> element shall contain 0 or More <postConditionRule> child elements.-->
      	<assert test="count(imsss:postConditionRule) &gt; 0">info~Testing multiplicity of the &lt;postConditionRule&gt; element</assert> 
        <assert test="count(imsss:postConditionRule) &gt; 0">passed~A &lt;sequencingRules&gt; element contains <value-of select="count(imsss:postConditionRule)"/> &lt;postConditionRule&gt; element(s)</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_31.6.4 -->
      <!-- The <sequencingRules> element shall only be used as a child of the <sequencing> element. -->
      <assert test="true()">info~Testing the location of the &lt;sequencingRules&gt; element</assert>
      <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;sequencingRules&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
      <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;sequencingRules&gt; element is the child of the &lt;sequencing&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
                
      <rule id="preConditionRule" context="imsss:preConditionRule">
      
         <assert test="true()">info~Testing the &lt;preConditionRule&gt; element for conformance</assert>
         
         <!-- REQ_31.6.1.3 -->
         <!-- The <preConditionRule> element shall only be used as a child of the <sequencingRules> element. -->
         <assert test="true()">info~Testing the location of the &lt;preConditionRule&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'sequencingRules') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;preConditionRule&gt; element must exist as a child of the &lt;sequencingRules&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'sequencingRules') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;preConditionRule&gt; element is the child of the &lt;sequencingRules&gt; element</assert>
      
      	 <!-- REQ_31.6.1.1 -->
      	 <!-- The <preConditionRule> element shall contain 1 and only 1 <ruleConditions> child elements. -->
      	 <assert test="count(imsss:ruleConditions) &gt; 0">info~Testing the multiplicity of the &lt;ruleConditions&gt; element</assert>
		    <assert test="( count(imsss:ruleConditions) &gt; 1 ) or ( count(imsss:ruleConditions) &lt; 1 )">failed~The &lt;preConditionRule&gt; element shall contain 1 and only 1 &lt;ruleConditions&gt; element</assert>
          <assert test="count(imsss:ruleConditions) = 1">passed~The &lt;preConditionRule&gt; element contains 1 &lt;ruleConditions&gt; element</assert>
         
         <!-- REQ_31.6.1.2 -->
      	 <!-- The <preConditionRule> element shall contain 1 and only 1 <ruleAction> child elements. -->
      	 <assert test="count(imsss:ruleAction) &gt; 0">info~Testing the multiplicity of the &lt;ruleAction&gt; element</assert>
		 <assert test="( count(imsss:ruleAction) &gt; 1 ) or ( count(imsss:ruleAction) &lt; 1 )">failed~The &lt;preConditionRule&gt; element shall contain 1 and only 1 &lt;ruleAction&gt; element</assert>
         <assert test="count(imsss:ruleAction) = 1">passed~The &lt;preConditionRule&gt; element contains 1 &lt;ruleAction&gt; element</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="exitConditionRule" context="imsss:exitConditionRule">
      
         <assert test="true()">info~Testing the &lt;exitConditionRule&gt; element for conformance</assert>
      
         <!-- REQ_31.6.2.3 -->
         <!-- The <exitConditionRule> element shall only be used as a child of the <sequencingRules> element. -->
         <assert test="true()">info~Testing the location of the &lt;exitConditionRule&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'sequencingRules') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;exitConditionRule&gt; element must exist as a child of the &lt;sequencingRules&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'sequencingRules') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;exitConditionRule&gt; element is the child of the &lt;sequencingRules&gt; element</assert>
      
      	 <!-- REQ_31.6.2.1 -->
      	 <!-- The <exitConditionRule> element shall contain 1 and only 1 <ruleConditions> child elements. -->
      	 <assert test="count(imsss:ruleConditions) &gt; 0">info~Testing the multiplicity of the &lt;ruleConditions&gt; element</assert>
		 <assert test="( count(imsss:ruleConditions) &gt; 1 ) or ( count(imsss:ruleConditions) &lt; 1 )">failed~The &lt;exitConditionRule&gt; element shall contain 1 and only 1 &lt;ruleConditions&gt; element</assert>
         <assert test="count(imsss:ruleConditions) = 1">passed~The &lt;exitConditionRule&gt; element contains 1 &lt;ruleConditions&gt; element</assert>
         
         <!-- REQ_31.6.2.2 -->
      	 <!-- The <exitConditionRule> element shall contain 1 and only 1 <ruleAction> child elements. -->
      	 <assert test="count(imsss:ruleAction) &gt; 0">info~Testing the multiplicity of the &lt;ruleAction&gt; element</assert>
		 <assert test="( count(imsss:ruleAction) &gt; 1 ) or ( count(imsss:ruleAction) &lt; 1 )">failed~The &lt;exitConditionRule&gt; element shall contain 1 and only 1 &lt;ruleAction&gt; element</assert>
         <assert test="count(imsss:ruleAction) = 1">passed~The &lt;exitConditionRule&gt; element contains 1 &lt;ruleAction&gt; element</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="postConditionRule" context="imsss:postConditionRule">
      
         <assert test="true()">info~Testing the &lt;postConditionRule&gt; element for conformance</assert>
      
         <!-- REQ_31.6.3.3 -->
         <!-- The <postConditionRule> element shall only be used as a child of the <sequencingRules> element. -->
         <assert test="true()">info~Testing the location of the &lt;postConditionRule&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'sequencingRules') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;postConditionRule&gt; element must exist as a child of the &lt;sequencingRules&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'sequencingRules') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;postConditionRule&gt; element is the child of the &lt;sequencingRules&gt; element</assert>
         
      	 <!-- REQ_31.6.3.1 -->
      	 <!-- The <postConditionRule> element shall contain 1 and only 1 <ruleConditions> child elements. -->
      	 <assert test="count(imsss:ruleConditions) &gt; 0">info~Testing the multiplicity of the &lt;ruleConditions&gt; element</assert>
		 <assert test="( count(imsss:ruleConditions) &gt; 1 ) or ( count(imsss:ruleConditions) &lt; 1 )">failed~The &lt;postConditionRule&gt; element shall contain 1 and only 1 &lt;ruleConditions&gt; element</assert>
         <assert test="count(imsss:ruleConditions) = 1">passed~The &lt;postConditionRule&gt; element contains 1 &lt;ruleConditions&gt; element</assert>
         
         <!-- REQ_31.6.3.2 -->
      	 <!-- The <postConditionRule> element shall contain 1 and only 1 <ruleAction> child elements. -->
      	 <assert test="count(imsss:ruleAction) &gt; 0">info~Testing the multiplicity of the &lt;ruleAction&gt; element</assert>
		 <assert test="( count(imsss:ruleAction) &gt; 1 ) or ( count(imsss:ruleAction) &lt; 1 )">failed~The &lt;postConditionRule&gt; element shall contain 1 and only 1 &lt;ruleAction&gt; element</assert>
         <assert test="count(imsss:ruleAction) = 1">passed~The &lt;postConditionRule&gt; element contains 1 &lt;ruleAction&gt; element</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="ruleConditions" context="imsss:ruleConditions">
      
      	 <assert test="true()">info~Testing the &lt;ruleConditions&gt; element for conformance</assert>
      
          <!-- REQ_31.6.1.1.3 -->
          <!-- REQ_31.6.2.1.3 -->
          <!-- REQ_31.6.3.1.3-->
          <!-- The <ruleConditons> element shall only exist as a child element of the <preConditionRule>, <exitConditionRule> or <postConditionRule> elements. -->
          <assert test="true()">info~Testing the location of the &lt;ruleConditions&gt; element</assert>
          <assert test="((local-name(parent::node()) != 'preConditionRule') and (local-name(parent::node()) != 'postConditionRule') and (local-name(parent::node()) != 'exitConditionRule')) or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;ruleConditions&gt; element must exist as a child of the &lt;preCondition&gt;, &lt;postCondition&gt; or &lt;exitCondition&gt; element</assert>
          <assert test="((local-name(parent::node()) = 'preConditionRule') or (local-name(parent::node()) = 'postConditionRule') or (local-name(parent::node()) = 'exitConditionRule')) and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;ruleConditions&gt; element is a child of the &lt;preCondition&gt;, &lt;postCondition&gt; or &lt;exitCondition&gt; element</assert>
      
      	 <!-- REQ_31.6.1.1.1 -->
       	 <!-- REQ_31.6.2.1.1 -->
       	 <!-- REQ_31.6.3.1.1 -->
      	 <!-- The <ruleConditions> element shall contain 0 or 1 conditionCombination attribute. -->
         <assert test="count(@conditionCombination) &gt; 0">info~Testing multiplicity of the "conditionCombination" attribute</assert>
		 <assert test="count(@conditionCombination) = 1">passed~The &lt;ruleConditions&gt; element contains 1 "conditionCombination" attribute</assert>
		 
		 <!-- REQ_31.6.1.1.1.1 -->
		 <!-- REQ_31.6.2.1.1.1 -->
		 <!-- REQ_31.6.3.1.1.1 -->
		 <!-- The conditionCombination attribute's value shall be one of the following restricted tokens -->
		 <!-- all or any -->
		 <let name="conditionCombination" value="normalize-space(@conditionCombination)"/>
		 <assert test="(count(@conditionCombination) &gt; 0)">info~Testing the "conditionCombination" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@conditionCombination) &gt; 0) and (($conditionCombination = 'all') or ($conditionCombination = 'any'))">passed~[<value-of select="@conditionCombination" />] is a valid value for the "conditionCombination" attribute</assert>		 
		 <assert test="(count(@conditionCombination) &gt; 0) and ($conditionCombination != 'all') and ($conditionCombination != 'any')">failed~[<value-of select="@conditionCombination" />] is not a valid value for the "conditionCombination" attribute</assert>
	
		 <!-- REQ_31.6.1.1.2 -->
		 <!-- REQ_31.6.2.1.2 -->
		 <!-- REQ_31.6.3.1.2 -->
		 <!-- The <ruleConditions> element shall contain 1 or More <ruleCondition> child elements. -->
		 <assert test="true()">info~Testing multiplicity of the &lt;ruleCondition&gt; element</assert>
         <assert test="count(imsss:ruleCondition) &gt; 0">passed~The &lt;ruleConditions&gt; element contains 1 or More &lt;ruleCondition&gt; elements</assert>
         <assert test="count(imsss:ruleCondition) &lt; 1">failed~The &lt;ruleConditions&gt; element shall contain 1 or More &lt;ruleCondition&gt; elements</assert>	   	   
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="ruleCondition" context="imsss:ruleCondition">
      
         <assert test="true()">info~Testing the &lt;ruleCondition&gt; element for conformance</assert>
      
         <!-- REQ_31.6.1.1.2.5 -->
         <!-- REQ_31.6.2.1.2.5 -->
         <!-- REQ_31.6.3.1.2.5 -->
         <!-- The <ruleCondition> element shall only be used as a child of the <ruleConditions> element. -->
         <assert test="true()">info~Testing the location of the &lt;ruleCondition&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'ruleConditions') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;ruleCondition&gt; element must exist as a child of the &lt;ruleConditions&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'ruleConditions') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;ruleCondition&gt; element is a child of the &lt;ruleConditions&gt; element</assert>
      
         <!-- REQ_31.6.1.1.2.1 -->
         <!-- REQ_31.6.2.1.2.1 -->
         <!-- REQ_31.6.3.1.2.1 -->
         <!-- The <ruleCondition> element shall contain 0 or 1 referencedObjective attribute.-->
         <assert test="count(@referencedObjective) &gt; 0">info~Testing the multiplicity of the "referencedObjective" attribute</assert>
         <assert test="count(@referencedObjective) &gt; 0">passed~The &lt;ruleCondition&gt; element contains 1 "referencedObjective" attribute</assert>
      
         <!-- REQ_31.6.1.1.2.1.1 -->
         <!-- REQ_31.6.1.1.2.1.3 -->
         <!-- REQ_31.6.2.1.2.1.1 -->
         <!-- REQ_31.6.2.1.2.1.3 -->         
         <!-- REQ_31.6.3.1.2.1.1 -->
         <!-- REQ_31.6.3.1.2.1.3 -->         
         <!-- If the referencedObjective attribute is used, the value shall be an xs:string and the value shall represent an identifier of an objective found within the Manifest. --> 
         <!-- Only consider objectives under <sequencingCollection> elements if no local objectives are present -->          

         <assert test="count(@referencedObjective) &gt; 0">info~Testing the "referencedObjective" attribute for conformance</assert>
         
         <!-- referencedObjective under non-sequencingCollection  -->
         <let name="ref" value="URIHandler:processWhitespace(@referencedObjective)" /> 
         <let name="idRef" value="normalize-space(../../../../@IDRef)" />
               
         <assert test="if (count(../../../../imsss:objectives) &gt; 0)
                       then( (local-name(../../../../parent::node()) != 'sequencingCollection') and (count(@referencedObjective) &gt; 0) and (count(../../../..//imsss:objective[URIHandler:processWhitespace(@objectiveID)=$ref]) &gt; 0 ) or ( count(../../../..//imsss:primaryObjective[URIHandler:processWhitespace(@objectiveID)=$ref]) &gt; 0))
                       else( (local-name(../../../../parent::node()) != 'sequencingCollection') and (count(@referencedObjective) &gt; 0) and (count(//imsss:sequencingCollection/imsss:sequencing[normalize-space(@ID)=$idRef]//imsss:objective[URIHandler:processWhitespace(@objectiveID)=$ref]) &gt; 0 ) or ( count(//imsss:sequencingCollection//imsss:primaryObjective[URIHandler:processWhitespace(@objectiveID)=$ref]) &gt; 0))"
         >passed~The "referencedObjective" attribute [<value-of select="@referencedObjective" />] of the &lt;ruleCondition&gt; element references a valid objective within the Manifest</assert>
               
         <assert test="if (count(../../../../imsss:objectives) &gt; 0)
                       then( (local-name(../../../../parent::node()) != 'sequencingCollection') and (count(@referencedObjective) &gt; 0) and (count(../../../..//imsss:objective[URIHandler:processWhitespace(@objectiveID)=$ref]) &lt; 1 ) and ( count(../../../..//imsss:primaryObjective[URIHandler:processWhitespace(@objectiveID)=$ref]) &lt; 1))
                       else( (local-name(../../../../parent::node()) != 'sequencingCollection') and (count(@referencedObjective) &gt; 0) and (count(//imsss:sequencingCollection/imsss:sequencing[normalize-space(@ID)=$idRef]//imsss:objective[URIHandler:processWhitespace(@objectiveID)=$ref]) &lt; 1 ) and ( count(//imsss:sequencingCollection//imsss:primaryObjective[URIHandler:processWhitespace(@objectiveID)=$ref]) &lt; 1))"
         >failed~[<value-of select="@referencedObjective" />] is not a valid value for the "referencedObjective" attribute.  The "referencedObjective" attribute shall represent an identifier of an objective found within the given activity</assert>
               
         <!-- referencedObjective under sequencingCollection -->
         <let name="refId" value="URIHandler:processWhitespace(@referencedObjective)" />
         <let name="seqId" value="normalize-space(../../../../@ID)" />
         
         <assert test="(count(@referencedObjective) &gt; 0) and (local-name(../../../../parent::node()) = 'sequencingCollection') and (parser:isSQReferencedObjectiveValid($refId, $seqId) = false())">failed~[<value-of select="@referencedObjective" />] is not a valid value for the "referencedObjective" attribute.  The "referencedObjective" attribute shall represent an identifier of an objective found within each given activity</assert>        
         
         <!-- REQ_31.6.1.1.2.1.2 -->
         <!-- REQ_31.6.2.1.2.1.2 -->
         <!-- REQ_31.6.3.1.2.1.2 -->
         <!-- Since the underlying data type of a referencedObjective is a unique identifier, then the value held by the referencedObjective shall not be an empty characterstring  nor contain all white space characters. -->
         <assert test="count(@referencedObjective) &gt; 0">info~Testing the character length of the "referencedObjective" attribute value</assert>
         <assert test="(count(@referencedObjective) &gt; 0) and (normalize-space(@referencedObjective) = '') and (string-length(@referencedObjective) &gt; 0)">failed~Attribute "referencedObjective" must contain valid characters, all whitespace found.</assert>
         <assert test="(count(@referencedObjective) &gt; 0) and (string-length(@referencedObjective) = 0)">failed~No text was found in attribute "referencedObjective" and fails the minimum character length test</assert>
         <assert test="(count(@referencedObjective) &gt; 0) and (normalize-space(@referencedObjective) != '') and (string-length(@referencedObjective) &gt; 0)">passed~The character length for the value of the "referencedObjective" attribute has passed conformance</assert>     

         <!-- REQ_31.6.1.1.2.2-->
         <!-- REQ_31.6.2.1.2.2-->
         <!-- REQ_31.6.3.1.2.2-->
         <!-- The <ruleCondition> element shall contain 0 or 1 measureThreshold attribute.-->
         <assert test="count(@measureThreshold) &gt; 0">info~Testing the multiplicity of the "measureThreshold" attribute</assert>
         <assert test="count(@measureThreshold) &gt; 0">passed~The &lt;ruleCondition&gt; element contains 1 "measureThreshold" attribute</assert>
         
         <!-- REQ_31.6.1.1.2.2.1 -->
         <!-- REQ_31.6.2.1.2.2.1 -->
         <!-- REQ_31.6.3.1.2.2.1 -->
         <!-- The measureThreshold attribute's value shall be a valid xs:decimal in the range of -1.0000 and 1.0000 --> 
         <!-- (precision to at least 4 significant decimal places). -->
         <!-- Tested by IMSSS Schema -->
  
         <!-- REQ_31.6.1.1.2.2.2 -->
         <!-- REQ_31.6.2.1.2.2.2 -->
         <!-- REQ_31.6.3.1.2.2.2 -->        
         <!--  If no measureThreshold is provided then the value shall be 0.0 (default) -->
         <!-- Tested by IMSSS Schema -->

         <!-- REQ_31.6.1.1.2.3-->
         <!-- REQ_31.6.2.1.2.3-->
         <!-- REQ_31.6.3.1.2.3-->        
         <!-- The <ruleCondition> element shall contain 0 or 1 operator attribute.-->
         <assert test="count(@operator) &gt; 0">info~Testing the multiplicity of the "operator" attribute</assert>
         <assert test="count(@operator) &gt; 0">passed~The &lt;ruleCondition&gt; element contains 1 "operator" attribute</assert>
        
         <!-- REQ_31.6.1.1.2.3.1 -->
         <!-- REQ_31.6.2.1.2.3.1 -->
         <!-- REQ_31.6.3.1.2.3.1 -->         
         <!-- The operator attribute's value shall be one of the following restricted tokens: not or noOp -->
         <let name="operator" value="normalize-space(@operator)"/> 
         <assert test="count(@operator) &gt; 0">info~Testing the "operator" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@operator) &gt; 0) and (($operator = 'not') or ($operator = 'noOp'))">passed~[<value-of select="@operator" />] is a valid value for the "operator" attribute</assert>
         <assert test="(count(@operator) &gt; 0) and ($operator != 'not') and ($operator != 'noOp')">failed~[<value-of select="@operator" />] is not a valid value for the "operator" attribute</assert>
         
         <!-- REQ_31.6.1.1.2.4 -->
         <!-- REQ_31.6.2.1.2.4 -->
         <!-- REQ_31.6.3.1.2.4 -->
         <!-- The <ruleCondition> element shall contain 1 and only 1 condition attribute. -->
         <assert test="count(@condition) &gt; 0">info~Testing the multiplicity of the "condition" atrribute</assert>
         <assert test="( count(@condition) &gt; 1 ) or ( count(@condition) &lt; 1 )">failed~The &lt;ruleCondition&gt; element shall contain 1 and only 1 "condition" attribute</assert>
         <assert test="count(@condition) = 1">passed~The &lt;ruleCondition&gt; element contains 1 "condition" attribute</assert>

         <!-- REQ_31.6.1.1.2.4.1 -->
         <!-- REQ_31.6.2.1.2.4.1 -->
         <!-- REQ_31.6.3.1.2.4.1 -->
         <!-- The condition attribute's value shall be one of the following restricted tokens: -->
         <!-- satisfied, objectiveStatusKnown, objectiveMeasureKnown, objectiveMeasureGreaterThan, objectiveMeasureLessThan, -->
         <!-- completed, activityProgressKnown, attempted, attemptLimitExceeded, timeLimitExceeded, outsideAvailableTimeRange, always -->
         <let name="condition" value="normalize-space(@condition)"/>
         <assert test="count(@condition) &gt; 0">info~Testing the "condition" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(count(@condition) &gt; 0) 
                and ($condition != 'satisfied') 
                and ($condition != 'objectiveStatusKnown') 
                and ($condition != 'objectiveMeasureKnown') 
                and ($condition != 'objectiveMeasureGreaterThan') 
                and ($condition != 'objectiveMeasureLessThan') 
                and ($condition != 'completed') 
                and ($condition != 'activityProgressKnown') 
                and ($condition != 'attempted') 
                and ($condition != 'attemptLimitExceeded') 
                and ($condition != 'timeLimitExceeded') 
                and ($condition != 'outsideAvailableTimeRange') 
                and ($condition != 'always')">failed~[<value-of select="@condition" />] is not a valid value for the "condition" attribute</assert>
         <assert test="(count(@condition) &gt; 0) 
                and ( ($condition = 'satisfied') 
                or ($condition = 'objectiveStatusKnown') 
                or ($condition = 'objectiveMeasureKnown') 
                or ($condition = 'objectiveMeasureGreaterThan') 
                or ($condition = 'objectiveMeasureLessThan') 
                or ($condition = 'completed') 
                or ($condition = 'activityProgressKnown') 
                or ($condition = 'attempted') 
                or ($condition = 'attemptLimitExceeded') 
                or ($condition = 'timeLimitExceeded') 
                or ($condition = 'outsideAvailableTimeRange') 
                or ($condition = 'always') )">passed~[<value-of select="@condition" />] is a valid value for the "condition" attribute</assert>
         <assert test="(count(@condition) &gt; 0) and ( ($condition = 'timeLimitExceeded') or ($condition = 'outsideAvailableTimeRange') )">warning~At this time, SCORM recommends use of the [<value-of select="@condition" />] vocabulary token of the "condition" attribute with caution due to the various concerns that have risen dealing with defining requirements on its usage</assert>
         
        <!-- REQ_30.7.3.4.2 -->
        <!-- adlcp:scormType can only appear as an attribute on <resource> -->
        <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
        <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
        
        <!-- REQ_30.6.3.3.2 -->
        <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
        <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
        <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

        <!-- REQ_30.6.3.4.3 -->
        <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
        <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
        <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

    </rule>
    
    <rule id="ruleAction" context="imsss:ruleAction">
       <assert test="true()">info~Testing the &lt;ruleAction&gt; element for conformance</assert>
         
       <!-- REQ_31.6.1.2.2 -->
       <!-- REQ_31.6.2.2.2 -->
       <!-- REQ_31.6.3.2.2-->
       <!-- The <ruleAction> element shall only exist as a child element of the <preConditionRule>, <exitConditionRule> or <postConditionRule> elements. -->
       <assert test="true()">info~Testing the location of the &lt;ruleAction&gt; element</assert>
       <assert test="((local-name(parent::node()) != 'preConditionRule') and (local-name(parent::node()) != 'postConditionRule') and (local-name(parent::node()) != 'exitConditionRule')) or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;ruleAction&gt; element must exist as a child of the &lt;preCondition&gt;, &lt;postCondition&gt; or &lt;exitCondition&gt; element</assert>
       <assert test="((local-name(parent::node()) = 'preConditionRule') or (local-name(parent::node()) = 'postConditionRule') or (local-name(parent::node()) = 'exitConditionRule')) and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;ruleAction&gt; element is a child of the &lt;preCondition&gt;, &lt;postCondition&gt; or &lt;exitCondition&gt; element</assert>

       <!-- REQ_31.6.1.2.1 -->
       <!-- REQ_31.6.2.2.1 -->
       <!-- REQ_31.6.3.2.1 -->
       <!-- The <"ruleAction"> element shall contain 1 and only 1 action attribute. -->
       <assert test="count(@action) &gt; 0">info~Testing the multiplicity of the "action" atrribute</assert>
       <assert test="( count(@action) &gt; 1 ) or ( count(@action) &lt; 1 )">failed~The &lt;ruleAction&gt; element shall contain 1 and only 1 "action" attribute</assert>
       <assert test="count(@action) = 1">passed~The &lt;ruleAction&gt; element contains 1 "action" attribute</assert>

       <let name="action" value="normalize-space(@action)"/>
       <assert test="((local-name(parent::node()) = 'preConditionRule') or (local-name(parent::node()) = 'postConditionRule') or (local-name(parent::node()) = 'exitConditionRule')) and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss') and (count(@action) &gt; 0)">info~Testing the "action" attribute for conformance to the Vocabulary Data Type</assert>
       
       <!-- Precondition Rule Asserts -->  
       
       <!-- REQ_31.6.1.2.1.1 -->
       <!-- The action attribute's value shall be one of the following restricted tokens: -->
       <!-- skip, disabled, hiddenFromChoice, stopForwardTraversal -->       
       <assert test="((local-name(parent::node()) = 'preConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss'))
              and (count(@action) &gt; 0) 
              and ($action != 'skip') 
              and ($action != 'disabled') 
              and ($action != 'hiddenFromChoice') 
              and ($action != 'stopForwardTraversal')">failed~[<value-of select="@action" />] is not a valid value for the "action" attribute</assert>
       <assert test="((local-name(parent::node()) = 'preConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss'))
              and (count(@action) &gt; 0) and 
              ( ($action = 'skip') 
              or ($action = 'disabled') 
              or ($action = 'hiddenFromChoice') 
              or ($action = 'stopForwardTraversal') )">passed~[<value-of select="@action" />] is a valid value for the "action" attribute</assert>
          
       <!-- Exitcondition Rule Asserts -->
       
       <!-- REQ_31.6.2.2.1.1 -->
       <!-- The action attribute's value shall be one of the following restricted tokens: exit -->
       <assert test="((local-name(parent::node()) = 'exitConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@action) &gt; 0) and ($action != 'exit')">failed~[<value-of select="@action" />] is not a valid value for the "action" attribute</assert>
       <assert test="((local-name(parent::node()) = 'exitConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@action) &gt; 0) and ($action = 'exit')">passed~[<value-of select="@action" />] is a valid value for the "action" attribute</assert>
          
       <!-- Postcondition Rule Asserts -->
       
       <!-- REQ_31.6.3.2.1.1 -->
       <!-- The action attribute's value shall be one of the following restricted tokens: -->
       <!-- exitParent, exitAll, retry, retryAll, continue, previous -->
       <assert test="((local-name(parent::node()) = 'postConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) 
              and (count(@action) &gt; 0) 
              and ($action != 'exitParent') 
              and ($action != 'exitAll') 
              and ($action != 'retry') 
              and ($action != 'retryAll') 
              and ($action != 'continue') 
              and ($action != 'previous')">failed~[<value-of select="@action" />] is not a valid value for the "action" attribute</assert>
       <assert test="((local-name(parent::node()) = 'postConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss'))
              and (count(@action) &gt; 0) and 
              ( ($action = 'exitParent') 
              or ($action = 'exitAll') 
              or ($action = 'retry') 
              or ($action = 'retryAll') 
              or ($action = 'continue') 
              or ($action = 'previous') )">passed~[<value-of select="@action" />] is a valid value for the "action" attribute</assert>
              
       <!-- REQ_31.6.3.2.1.1.1 --> 
       <!-- The action attribute’s value of ‘exitParent’ shall not occur within <sequencing> element that -->
       <!-- is a child of an <organization> element. -->       
       <!-- REQ_31.6.3.2.1.1.2 -->
       <!-- The action attribute’s value of ‘previous’ shall not occur within <sequencing> element that -->
       <!-- is a child of an <organization> element. -->
       <assert test="((local-name(parent::node()) = 'postConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@action) &gt; 0) and ((normalize-space(@action) = 'exitParent') or (normalize-space(@action) = 'previous')) and (local-name(./../../../..) = 'organization')">info~Testing the location of the "action" attribute</assert>
       <assert test="((local-name(parent::node()) = 'postConditionRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) and (count(@action) &gt; 0) and ((normalize-space(@action) = 'exitParent') or (normalize-space(@action) = 'previous')) and (local-name(./../../../..) = 'organization')">failed~The "action" attribute’s value of [<value-of select="@action" />] shall not occur within &lt;sequencing&gt; element that is a child of an &lt;organization&gt; element</assert>
       
       <!-- General Asserts -->
          
       <!-- REQ_30.7.3.4.2 -->
       <!-- adlcp:scormType can only appear as an attribute on <resource> -->
       <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
       <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
       <!-- REQ_30.6.3.3.2 -->
       <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
       <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
       <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

       <!-- REQ_30.6.3.4.3 -->
       <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
       <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
       <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>        
           
    </rule>
      
      <rule id="controlMode" context="imsss:controlMode">
      
        <assert test="true()">info~Testing the &lt;controlMode&gt; element for conformance</assert>
        
      	<!-- REQ_31.5.1	-->
      	<!--The <controlMode> element shall contain 0 or 1 choice attribute.-->
      	<assert test="count(@choice) &gt; 0">info~Testing multiplicity of the "choice" attribute</assert>
	    <assert test="count(@choice) &gt; 0">passed~The &lt;controlMode&gt; element contains 1 "choice" attribute</assert>
	    
	    <!-- REQ_31.5.1.1 -->
	    <!--The choice attribute's value shall be represented as an xs:boolean type. -->
	    <!-- Enforced by IMSSS Schema -->
	    
	    <!-- REQ_31.5.1.2 -->
	    <!-- The choice attribute's value shall be either true or false -->
	    <let name="choice" value="normalize-space(@choice)" />
	    <assert test="count(@choice) &gt; 0">info~Testing the "choice" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@choice) &gt; 0) and ($choice != 'true') and ($choice != 'false')">failed~[<value-of select="@choice" />] is not a valid value for the "choice" attribute</assert>
		<assert test="(count(@choice) &gt; 0) and ($choice = 'true') or ($choice = 'false')">passed~[<value-of select="@choice" />] is a valid value for the "choice" attribute</assert>

		<!-- REQ_31.5.2	-->
      	<!--The <controlMode> element shall contain 0 or 1 choiceExit attribute.-->
      	<assert test="count(@choiceExit) &gt; 0">info~Testing multiplicity of the "choiceExit" attribute</assert>
	    <assert test="count(@choiceExit) &gt; 0">passed~The &lt;controlMode&gt; element contains 1 "choiceExit" attribute</assert>
	    
	    <!-- REQ_31.5.2.1 -->
	    <!--The choiceExit attribute's value shall be represented as an xs:boolean type. -->
	    <!-- Enforced by IMSSS Schema -->
	    
	    <!-- REQ_31.5.2.2 -->
	    <!-- The choiceExit attribute's value shall be either true or false -->
	    <let name="choiceExit" value="normalize-space(@choiceExit)" />
	    <assert test="count(@choiceExit) &gt; 0">info~Testing the "choiceExit" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@choiceExit) &gt; 0) and ($choiceExit != 'true') and ($choiceExit != 'false')">failed~[<value-of select="@choiceExit" />] is not a valid value for the "choiceExit" attribute</assert>
		<assert test="(count(@choiceExit) &gt; 0) and ($choiceExit = 'true') or ($choiceExit = 'false')">passed~[<value-of select="@choiceExit" />] is a valid value for the "choiceExit" attribute</assert>
		
		<!-- REQ_31.5.3	-->
      	<!--The <controlMode> element shall contain 0 or 1 flow attribute.-->
      	<assert test="count(@flow) &gt; 0">info~Testing multiplicity of the "flow" attribute</assert>
	    <assert test="count(@flow) &gt; 0">passed~The &lt;controlMode&gt; element contains 1 "flow" attribute</assert>
	    
	    <!-- REQ_31.5.3.1 -->
	    <!--The flow attribute's value shall be represented as an xs:boolean type. -->
	    <!-- Enforced by IMSSS Schema -->
	    
	    <!-- REQ_31.5.3.2 -->
	    <!-- The flow attribute's value shall be either true or false -->
	    <let name="flow" value="normalize-space(@flow)" />
	    <assert test="count(@flow) &gt; 0">info~Testing the "flow" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@flow) &gt; 0) and ($flow != 'true') and ($flow != 'false')">failed~[<value-of select="@flow" />] is not a valid value for the "flow" attribute</assert>
		<assert test="(count(@flow) &gt; 0) and ($flow = 'true') or ($flow = 'false')">passed~[<value-of select="@flow" />] is a valid value for the "flow" attribute</assert>

		<!-- REQ_31.5.4	-->
      	<!--The <controlMode> element shall contain 0 or 1 forwardOnly attribute.-->
      	<assert test="count(@forwardOnly) &gt; 0">info~Testing multiplicity of the "forwardOnly" attribute</assert>
	    <assert test="count(@forwardOnly) &gt; 0">passed~The &lt;controlMode&gt; element contains 1 "forwardOnly" attribute</assert>
	    
	    <!-- REQ_31.5.4.1 -->
	    <!--The forwardOnly attribute's value shall be represented as an xs:boolean type. -->
	    <!-- Enforced by IMSSS Schema -->
	    
	    <!-- REQ_31.5.4.2 -->
	    <!-- The forwardOnly attribute's value shall be either true or false -->
	    <let name="forwardOnly" value="normalize-space(@forwardOnly)" />
	    <assert test="count(@forwardOnly) &gt; 0">info~Testing the "forwardOnly" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@forwardOnly) &gt; 0) and ($forwardOnly != 'true') and ($forwardOnly != 'false')">failed~[<value-of select="@forwardOnly" />] is not a valid value for the "forwardOnly" attribute</assert>
		<assert test="(count(@forwardOnly) &gt; 0) and ($forwardOnly = 'true') or ($forwardOnly = 'false')">passed~[<value-of select="@forwardOnly" />] is a valid value for the "forwardOnly" attribute</assert>

		<!-- REQ_31.5.5	-->
      	<!--The <controlMode> element shall contain 0 or 1 useCurrentAttemptObjectiveInfo attribute.-->
      	<assert test="count(@useCurrentAttemptObjectiveInfo) &gt; 0">info~Testing multiplicity of the "useCurrentAttemptObjectiveInfo" attribute</assert>
	    <assert test="count(@useCurrentAttemptObjectiveInfo) &gt; 0">passed~The &lt;controlMode&gt; element contains 1 "useCurrentAttemptObjectiveInfo" attribute</assert>
	    
	    <!-- REQ_31.5.5.1 -->
	    <!--The useCurrentAttemptObjectiveInfo attribute's value shall be represented as an xs:boolean type. -->
	    <!-- Enforced by IMSSS Schema -->
	    
	    <!-- REQ_31.5.5.2 -->
	    <!-- The useCurrentAttemptObjectiveInfo attribute's value shall be either true or false -->
	    <let name="useCurrentAttemptObjectiveInfo" value="normalize-space(@useCurrentAttemptObjectiveInfo)" />
	    <assert test="count(@useCurrentAttemptObjectiveInfo) &gt; 0">info~Testing the "useCurrentAttemptObjectiveInfo" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@useCurrentAttemptObjectiveInfo) &gt; 0) and ($useCurrentAttemptObjectiveInfo != 'true') and ($useCurrentAttemptObjectiveInfo != 'false')">failed~[<value-of select="@useCurrentAttemptObjectiveInfo" />] is not a valid value for the "useCurrentAttemptObjectiveInfo" attribute</assert>
		<assert test="(count(@useCurrentAttemptObjectiveInfo) &gt; 0) and ($useCurrentAttemptObjectiveInfo = 'true') or ($useCurrentAttemptObjectiveInfo = 'false')">passed~[<value-of select="@useCurrentAttemptObjectiveInfo" />] is a valid value for the "useCurrentAttemptObjectiveInfo" attribute</assert>

		<!-- REQ_31.5.6	-->
      	<!--The <controlMode> element shall contain 0 or 1 useCurrentAttemptProgressInfo attribute.-->
      	<assert test="count(@useCurrentAttemptProgressInfo) &gt; 0">info~Testing multiplicity of the "useCurrentAttemptProgressInfo" attribute</assert>
	    <assert test="count(@useCurrentAttemptProgressInfo) &gt; 0">passed~The &lt;controlMode&gt; element contains 1 "useCurrentAttemptProgressInfo" attribute</assert>
	    
	    <!-- REQ_31.5.6.1 -->
	    <!--The useCurrentAttemptProgressInfo attribute's value shall be represented as an xs:boolean type. -->
	    <!-- Enforced by IMSSS Schema -->
	    
	    <!-- REQ_31.5.6.2 -->
	    <!-- The useCurrentAttemptProgressInfo attribute's value shall be either true or false -->
	    <let name="useCurrentAttemptProgressInfo" value="normalize-space(@useCurrentAttemptProgressInfo)" />
	    <assert test="count(@useCurrentAttemptProgressInfo) &gt; 0">info~Testing the "useCurrentAttemptProgressInfo" attribute for conformance to the Vocabulary Data Type</assert>
		<assert test="(count(@useCurrentAttemptProgressInfo) &gt; 0) and ($useCurrentAttemptProgressInfo != 'true') and ($useCurrentAttemptProgressInfo != 'false')">failed~[<value-of select="@useCurrentAttemptProgressInfo" />] is not a valid value for the "useCurrentAttemptProgressInfo" attribute</assert>
		<assert test="(count(@useCurrentAttemptProgressInfo) &gt; 0) and ($useCurrentAttemptProgressInfo = 'true') or ($useCurrentAttemptProgressInfo = 'false')">passed~[<value-of select="@useCurrentAttemptProgressInfo" />] is a valid value for the "useCurrentAttemptProgressInfo" attribute</assert>
		
		<!-- REQ_31.5.7 -->
      <!-- The <controlMode> element shall only be used as a child of the <sequencing> element. -->
      <assert test="true()">info~Testing the location of the &lt;controlMode&gt; element</assert>
      <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;controlMode&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
      <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;controlMode&gt; element is the child of the &lt;sequencing&gt; element</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="limitConditions" context="imsss:limitConditions">
      
         <assert test="true()">info~Testing the &lt;limitConditions&gt; element for conformance</assert>
      
         <!-- REQ_31.7.1 -->
         <!-- The <limitConditions> element shall contain 0 or 1 attemptLimit attribute.-->
      	 <assert test="count(@attemptLimit) &gt; 0">info~Testing the multiplicity of the "attemptLimit" attribute</assert>
	     <assert test="count(@attemptLimit) &gt; 0">passed~The &lt;limitConditions&gt; element contains 1 "attemptLimit" attribute</assert>

		 <!-- REQ_31.7.1.1 -->
		 <!-- The attemptLimit attribute's value shall be a non-negative integer. -->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.7.2 -->
         <!-- The <limitConditions> element shall contain 0 or 1 attemptAbsoluteDurationLimit attribute.-->
      	 <assert test="count(@attemptAbsoluteDurationLimit) &gt; 0">info~Testing the multiplicity of the "attemptAbsoluteDurationLimit" attribute</assert>
	     <assert test="count(@attemptAbsoluteDurationLimit) &gt; 0">passed~The &lt;limitConditions&gt; element contains 1 "attemptAbsoluteDurationLimit" attribute</assert>

		 <!-- REQ_31.7.2.1 -->
		 <!-- The attemptAbsoluteDurationLimit attribute's value shall be a valid xs:duration datatype.-->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.7.3 -->
         <!-- The <limitConditions> element shall contain 0 or 1 attemptExperiencedDurationLimit attribute.-->
      	 <assert test="count(@attemptExperiencedDurationLimit) &gt; 0">info~Testing the multiplicity of the "attemptExperiencedDurationLimit" attribute</assert>
	     <assert test="count(@attemptExperiencedDurationLimit) &gt; 0">warning~At this time, SCORM recommends use of the "attemptExperiencedDurationLimit" attribute of the &lt;limitConditions&gt; element with caution due to the various concerns that have risen dealing with the requirements on its usage</assert>

		 <!-- REQ_31.7.3.1 -->
		 <!-- The attemptExperiencedDurationLimit attribute's value shall be a valid xs:duration datatype.-->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.7.4 -->
         <!-- The <limitConditions> element shall contain 0 or 1 activityAbsoluteDurationLimit attribute.-->
      	 <assert test="count(@activityAbsoluteDurationLimit) &gt; 0">info~Testing the multiplicity of the "activityAbsoluteDurationLimit" attribute</assert>
	     <assert test="count(@activityAbsoluteDurationLimit) &gt; 0">warning~At this time, SCORM recommends use of the "activityAbsoluteDurationLimit" attribute of the &lt;limitConditions&gt; element with caution due to the various concerns that have risen dealing with the requirements on its usage</assert>

		 <!-- REQ_31.7.4.1 -->
		 <!-- The activityAbsoluteDurationLimit attribute's value shall be a valid xs:duration datatype.-->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.7.5 -->
         <!-- The <limitConditions> element shall contain 0 or 1 activityExperiencedDurationLimit attribute.-->
      	 <assert test="count(@activityExperiencedDurationLimit) &gt; 0">info~Testing the multiplicity of the "activityExperiencedDurationLimit" attribute</assert>
	     <assert test="count(@activityExperiencedDurationLimit) &gt; 0">warning~At this time, SCORM recommends use of the "activityExperiencedDurationLimit" attribute of the &lt;limitConditions&gt; element with caution due to the various concerns that have risen dealing with the requirements on its usage</assert>

		 <!-- REQ_31.7.5.1 -->
		 <!-- The activityExperiencedDurationLimit attribute's value shall be a valid xs:duration datatype.-->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.7.6 -->
         <!-- The <limitConditions> element shall contain 0 or 1 beginTimeLimit attribute.-->
      	 <assert test="count(@beginTimeLimit) &gt; 0">info~Testing the multiplicity of the "beginTimeLimit" attribute</assert>
	     <assert test="count(@beginTimeLimit) &gt; 0">warning~At this time, SCORM recommends use of the "beginTimeLimit" attribute of the &lt;limitConditions&gt; element with caution due to the various concerns that have risen dealing with the requirements on its usage</assert>

		 <!-- REQ_31.7.6.1 -->
		 <!-- The beginTimeLimit attribute's value shall be a valid xs:duration datatype.-->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.7.7 -->
         <!-- The <limitConditions> element shall contain 0 or 1 endTimeLimit attribute.-->
      	 <assert test="count(@endTimeLimit) &gt; 0">info~Testing the multiplicity of the "endTimeLimit" attribute</assert>
	     <assert test="count(@endTimeLimit) &gt; 0">warning~At this time, SCORM recommends use of the "endTimeLimit" attribute of the &lt;limitConditions&gt; element with caution due to the various concerns that have risen dealing with the requirements on its usage</assert>

		 <!-- REQ_31.7.7.1 -->
		 <!-- The endTimeLimit attribute's value shall be a valid xs:duration datatype.-->
		 <!-- Tested by IMSSS schema -->
		 
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_31.7.8 -->
      <!-- The <limitConditions> element shall only be used as a child of the <sequencing> element. -->
      <assert test="true()">info~Testing the location of the &lt;limitConditions&gt; element</assert>
      <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;limitConditions&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
      <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;limitConditions&gt; element is the child of the &lt;sequencing&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="rollupRules" context="imsss:rollupRules">
      
         <assert test="true()">info~Testing the &lt;rollupRules&gt; element for conformance</assert>
      
         <!-- REQ_31.9.1 -->
         <!-- The <rollupRules> element shall contain 0 or 1 rollupObjectiveSatisfied attribute. -->         
         <assert test="count(@rollupObjectiveSatisfied) &gt; 0">info~Testing the multiplicity of the "rollupObjectiveSatisfied" attribute</assert>
	     <assert test="count(@rollupObjectiveSatisfied) &gt; 0">passed~The &lt;rollupRules&gt; element contains 1 "rollupObjectiveSatisfied" attribute</assert>	
      
      	 <!-- REQ_31.9.1.1 -->
      	 <!-- The rollupObjectiveSatisfied attribute's value shall be represented as an xs:boolean type -->
		 <!-- Tested by IMSSS schema -->      
		
		 <!-- REQ_31.9.1.2 -->
	     <!-- The rollupObjectiveSatisfied attribute's value shall be either true or false -->
	     <let name="rollupObjectiveSatisfied" value="normalize-space(@rollupObjectiveSatisfied)" />
	     <assert test="count(@rollupObjectiveSatisfied) &gt; 0">info~Testing the "rollupObjectiveSatisfied" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@rollupObjectiveSatisfied) &gt; 0) and ($rollupObjectiveSatisfied != 'true') and ($rollupObjectiveSatisfied != 'false')">failed~[<value-of select="@rollupObjectiveSatisfied" />] is not a valid value for the "rollupObjectiveSatisfied" attribute</assert>
		 <assert test="(count(@rollupObjectiveSatisfied) &gt; 0) and ($rollupObjectiveSatisfied = 'true') or ($rollupObjectiveSatisfied = 'false')">passed~[<value-of select="@rollupObjectiveSatisfied" />] is a valid value for the "rollupObjectiveSatisfied" attribute</assert>
		 
		 <!-- REQ_31.9.2 -->
         <!-- The <rollupRules> element shall contain 0 or 1 rollupProgressCompletion attribute. -->         
         <assert test="count(@rollupProgressCompletion) &gt; 0">info~Testing the multiplicity of the "rollupProgressCompletion" attribute</assert>
	     <assert test="count(@rollupProgressCompletion) &gt; 0">passed~The &lt;rollupRules&gt; element contains 1 "rollupProgressCompletion" attribute</assert>	
      
      	 <!-- REQ_31.9.2.1 -->
      	 <!-- The rollupProgressCompletion attribute's value shall be represented as an xs:boolean type -->
		 <!-- Tested by IMSSS schema -->      
		
		 <!-- REQ_31.9.2.2 -->
	     <!-- The rollupProgressCompletion attribute's value shall be either true or false -->
	     <let name="rollupProgressCompletion" value="normalize-space(@rollupProgressCompletion)" />
	     <assert test="count(@rollupProgressCompletion) &gt; 0">info~Testing the "rollupProgressCompletion" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@rollupProgressCompletion) &gt; 0) and ($rollupProgressCompletion != 'true') and ($rollupProgressCompletion != 'false')">failed~[<value-of select="@rollupProgressCompletion" />] is not a valid value for the "rollupProgressCompletion" attribute</assert>
		 <assert test="(count(@rollupProgressCompletion) &gt; 0) and ($rollupProgressCompletion = 'true') or ($rollupProgressCompletion = 'false')">passed~[<value-of select="@rollupProgressCompletion" />] is a valid value for the "rollupProgressCompletion" attribute</assert>
		
		 <!-- REQ_31.9.3 -->
         <!-- The <rollupRules> element shall contain 0 or 1 objectiveMeasureWeight attribute. -->         
         <assert test="count(@objectiveMeasureWeight) &gt; 0">info~Testing the multiplicity of the "objectiveMeasureWeight" attribute</assert>
	     <assert test="count(@objectiveMeasureWeight) &gt; 0">passed~The &lt;rollupRules&gt; element contains 1 "objectiveMeasureWeight" attribute</assert>	
	     
	     <!-- REQ_31.9.3.1-->
	     <!-- The objectiveMeasureWeight attribute's value shall be represented as an xs:decimal in the range of 0.0000 to 1.0000 (precision to at least 4 significant decimal positions) -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.9.4-->
      	 <!-- The <rollupRules> element shall contain 0 or More <rollupRule> child elements.-->
      	 <assert test="count(imsss:rollupRule) &gt; 0">info~Testing multiplicity of the &lt;rollupRule&gt; element</assert> 
         <assert test="count(imsss:rollupRule) &gt; 0">passed~A &lt;rollupRules&gt; element contains <value-of select="count(imsss:rollupRule)"/> &lt;rollupRule&gt; element(s)</assert>
         
         <!-- REQ_31.9.5 -->
         <!-- The <rollupRules> element shall only be used as a child of the <sequencing> element. -->
         <assert test="true()">info~Testing the location of the &lt;rollupRules&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;rollupRules&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;rollupRules&gt; element is the child of the &lt;sequencing&gt; element</assert>
				
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="rollupRule" context="imsss:rollupRule">
      
        <assert test="true()">info~Testing the &lt;rollupRule&gt; element for conformance</assert>
        
        <!-- REQ_31.9.4.6 -->
        <!-- The <rollupRule> element shall only be used as a child of the <rollupRules> element. -->
        <assert test="true()">info~Testing the location of the &lt;ruleConditions&gt; element</assert>
        <assert test="(local-name(parent::node()) != 'rollupRules') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;rollupRule&gt; element must exist as a child of the &lt;rollupRules&gt; element</assert>
        <assert test="(local-name(parent::node()) = 'rollupRules') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;rollupRule&gt; element is a child of the &lt;rollupRules&gt; element</assert>
        
         <!-- REQ_31.9.4.1 -->
         <!-- The <rollupRule> element shall contain 0 or 1 childActivitySet attribute. -->         
         <assert test="count(@childActivitySet) &gt; 0">info~Testing the multiplicity of the "childActivitySet" attribute</assert>
	     <assert test="count(@childActivitySet) &gt; 0">passed~The &lt;rollupRule&gt; element contains 1 "childActivitySet" attribute</assert>	
	     
	     <!-- REQ_31.9.4.1.1 -->
		 <!-- The childActivitySet attribute's value shall be one of the following restricted tokens: -->
		 <!-- all, any, none, atLeastCount, atLeastPercent -->
		 <let name="childActivitySet" value="normalize-space(@childActivitySet)"/>
		 <assert test="count(@childActivitySet) &gt; 0">info~Testing the "childActivitySet" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@childActivitySet) &gt; 0) 
		 		and ($childActivitySet != 'all') 
		 		and ($childActivitySet != 'any') 
		 		and ($childActivitySet != 'none') 
		 		and ($childActivitySet != 'atLeastCount') 
		 		and ($childActivitySet != 'atLeastPercent')">failed~[<value-of select="@childActivitySet" />] is not a valid value for the "childActivitySet" attribute</assert>
		 <assert test="(count(@childActivitySet) &gt; 0) and 
		 		( ($childActivitySet = 'all') 
		 		or ($childActivitySet = 'any') 
		 		or ($childActivitySet = 'none') 
		 		or ($childActivitySet = 'atLeastCount') 
		 		or ($childActivitySet = 'atLeastPercent') )">passed~[<value-of select="@childActivitySet" />] is a valid value for the "childActivitySet" attribute</assert>

         <!-- REQ_31.9.4.2 -->
         <!-- The <rollupRule> element shall contain 0 or 1 minimumCount attribute. -->         
         <assert test="count(@minimumCount) &gt; 0">info~Testing the multiplicity of the "minimumCount" attribute</assert>
	     <assert test="count(@minimumCount) &gt; 0">passed~The &lt;rollupRule&gt; element contains 1 "minimumCount" attribute</assert>			
	     
	     <!-- REQ_31.9.4.2.1 -->
	     <!-- The minimumCount attribute's value shall be a non-negative integer (default is 0 if no minimumCount attribute is defined). -->
         <assert test="count(@minimumCount) &gt; 0">info~Testing the "minimumCount" attribute for conformance to the Vocabulary Data Type</assert>     
         <assert test="@minimumCount &gt;= 0">passed~[<value-of select="@minimumCount" />] is a valid value for the "minimumCount" attribute</assert>
         <assert test="@minimumCount &lt; 0">failed~[<value-of select="@minimumCount" />] is not a valid value for the "minimumCount" attribute</assert>
         
         <!-- REQ_31.9.4.2.2 -->
         <!-- The minimumCount attribute shall be used if the childActivitySet attribute is set to a value of atLeastCount.  If the minimumCount attribute is not used, the default value of 0 shall be used. -->
		 <!-- Tested by IMSSS schema -->
		 
		 <!-- REQ_31.9.4.3 -->
         <!-- The <rollupRule> element shall contain 0 or 1 minimumPercent attribute. -->         
         <assert test="count(@minimumPercent) &gt; 0">info~Testing the multiplicity of the "minimumPercent" attribute</assert>
	     <assert test="count(@minimumPercent) &gt; 0">passed~The &lt;rollupRule&gt; element contains 1 "minimumPercent" attribute</assert>			
	     
	     <!-- REQ_31.9.4.3.1 -->
	     <!-- The minimumPercent attribute's value shall be an xs:decimal in the range of 0.0000 to 1.0000 (precision to at least 4 significant decimal places) -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.9.4.3.2 -->
	     <!-- The minimumPercent attribute shall be used if the childActivitySet attribute is set to a value of atLeastPercent.  If the minimumPercent attribute is not used, the default value of 0.0000 shall be used. -->
	     <!-- Performed by LMS -->
	     
	     <!-- REQ_31.9.4.4 -->
      	 <!-- The <rollupRule> element shall contain 1 and only 1 <rollupConditions> child elements. -->
      	 <assert test="count(imsss:rollupConditions) &gt; 0">info~Testing the multiplicity of the &lt;rollupConditions&gt; element</assert>
		 <assert test="( count(imsss:rollupConditions) &gt; 1 ) or ( count(imsss:rollupConditions) &lt; 1 )">failed~The &lt;rollupRule&gt; element shall contain 1 and only 1 &lt;rollupConditions&gt; element</assert>
         <assert test="count(imsss:rollupConditions) = 1">passed~The &lt;rollupRule&gt; element contains 1 &lt;rollupConditions&gt; element</assert>
               
         <!-- REQ_31.9.4.5 -->
      	 <!-- The <rollupRule> element shall contain 1 and only 1 <rollupAction> child elements. -->
      	 <assert test="count(imsss:rollupAction) &gt; 0">info~Testing the multiplicity of the &lt;rollupAction&gt; element</assert>
		 <assert test="( count(imsss:rollupAction) &gt; 1 ) or ( count(imsss:rollupAction) &lt; 1 )">failed~The &lt;rollupRule&gt; element shall contain 1 and only 1 &lt;rollupAction&gt; element</assert>
         <assert test="count(imsss:rollupAction) = 1">passed~The &lt;rollupRule&gt; element contains 1 &lt;rollupAction&gt; element</assert>
               
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
                 
      <rule id="rollupConditions" context="imsss:rollupConditions">
      
      	 <assert test="true()">info~Testing the &lt;rollupConditions&gt; element for conformance</assert>
          
          <!-- REQ_31.9.4.4.3 -->
          <!-- The <rollupConditions> element shall only be used as a child of the <rollupRule> element. -->
          <assert test="true()">info~Testing the location of the &lt;rollupConditions&gt; element</assert>
          <assert test="(local-name(parent::node()) != 'rollupRule') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;rollupConditions&gt; element must exist as a child of the &lt;rollupRule&gt; element</assert>
          <assert test="(local-name(parent::node()) = 'rollupRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;rollupConditions&gt; element is a child of the &lt;rollupRule&gt; element</assert>
          
      	 <!-- REQ_31.9.4.4.1 -->
      	 <!-- The <rollupConditions> element shall contain 0 or 1 conditionCombination attribute. -->
         <assert test="count(@conditionCombination) &gt; 0">info~Testing multiplicity of the "conditionCombination" attribute</assert>
		 <assert test="count(@conditionCombination) = 1">passed~The &lt;rollupConditions&gt; element contains 1 "conditionCombination" attribute</assert>
		 
		 <!-- REQ_31.9.4.4.1.1 -->
		 <!-- The conditionCombination attribute's value shall be one of the following restricted tokens -->
		 <!-- all or any -->
		 <let name="conditionCombination" value="normalize-space(@conditionCombination)"/>
		 <assert test="(count(@conditionCombination) &gt; 0)">info~Testing the "conditionCombination" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@conditionCombination) &gt; 0) and (($conditionCombination = 'all') or ($conditionCombination = 'any'))">passed~[<value-of select="@conditionCombination" />] is a valid value for the "conditionCombination" attribute</assert>
		 <assert test="(count(@conditionCombination) &gt; 0) and ($conditionCombination != 'all') and ($conditionCombination != 'any')">failed~[<value-of select="@conditionCombination" />] is not a valid value for the "conditionCombination" attribute</assert>
	
		 <!-- REQ_31.9.4.4.2 -->
		 <!-- The <rollupConditions> element shall contain 1 or More <rollupCondition> child elements. -->
		 <assert test="true()">info~Testing multiplicity of the &lt;rollupCondition&gt; element</assert>
         <assert test="count(imsss:rollupCondition) &gt; 0">passed~The &lt;rollupConditions&gt; element contains 1 or More &lt;rollupCondition&gt; elements</assert>
         <assert test="count(imsss:rollupCondition) &lt; 1">failed~The &lt;rollupConditions&gt; element shall contain 1 or More &lt;rollupCondition&gt; elements</assert>	   	   
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="rollupCondition" context="imsss:rollupCondition">
      
         <assert test="true()">info~Testing the &lt;rollupCondition&gt; element for conformance</assert>
         
         <!-- REQ_31.9.4.4.2.3 -->
         <!-- The <rollupCondition> element shall only be used as a child of the <rollupConditions> element. -->
         <assert test="true()">info~Testing the location of the &lt;rollupCondition&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'rollupConditions') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;rollupCondition&gt; element must exist as a child of the &lt;rollupConditions&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'rollupConditions') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;rollupCondition&gt; element is a child of the &lt;rollupConditions&gt; element</assert>
         
         <!-- REQ_31.9.4.4.2.1-->
         <!-- The <rollupCondition> element shall contain 0 or 1 operator attribute.-->
      	 <assert test="count(@operator) &gt; 0">info~Testing the multiplicity of the "operator" attribute</assert>
	     <assert test="count(@operator) &gt; 0">passed~The &lt;rollupCondition&gt; element contains 1 "operator" attribute</assert>
	    
	     <!-- REQ_31.9.4.4.2.1.1-->
		 <!-- The operator attribute's value shall be one of the following restricted tokens: not or noOp -->
		 <let name="operator" value="normalize-space(@operator)"/> 
	     <assert test="count(@operator) &gt; 0">info~Testing the "operator" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@operator) &gt; 0) and ($operator = 'not') or ($operator = 'noOp')">passed~[<value-of select="@operator" />] is a valid value for the "operator" attribute</assert>	     
		 <assert test="(count(@operator) &gt; 0) and ($operator != 'not') and ($operator != 'noOp')">failed~[<value-of select="@operator" />] is not a valid value for the "operator" attribute</assert>
		 
		 <!-- REQ_31.9.4.4.2.2 -->
		 <!-- The <rollupCondition> element shall contain 1 and only 1 condition attribute. -->
		 <assert test="count(@condition) &gt; 0">info~Testing the multiplicity of the "condition" atrribute</assert>
		 <assert test="( count(@condition) &gt; 1 ) or ( count(@condition) &lt; 1 )">failed~The &lt;rollupCondition&gt; element shall contain 1 and only 1 "condition" attribute</assert>
         <assert test="count(@condition) = 1">passed~The &lt;rollupCondition&gt; element contains 1 "condition" attribute</assert>

		 <!-- REQ_31.9.4.4.2.2.1-->
		 <!-- The condition attribute's value shall be one of the following restricted tokens: -->
  		 <!-- satisfied, objectiveStatusKnown, objectiveMeasureKnown, objectiveMeasureGreaterThan, objectiveMeasureLessThan, -->
  		 <!-- completed, activityProgressKnown, attempted, attemptLimitExceeded, timeLimitExceeded, outsideAvailableTimeRange, always -->
		 <let name="condition" value="normalize-space(@condition)"/>
		 <assert test="count(@condition) &gt; 0">info~Testing the "condition" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@condition) &gt; 0) 
		 		and ($condition != 'satisfied') 
		 		and ($condition != 'objectiveStatusKnown') 
		 		and ($condition != 'objectiveMeasureKnown') 
		 		and ($condition != 'objectiveMeasureGreaterThan') 
		 		and ($condition != 'objectiveMeasureLessThan') 
		 		and ($condition != 'completed') 
		 		and ($condition != 'activityProgressKnown') 
		 		and ($condition != 'attempted') 
		 		and ($condition != 'attemptLimitExceeded') 
		 		and ($condition != 'timeLimitExceeded') 
		 		and ($condition != 'outsideAvailableTimeRange') 
		 		and ($condition != 'always')">failed~[<value-of select="@condition" />] is not a valid value for the "condition" attribute</assert>
		 <assert test="(count(@condition) &gt; 0) 
		 		and ( ($condition = 'satisfied') 
		 		or ($condition = 'objectiveStatusKnown') 
		 		or ($condition = 'objectiveMeasureKnown') 
		 		or ($condition = 'objectiveMeasureGreaterThan') 
		 		or ($condition = 'objectiveMeasureLessThan') 
		 		or ($condition = 'completed') 
		 		or ($condition = 'activityProgressKnown') 
		 		or ($condition = 'attempted') 
		 		or ($condition = 'attemptLimitExceeded') 
		 		or ($condition = 'timeLimitExceeded') 
		 		or ($condition = 'outsideAvailableTimeRange') 
		 		or ($condition = 'always') )">passed~[<value-of select="@condition" />] is a valid value for the "condition" attribute</assert>
		 <assert test="(count(@condition) &gt; 0) and ( ($condition = 'timeLimitExceeded') or ($condition = 'outsideAvailableTimeRange') )">warning~At this time, SCORM recommends use of the [<value-of select="@condition" />] vocabulary token of the "condition" attribute with caution due to the various concerns that have risen dealing with defining requirements on its usage</assert>
		 
		 
      	 
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="rollupAction" context="imsss:rollupAction">
         <assert test="true()">info~Testing the &lt;rollupAction&gt; element for conformance</assert>
         
         <!-- REQ_31.9.4.5.2-->
         <!-- The <rollupAction> element shall only be used as a child of the <rollupRule> element. -->
         <assert test="true()">info~Testing the location of the &lt;rollupAction&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'rollupRule') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;rollupAction&gt; element must exist as a child of the &lt;rollupRule&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'rollupRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;rollupAction&gt; element is a child of the &lt;rollupRule&gt; element</assert>
         
         <!-- REQ_31.9.4.5.1 -->
         <!-- The <rollupAction> element shall contain 1 and only 1 action attribute. -->
         <assert test="count(@action) &gt; 0">info~Testing the multiplicity of the "action" atrribute</assert>
         <assert test="( count(@action) &gt; 1 ) or ( count(@action) &lt; 1 )">failed~The &lt;rollupAction&gt; element shall contain 1 and only 1 "action" attribute</assert>
         <assert test="count(@action) = 1">passed~The &lt;rollupAction&gt; element contains 1 "action" attribute</assert>

         <!-- REQ_31.9.4.5.1.1 -->
         <!-- The action attribute's value shall be one of the following restricted tokens: -->
         <!-- satisfied, notSatisfied, completed, incomplete -->
         <let name="action" value="normalize-space(@action)"/>
         <assert test="(local-name(parent::node()) = 'rollupRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss') and (count(@action) &gt; 0)">info~Testing the "action" attribute for conformance to the Vocabulary Data Type</assert>
         <assert test="(local-name(parent::node()) = 'rollupRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')
                and (count(@action) &gt; 0) 
                and ($action != 'satisfied') 
                and ($action != 'notSatisfied') 
                and ($action != 'completed') 
                and ($action != 'incomplete')">failed~[<value-of select="@action" />] is not a valid value for the "action" attribute</assert>
         <assert test="(local-name(parent::node()) = 'rollupRule') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')
                and (count(@action) &gt; 0) and 
                ( ($action = 'satisfied') 
                or ($action = 'notSatisfied') 
                or ($action = 'completed') 
                or ($action = 'incomplete') )">passed~[<value-of select="@action" />] is a valid value for the "action" attribute</assert>
          
         <!-- REQ_30.7.3.4.2 -->
         <!-- adlcp:scormType can only appear as an attribute on <resource> -->
         <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
         <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
         <!-- REQ_30.6.3.3.2 -->
         <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
         <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
         <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

         <!-- REQ_30.6.3.4.3 -->
         <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
         <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
         <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
         
      </rule>
      
      
      <rule id="objectives" context="imsss:objectives">
      
         <assert test="true()">info~Testing the &lt;objectives&gt; element for conformance</assert>
      
         <!-- REQ_31.10.1 -->
      	 <!-- The <sequencing> element shall contain 1 and only 1 <primaryObjective> child elements. -->
      	 <assert test="count(imsss:primaryObjective) &gt; 0">info~Testing the multiplicity of the &lt;primaryObjective&gt; element</assert>
		 <assert test="( count(imsss:primaryObjective) &gt; 1 ) or ( count(imsss:primaryObjective) &lt; 1 )">failed~The &lt;objectives&gt; element shall contain 1 and only 1 &lt;primaryObjective&gt; element</assert>
         <assert test="count(imsss:primaryObjective) = 1">passed~The &lt;objectives&gt; element contains 1 &lt;primaryObjective&gt; element</assert>
         
         <!-- REQ_31.10.2 -->
      	 <!-- The <objectives> element shall contain 0 or More <objective> child elements.-->
      	 <assert test="count(imsss:objective) &gt; 0">info~Testing multiplicity of the &lt;objective&gt; element</assert> 
         <assert test="count(imsss:objective) &gt; 0">passed~A &lt;objectives&gt; element contains <value-of select="count(imsss:objective)"/> &lt;objective&gt; element(s)</assert>
         
         <!-- REQ_31.10.3 -->
         <!-- The <objectives> element shall only be used as a child of the <sequencing> element. -->
         <assert test="true()">info~Testing the location of the &lt;objectives&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;objectives&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;objectives&gt; element is the child of the &lt;sequencing&gt; element</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="primaryObjective" context="imsss:primaryObjective">
      
         <assert test="count(@objectiveID) &gt; 0">info~Testing the &lt;primaryObjective&gt; element with the objectiveID value of [<value-of select="@objectiveID"/>] for conformance</assert>
      
      
         <!-- REQ_31.10.1.5-->
         <!-- The <primaryObjective> element shall only be used as a child of the <objectives> element. -->
         <assert test="true()">info~Testing the location of the &lt;primaryObjective&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'objectives') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;primaryObjective&gt; element must exist as a child of the &lt;objectives&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'objectives') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;primaryObjective&gt; element is a child of the &lt;objectives&gt; element</assert>
      
         <!-- REQ_31.10.1.1 -->
         <!-- The <primaryObjective> element shall contain 0 or 1 satisfiedByMeasure attribute. -->         
         <assert test="count(@satisfiedByMeasure) &gt; 0">info~Testing the multiplicity of the "satisfiedByMeasure" attribute</assert>
	     <assert test="count(@satisfiedByMeasure) &gt; 0">passed~The &lt;primaryObjective&gt; element contains 1 "satisfiedByMeasure" attribute</assert>	
      
      	 <!-- REQ_31.10.1.1.1 -->
      	 <!-- The satisfiedByMeasure attribute's value shall be represented as an xs:boolean type -->
		 <!-- Tested by IMSSS schema -->      
		
		 <!-- REQ_31.10.1.1.2 -->
	     <!-- The satisfiedByMeasure attribute's value shall be either true or false -->
	     <let name="satisfiedByMeasure" value="normalize-space(@satisfiedByMeasure)" />
	     <assert test="count(@satisfiedByMeasure) &gt; 0">info~Testing the "satisfiedByMeasure" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@satisfiedByMeasure) &gt; 0) and ($satisfiedByMeasure != 'true') and ($satisfiedByMeasure != 'false')">failed~[<value-of select="@satisfiedByMeasure" />] is not a valid value for the "satisfiedByMeasure" attribute</assert>
		 <assert test="(count(@satisfiedByMeasure) &gt; 0) and ($satisfiedByMeasure = 'true') or ($satisfiedByMeasure = 'false')">passed~[<value-of select="@satisfiedByMeasure" />] is a valid value for the "satisfiedByMeasure" attribute</assert>
		 
		 <!-- REQ_31.10.1.2 -->
         <!-- The <primaryObjective> element shall contain 0 or 1 objectiveID attribute.-->
      	 <assert test="count(@objectiveID) &gt; 0">info~Testing the multiplicity of the "objectiveID" attribute</assert>
	     <assert test="count(@objectiveID) &gt; 0">passed~The &lt;primaryObjective&gt; element contains 1 "objectiveID" attribute</assert>
	     
	     <!-- REQ_31.10.1.2.1 -->
	     <!-- The objectiveID attribute's value shall be represented as an xs:anyURI type. -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.10.1.2.2 -->
	     <!-- If a <primaryObjective> element contains an objective map (i.e., <mapInfo> element), then the objectiveID attribute is required. -->
	     <assert test="(count(imsss:mapInfo) &gt; 0) and (count(@objectiveID) &lt; 1)">info~Testing the multiplicity of the "objectiveID" attribute</assert>
	     <assert test="(count(imsss:mapInfo) &gt; 0) and (count(@objectiveID) &lt; 1)">failed~The "objectiveID" attribute is mandatory for a &lt;primaryObjective&gt; element that contains &lt;mapInfo&gt; element(s)</assert>
	     
	     <!-- REQ_31.10.1.2.3 -->
         <!-- For a given set of objectives defined for an activity (i.e., one <primaryObjective> and multiple <objective> elements), the objectiveID attributes values for all of the objective IDs shall be unique. -->
		 		 
		 <let name="objectiveID" value="URIHandler:processWhitespace(@objectiveID)" />
		 <assert test="count(@objectiveID) &gt; 0">info~Testing the "objectiveID" attribute for conformance</assert>
		 <assert test="(count(@objectiveID) &gt; 0) and (count(../child::*[URIHandler:processWhitespace(@objectiveID)=$objectiveID]) = 1)">passed~The "objectiveID" attribute is unique within the &lt;objectives&gt; element</assert>
		 <assert test="(count(@objectiveID) &gt; 0) and (count(../child::*[URIHandler:processWhitespace(@objectiveID)=$objectiveID]) &gt; 1)">failed~The "objectiveID" attribute [<value-of select="@objectiveID" />] is not unique within the &lt;objectives&gt; element</assert>
		 		 
		 <!-- REQ_31.10.1.2.4 -->
		 <!-- Since the underlying data type of a objectiveID is a unique identifier, then the value held by the objectiveID shall not be an empty characterstring nor contain all white space characters. -->
		 <assert test="count(@objectiveID) &gt; 0">info~Testing the character length of the "objectiveID" attribute value</assert>
		 <assert test="(count(@objectiveID) &gt; 0) and (URIHandler:processWhitespace(@objectiveID) = '') and (string-length(@objectiveID) &gt; 0)">failed~Attribute "objectiveID" must contain valid characters, all whitespace found.</assert>
     	 <assert test="(count(@objectiveID) &gt; 0) and (string-length(@objectiveID) = 0)">failed~No text was found in attribute "objectiveID" and fails the minimum character length test</assert>
     	 <assert test="(count(@objectiveID) &gt; 0) and (URIHandler:processWhitespace(@objectiveID) != '') and (string-length(@objectiveID) &gt; 0)">passed~The character length for the value of the "objectiveID" attribute has passed conformance</assert>     
     	 
     	 <!-- REQ_31.10.1.3 -->
      	 <!-- The <primaryObjective> element shall contain 0 or 1 <minNormalizedMeasure> child element -->
      	 <assert test="count(imsss:minNormalizedMeasure) &gt; 0">info~Testing the multiplicity of the &lt;minNormalizedMeasure&gt; element</assert>
		 <assert test="count(imsss:minNormalizedMeasure) &gt; 1">failed~The &lt;primaryObjective&gt; element shall contain 0 or 1 &lt;minNormalizedMeasure&gt; element</assert>
		 <assert test="count(imsss:minNormalizedMeasure) = 1">passed~The &lt;primaryObjective&gt; element contains 1 &lt;minNormalizedMeasure&gt; element</assert>		
         
         <!-- REQ_31.10.1.3.1 -->
         <!-- The minNormalizedMeasure element's value shall be a valid xs:decimal in the range of -1.0000 and 1.0000 (precision to at least 4 significant decimal places). -->
         <!-- Tested by IMSSS schema -->
         
         <!-- REQ_31.10.1.3.2 -->
         <!--If no <minNormalizedMeasure> is provided the default value of 1.0 shall be used to represent the minimum normalized measure. -->
		 <!-- Performed in code -->      
		 
		 <!-- REQ_31.10.1.4 -->
      	 <!-- The <primaryObjective> element shall contain 0 or More <mapInfo> child elements.-->
      	 <assert test="count(imsss:mapInfo) &gt; 0">info~Testing multiplicity of the &lt;mapInfo&gt; element</assert> 
         <assert test="count(imsss:mapInfo) &gt; 0">passed~A &lt;primaryObjective&gt; element contains <value-of select="count(imsss:mapInfo)"/> &lt;mapInfo&gt; element(s)</assert>

		 <!-- REQ_31.10.1.4.6 -->
		 <!--The <mapInfo> element shall adhere to the following when dealing with Read Objective Maps: -->
		 
		 <!-- REQ_31.10.1.4.6.1 -->
		 <!-- If multiple <mapInfo> elements exist for an objective (<primaryObjective>) then only one <mapInfo> element shall have the readSatisfiedStatus attribute set to true. -->
		 <assert test="count(imsss:mapInfo) &gt; 1">info~Testing the vocabulary of the "readSatisfiedStatus" atrribute</assert>
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[normalize-space(@readSatisfiedStatus)='true']) &gt; 1)">failed~Objective <value-of select="@objectiveID"/> is set up to read the success status more than once from the global objective</assert>		 
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[normalize-space(@readSatisfiedStatus)='true']) &lt;= 1)">passed~Objective <value-of select="@objectiveID"/> is set up to read the success status from only one global objective</assert>		 
		 
		 <!-- REQ_31.10.1.4.6.2 -->
		 <!-- If multiple <mapInfo> elements exist for an objective (<primaryObjective>) then only one <mapInfo> element shall have the readNormalizedMeasure attribute set to true. -->         
		 <assert test="count(imsss:mapInfo) &gt; 1">info~Testing the vocabulary of the "readNormalizedMeasure" atrribute</assert>
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[normalize-space(@readNormalizedMeasure)='true']) &gt; 1)">failed~Objective <value-of select="@objectiveID"/> is set up to read the normalized measure more than once from the global objective</assert>		 
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[normalize-space(@readNormalizedMeasure)='true']) &lt;= 1)">passed~Objective <value-of select="@objectiveID"/> is set up to read the normalized measure from only one global objective</assert>		 
         
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="objective" context="imsss:objective">
      
      	 <assert test="true()">info~Testing the &lt;objective&gt; element with the objectiveID value of [<value-of select="@objectiveID"/>] for conformance</assert>
      
          <!-- REQ_31.10.2.5-->
          <!-- The <objective> element shall only be used as a child of the <objectives> element. -->
          <assert test="true()">info~Testing the location of the &lt;objective&gt; element</assert>
          <assert test="(local-name(parent::node()) != 'objectives') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;objective&gt; element must exist as a child of the &lt;objectives&gt; element</assert>
          <assert test="(local-name(parent::node()) = 'objectives') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;objective&gt; element is a child of the &lt;objectives&gt; element</assert>
      
         <!-- REQ_31.10.2.1 -->
         <!-- The <objective> element shall contain 0 or 1 satisfiedByMeasure attribute. -->         
         <assert test="count(@satisfiedByMeasure) &gt; 0">info~Testing the multiplicity of the "satisfiedByMeasure" attribute</assert>
	     <assert test="count(@satisfiedByMeasure) &gt; 0">passed~The &lt;objective&gt; element contains 1 "satisfiedByMeasure" attribute</assert>	
      
      	 <!-- REQ_31.10.2.1.1 -->
      	 <!-- The satisfiedByMeasure attribute's value shall be represented as an xs:boolean type -->
		 <!-- Tested by IMSSS schema -->      
		
		 <!-- REQ_31.10.2.1.2 -->
	     <!-- The satisfiedByMeasure attribute's value shall be either true or false -->
	     <let name="satisfiedByMeasure" value="normalize-space(@satisfiedByMeasure)" />
	     <assert test="count(@satisfiedByMeasure) &gt; 0">info~Testing the "satisfiedByMeasure" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@satisfiedByMeasure) &gt; 0) and ($satisfiedByMeasure != 'true') and ($satisfiedByMeasure != 'false')">failed~[<value-of select="@satisfiedByMeasure" />] is not a valid value for the "satisfiedByMeasure" attribute</assert>
		 <assert test="(count(@satisfiedByMeasure) &gt; 0) and ($satisfiedByMeasure = 'true') or ($satisfiedByMeasure = 'false')">passed~[<value-of select="@satisfiedByMeasure" />] is a valid value for the "satisfiedByMeasure" attribute</assert>
		 
		 <!-- REQ_31.10.2.2 -->
		 <!-- The <objective> element shall contain 1 and only 1 objectiveID attribute. -->
		 <assert test="count(@objectiveID) &gt; 0">info~Testing the multiplicity of the "objectiveID" atrribute</assert>
		 <assert test="( count(@objectiveID) &gt; 1 ) or ( count(@objectiveID) &lt; 1 )">failed~The &lt;objective&gt; element shall contain 1 and only 1 "objectiveID" attribute</assert>
         <assert test="count(@objectiveID) = 1">passed~The &lt;objective&gt; element contains 1 "objectiveID" attribute</assert>
		 	 
	     
	     <!-- REQ_31.10.2.2.1 -->
	     <!-- The objectiveID attribute's value shall be represented as an xs:anyURI type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.10.2.2.2 -->
         <!-- For a given set of objectives defined for an activity (i.e., one <primaryObjective> and multiple <objective> elements), the objectiveID attributes values for all of the objective IDs shall be unique. -->
		 <let name="objectiveID" value="URIHandler:processWhitespace(@objectiveID)" />
		 <assert test="count(@objectiveID) &gt; 0">info~Testing the "objectiveID" attribute for conformance</assert>
		 <assert test="(count(@objectiveID) &gt; 0) and (count(../child::*[URIHandler:processWhitespace(@objectiveID)=$objectiveID]) = 1)">passed~The "objectiveID" attribute is unique within the &lt;objectives&gt; element</assert>
		 <assert test="(count(@objectiveID) &gt; 0) and (count(../child::*[URIHandler:processWhitespace(@objectiveID)=$objectiveID]) &gt; 1)">failed~The "objectiveID" attribute [<value-of select="@objectiveID" />] is not unique within the &lt;objectives&gt; element</assert>
         		 
		 <!-- REQ_31.10.2.2.3 -->
		 <!-- Since the underlying data type of a objectiveID is a unique identifier, then the value held by the objectiveID shall not be an empty characterstring nor contain all white space characters. -->
     	 <assert test="count(@objectiveID) &gt; 0">info~Testing the character length of the "objectiveID" attribute value</assert>
         <assert test="(count(@objectiveID) &gt; 0) and (URIHandler:processWhitespace(@objectiveID) = '') and (string-length(@objectiveID) &gt; 0)">failed~Attribute "objectiveID" must contain valid characters, all whitespace found.</assert>
         <assert test="(count(@objectiveID) &gt; 0) and (string-length(@objectiveID) = 0)">failed~No text was found in attribute "objectiveID" and fails the minimum character length test</assert>
         <assert test="(count(@objectiveID) &gt; 0) and (URIHandler:processWhitespace(@objectiveID) != '') and (string-length(@objectiveID) &gt; 0)">passed~The character length for the value of the "objectiveID" attribute has passed conformance</assert>  
     	 
     	 <!-- REQ_31.10.2.3 -->
      	 <!-- The <objective> element shall contain 0 or 1 <minNormalizedMeasure> child element -->
      	 <assert test="count(imsss:minNormalizedMeasure) &gt; 0">info~Testing the multiplicity of the &lt;minNormalizedMeasure&gt; element</assert>
		 <assert test="count(imsss:minNormalizedMeasure) &gt; 1">failed~The &lt;objective&gt; element shall contain 0 or 1 &lt;minNormalizedMeasure&gt; element</assert>
		 <assert test="count(imsss:minNormalizedMeasure) = 1">passed~The &lt;objective&gt; element contains 1 &lt;minNormalizedMeasure&gt; element</assert>		
         
         <!-- REQ_31.10.2.3.1 -->
         <!-- The minNormalizedMeasure element's value shall be a valid xs:decimal in the range of -1.0000 and 1.0000 (precision to at least 4 significant decimal places). -->
         <!-- Tested by IMSSS schema -->
         
         <!-- REQ_31.10.2.3.2 -->
         <!--If no <minNormalizedMeasure> is provided the default value of 1.0 shall be used to represent the minimum normalized measure. -->
		 <!-- Performed in code -->      
		 
		 <!-- REQ_31.10.2.4 -->
      	 <!-- The <objective> element shall contain 0 or More <mapInfo> child elements.-->
      	 <assert test="count(imsss:mapInfo) &gt; 0">info~Testing multiplicity of the &lt;mapInfo&gt; element</assert> 
         <assert test="count(imsss:mapInfo) &gt; 0">passed~A &lt;objective&gt; element contains <value-of select="count(imsss:mapInfo)"/> &lt;mapInfo&gt; element(s)</assert>
         	 
		 <!-- REQ_31.10.1.4.6.1 -->
		 <!-- If multiple <mapInfo> elements exist for an objective (<objective>) then only one <mapInfo> element shall have the readSatisfiedStatus attribute set to true. -->
		 <assert test="count(imsss:mapInfo) &gt; 1">info~Testing the vocabulary of the "readSatisfiedStatus" atrribute</assert>
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[@readSatisfiedStatus='true']) &gt; 1)">failed~Objective <value-of select="@objectiveID"/> is set up to read the success status more than once from the global objective</assert>		 
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[@readSatisfiedStatus='true']) &lt;= 1)">passed~Objective <value-of select="@objectiveID"/> is set up to read the success status from only one global objective</assert>		 
		 
		 <!-- REQ_31.10.1.4.6.2 -->
		 <!-- If multiple <mapInfo> elements exist for an objective (<objective>) then only one <mapInfo> element shall have the readNormalizedMeasure attribute set to true. -->         
		 <assert test="count(imsss:mapInfo) &gt; 1">info~Testing the vocabulary of the "readNormalizedMeasure" atrribute</assert>
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[@readNormalizedMeasure='true']) &gt; 1)">failed~Objective <value-of select="@objectiveID"/> is set up to read the normalized measure more than once from the global objective</assert>		 
		 <assert test="(count(imsss:mapInfo) &gt; 1) and (count(imsss:mapInfo[@readNormalizedMeasure='true']) &lt;= 1)">passed~Objective <value-of select="@objectiveID"/> is set up to read the normalized measure from only one global objective</assert>		 
                  
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>

   <rule id="imsss:minNormalizedMeasure" context="imsss:minNormalizedMeasure">
      <assert test="true()">info~Testing the &lt;minNormalizedMeasure&gt; element for conformance</assert>
      
      <!-- REQ_31.10.1.3.3 -->
      <!-- REQ_31.10.2.3.3 -->
      <!-- The <minNormalizedMeasure> element shall only be used as a child of the <primaryObjective> or <objective> element. -->
      <assert test="true()">info~Testing the location of the &lt;minNormalizedMeasure&gt; element</assert>
      <assert test="((local-name(parent::node()) != 'primaryObjective') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')) and ((local-name(parent::node()) != 'objective') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss'))">failed~The &lt;minNormalizedMeasure&gt; element must exist as a child of the &lt;primaryObjective&gt; or &lt;objective&gt; element</assert>
      <assert test="((local-name(parent::node()) = 'primaryObjective') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) or ((local-name(parent::node()) = 'objective') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss'))">passed~The &lt;minNormalizedMeasure&gt; element is a child of the &lt;primaryObjective&gt; or &lt;objective&gt; element</assert>
   </rule>
      
      <rule id="mapInfo" context="imsss:mapInfo">
      
         <assert test="count(@targetObjectiveID) &gt; 0">info~Testing the &lt;mapInfo&gt; element with the targetObjectiveID value of [<value-of select="@targetObjectiveID"/>] for conformance</assert>
		 <assert test="count(@targetObjectiveID) &lt;= 0">info~Testing the &lt;mapInfo&gt; element for conformance</assert>
      
         <!-- REQ_31.10.1.4.8 -->
         <!-- REQ_31.10.2.4.6-->
         <!-- The <mapInfo> element shall only be used as a child of the <primaryObjective> or <objective> element. -->
         <assert test="true()">info~Testing the location of the &lt;mapInfo&gt; element</assert>
         <assert test="((local-name(parent::node()) != 'primaryObjective') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')) and ((local-name(parent::node()) != 'objective') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss'))">failed~The &lt;mapInfo&gt; element must exist as a child of the &lt;primaryObjective&gt; or &lt;objective&gt; element</assert>
         <assert test="((local-name(parent::node()) = 'primaryObjective') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')) or ((local-name(parent::node()) = 'objective') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss'))">passed~The &lt;mapInfo&gt; element is a child of the &lt;primaryObjective&gt; or &lt;objective&gt; element</assert>
      
         <!-- REQ_31.10.1.4.1 -->
         <!-- REQ_31.10.2.4.1 -->    
		 <!-- The <mapInfo> element shall contain 1 and only 1 targetObjectiveID attribute. -->
		 <assert test="count(@targetObjectiveID) &gt; 0">info~Testing the multiplicity of the "targetObjectiveID" atrribute</assert>
		 <assert test="( count(@targetObjectiveID) &gt; 1 ) or ( count(@targetObjectiveID) &lt; 1 )">failed~The &lt;mapInfo&gt; element shall contain 1 and only 1 "targetObjectiveID" attribute</assert>
         <assert test="count(@targetObjectiveID) = 1">passed~The &lt;mapInfo&gt; element contains 1 "targetObjectiveID" attribute</assert>
         
         <!-- REQ_31.10.1.4.1.1 -->
         <!-- REQ_31.10.2.4.1.1 -->
         <!-- The targetObjectiveID attribute's value shall be represented as an xs:anyURI type. -->
         <!-- Tested by IMSSS schema -->
         
         <!-- REQ_31.10.1.4.1.2 -->
         <!-- REQ_31.10.2.4.PENDING -->
         <!-- Since the underlying data type of a targetObjectiveID is a unique identifier, then the value held by the targetObjectiveID shall not be an empty characterstring nor contain all white space characters.-->
   		 <assert test="count(@targetObjectiveID) &gt; 0">info~Testing the character length of the "targetObjectiveID" attribute value</assert>
		 <assert test="(count(@targetObjectiveID) &gt; 0) and (normalize-space(URIHandler:processWhitespace(@targetObjectiveID)) = '') and (string-length(@targetObjectiveID) &gt; 0)">failed~Attribute "targetObjectiveID" must contain valid characters, all whitespace found</assert>
     	 <assert test="(count(@targetObjectiveID) &gt; 0) and (string-length(@targetObjectiveID) = 0)">failed~No text was found in attribute "targetObjectiveID" and fails the minimum character length test</assert>
     	 <assert test="(count(@targetObjectiveID) &gt; 0) and (normalize-space(URIHandler:processWhitespace(@targetObjectiveID)) != '') and (string-length(@targetObjectiveID) &gt; 0)">passed~The character length for the value of the "targetObjectiveID" attribute has passed conformance</assert>     
     	 
     	 <!-- REQ_31.10.1.4.2 -->
     	 <!-- REQ_31.10.2.4.2 -->
         <!-- The <mapInfo> element shall contain 0 or 1 readSatisfiedStatus attribute.-->
      	 <assert test="count(@readSatisfiedStatus) &gt; 0">info~Testing the multiplicity of the "readSatisfiedStatus" attribute</assert>
	     <assert test="count(@readSatisfiedStatus) &gt; 0">passed~The &lt;mapInfo&gt; element contains 1 "readSatisfiedStatus" attribute</assert>
	     
	     <!-- REQ_31.10.1.4.2.1 -->
	     <!-- REQ_31.10.2.4.2.1 -->
	     <!-- The readSatisfiedStatus attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.10.1.4.2.2 -->
	     <!-- REQ_31.10.2.4.2.2 -->
	     <!-- The readSatisfiedStatus attribute's value shall be either true or false -->
	     <let name="readSatisfiedStatus" value="normalize-space(@readSatisfiedStatus)" />
	     <assert test="count(@readSatisfiedStatus) &gt; 0">info~Testing the "readSatisfiedStatus" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@readSatisfiedStatus) &gt; 0) and ($readSatisfiedStatus != 'true') and ($readSatisfiedStatus != 'false')">failed~[<value-of select="@readSatisfiedStatus" />] is not a valid value for the "readSatisfiedStatus" attribute</assert>
		 <assert test="(count(@readSatisfiedStatus) &gt; 0) and ($readSatisfiedStatus = 'true') or ($readSatisfiedStatus = 'false')">passed~[<value-of select="@readSatisfiedStatus" />] is a valid value for the "readSatisfiedStatus" attribute</assert>
		 
		 <!-- REQ_31.10.1.4.3 -->
		 <!-- REQ_31.10.2.4.3 -->
         <!-- The <mapInfo> element shall contain 0 or 1 readNormalizedMeasure attribute.-->
      	 <assert test="count(@readNormalizedMeasure) &gt; 0">info~Testing the multiplicity of the "readNormalizedMeasure" attribute</assert>
	     <assert test="count(@readNormalizedMeasure) &gt; 0">passed~The &lt;mapInfo&gt; element contains 1 "readNormalizedMeasure" attribute</assert>
	     
	     <!-- REQ_31.10.1.4.3.1 -->
	     <!-- REQ_31.10.2.4.3.1 -->
	     <!-- The readNormalizedMeasure attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.10.1.4.3.2 -->
	     <!-- REQ_31.10.2.4.3.2 -->
	     <!-- The readNormalizedMeasure attribute's value shall be either true or false -->
	     <let name="readNormalizedMeasure" value="normalize-space(@readNormalizedMeasure)" />
	     <assert test="count(@readNormalizedMeasure) &gt; 0">info~Testing the "readNormalizedMeasure" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@readNormalizedMeasure) &gt; 0) and ($readNormalizedMeasure!= 'true') and ($readNormalizedMeasure!= 'false')">failed~[<value-of select="@readNormalizedMeasure" />] is not a valid value for the "readNormalizedMeasure" attribute</assert>
		 <assert test="(count(@readNormalizedMeasure) &gt; 0) and ($readNormalizedMeasure= 'true') or ($readNormalizedMeasure= 'false')">passed~[<value-of select="@readNormalizedMeasure" />] is a valid value for the "readNormalizedMeasure" attribute</assert>
		 
		 <!-- REQ_31.10.1.4.4 -->
		 <!-- REQ_31.10.2.4.4 -->
         <!-- The <mapInfo> element shall contain 0 or 1 writeSatisfiedStatus attribute.-->
      	 <assert test="count(@writeSatisfiedStatus) &gt; 0">info~Testing the multiplicity of the "writeSatisfiedStatus" attribute</assert>
	     <assert test="count(@writeSatisfiedStatus) &gt; 0">passed~The &lt;mapInfo&gt; element contains 1 "writeSatisfiedStatus" attribute</assert>
	     
	     <!-- REQ_31.10.1.4.4.1 -->
	     <!-- REQ_31.10.2.4.4.1 -->
	     <!-- The writeSatisfiedStatus attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.10.1.4.4.2 -->
	     <!-- REQ_31.10.2.4.4.2 -->
	     <!-- The writeSatisfiedStatus attribute's value shall be either true or false -->
	     <let name="writeSatisfiedStatus" value="normalize-space(@writeSatisfiedStatus)" />
	     <assert test="count(@writeSatisfiedStatus) &gt; 0">info~Testing the "writeSatisfiedStatus" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@writeSatisfiedStatus) &gt; 0) and ($writeSatisfiedStatus!= 'true') and ($writeSatisfiedStatus!= 'false')">failed~[<value-of select="@writeSatisfiedStatus" />] is not a valid value for the "writeSatisfiedStatus" attribute</assert>
		 <assert test="(count(@writeSatisfiedStatus) &gt; 0) and ($writeSatisfiedStatus= 'true') or ($writeSatisfiedStatus= 'false')">passed~[<value-of select="@writeSatisfiedStatus" />] is a valid value for the "writeSatisfiedStatus" attribute</assert>
		 
		 <!-- REQ_31.10.1.4.7.1 -->
		 <!-- For an activity, if multiple objectives (<primaryObjective> or <objective>) have <mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeSatisfiedStatus attribute set to true. -->
		 <let name="mapID" value="URIHandler:processWhitespace(@targetObjectiveID)" />
		 <assert test="(count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeSatisfiedStatus)='true']) &gt; 1)">info~Testing the "writeSatisfiedStatus" attribute for conformance</assert>
		 <assert test="(count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeSatisfiedStatus)='true']) &gt; 1)">failed~The "writeSatisfiedStatus" attribute shall be set to true for only one &lt;mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
		 
		 <assert test="(count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeSatisfiedStatus)='true']) &lt;= 1)">info~Testing the "writeSatisfiedStatus" attribute for conformance</assert>
		 <assert test="(count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[URIHandler:processWhitespace(@targetObjectiveID)=$mapID]/self::*[normalize-space(@writeSatisfiedStatus)='true']) &lt;= 1)">passed~The "writeSatisfiedStatus" attribute is set to true for only one &lt;mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>
		 
		 <!-- REQ_31.10.1.4.5 -->
		 <!-- REQ_31.10.2.4.5 -->
         <!-- The <mapInfo> element shall contain 0 or 1 writeNormalizedMeasure attribute.-->
      	 <assert test="count(@writeNormalizedMeasure) &gt; 0">info~Testing the multiplicity of the "writeNormalizedMeasure" attribute</assert>
	     <assert test="count(@writeNormalizedMeasure) &gt; 0">passed~The &lt;mapInfo&gt; element contains 1 "writeNormalizedMeasure" attribute</assert>
	     
	     <!-- REQ_31.10.1.4.5.1 -->
	     <!-- REQ_31.10.2.4.5.1 -->
	     <!-- The writeNormalizedMeasure attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
	     
	     <!-- REQ_31.10.1.4.5.2 -->
	     <!-- REQ_31.10.2.4.5.2 -->
	     <!-- The writeNormalizedMeasure attribute's value shall be either true or false -->
	     <let name="writeNormalizedMeasure" value="normalize-space(@writeNormalizedMeasure)" />
	     <assert test="count(@writeNormalizedMeasure) &gt; 0">info~Testing the "writeNormalizedMeasure" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@writeNormalizedMeasure) &gt; 0) and ($writeNormalizedMeasure!= 'true') and ($writeNormalizedMeasure!= 'false')">failed~[<value-of select="@writeNormalizedMeasure" />] is not a valid value for the "writeNormalizedMeasure" attribute</assert>
		 <assert test="(count(@writeNormalizedMeasure) &gt; 0) and ($writeNormalizedMeasure= 'true') or ($writeNormalizedMeasure= 'false')">passed~[<value-of select="@writeNormalizedMeasure" />] is a valid value for the "writeNormalizedMeasure" attribute</assert>
		 		 
		 
		 <!-- REQ_31.10.1.4.7 -->
		 <!-- The <mapInfo> element shall adhere to the following when dealing with Write Objective Maps: -->
		 		 
		 <!-- REQ_31.10.1.4.7.2 -->
		 <!-- For an activity, if multiple objectives (<primaryObjective> or <objective>) have <mapInfo> elements that share the same targetObjectiveID, then only one of the objectives shall have the writeNormalizedMeasure attribute set to true. -->
		 <let name="mapID2" value="@targetObjectiveID" />
		 <assert test="(count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]/self::*[@writeNormalizedMeasure='true']) &gt; 1)">info~Testing the "writeNormalizedMeasure" attribute for conformance</assert>
		 <assert test="(count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]/self::*[@writeNormalizedMeasure='true']) &gt; 1)">failed~The "writeNormalizedMeasure" attribute shall be set to true for only one &lt;mapInfo&gt; element sharing the "targetObjectiveID" attribute [<value-of select="@targetObjectiveID" />]</assert>
		 <assert test="(count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]/self::*[@writeNormalizedMeasure='true']) &lt;= 1)">info~Testing the "writeNormalizedMeasure" attribute for conformance</assert>
		 <assert test="(count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]) &gt; 1) and 
		 			   (count(../../child::*/imsss:mapInfo[@targetObjectiveID=$mapID2]/self::*[@writeNormalizedMeasure='true']) &lt;= 1)">passed~The "writeNormalizedMeasure" attribute is set to true for only one &lt;mapInfo&gt; element sharing a "targetObjectiveID" attribute</assert>		 
            	
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="randomizationControls" context="imsss:randomizationControls">
      
        <assert test="true()">info~Testing the &lt;randomizationControls&gt; element for conformance</assert>
      
         <!-- REQ_31.11.1 -->
         <!-- The <randomizationControls> element shall contain 0 or 1 randomizationTiming attribute. -->         
         <assert test="count(@randomizationTiming) &gt; 0">info~Testing the multiplicity of the "randomizationTiming" attribute</assert>
	     <assert test="count(@randomizationTiming) &gt; 0">passed~The &lt;randomizationControls&gt; element contains 1 "randomizationTiming" attribute</assert>	
	     
	     <!-- REQ_31.11.1.1 -->
		 <!-- The randomizationTiming attribute's value shall be one of the following restricted tokens: -->
		 <!-- once, onEachNewAttempt, never -->
		 <let name="randomizationTiming" value="normalize-space(@randomizationTiming)"/>
		 <assert test="count(@randomizationTiming) &gt; 0">info~Testing the "randomizationTiming" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@randomizationTiming) &gt; 0) 
		 		and ($randomizationTiming != 'once') 
		 		and ($randomizationTiming != 'onEachNewAttempt') 
		 		and ($randomizationTiming != 'never')">failed~[<value-of select="@randomizationTiming" />] is not a valid value for the "randomizationTiming" attribute</assert>
		 <assert test="(count(@randomizationTiming) &gt; 0) and 
		 		( ($randomizationTiming = 'once') 
		 		or ($randomizationTiming = 'onEachNewAttempt') 
		 		or ($randomizationTiming = 'never') )">passed~[<value-of select="@randomizationTiming" />] is a valid value for the "randomizationTiming" attribute</assert>
      
         <!-- REQ_31.11.1.2 -->
         <!-- If no randomizationTiming attribute is defined then randomization on the set of activities shall never be performed by the LMS. -->
         <!-- Performed by LMS -->
         
         <!-- REQ_31.11.2 -->
         <!-- The <randomizationControls> element shall contain 0 or 1 selectCount attribute. -->         
         <assert test="count(@selectCount) &gt; 0">info~Testing the multiplicity of the "selectCount" attribute</assert>
	     <assert test="count(@selectCount) &gt; 0">passed~The &lt;randomizationControls&gt; element contains 1 "selectCount" attribute</assert>	
	     
	     <!-- REQ_31.11.2.1 -->
	     <!-- The selectCount attribute's value shall be a non-negative integer. -->
	     <!-- Tested by IMSSS schema -->

		 <!-- REQ_31.11.2.2 -->
		 <!-- If no selectCount attribute is defined for the <randomizationControls> element then the default value of 0 shall be used. -->
		 <!-- Implemented by LMS -->
		 
		 <!-- REQ_31.11.3 -->
         <!-- The <randomizationControls> element shall contain 0 or 1 reorderChildren attribute.-->
      	 <assert test="count(@reorderChildren) &gt; 0">info~Testing the multiplicity of the "reorderChildren" attribute</assert>
	     <assert test="count(@reorderChildren) &gt; 0">passed~The &lt;randomizationControls&gt; element contains 1 "reorderChildren" attribute</assert>
         	     
	     <!-- REQ_31.11.3.1 -->
	     <!-- The reorderChildren attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.11.3.2 -->
	     <!-- The reorderChildren attribute's value shall be either true or false -->
	     <let name="reorderChildren" value="normalize-space(@reorderChildren)" />
	     <assert test="count(@reorderChildren) &gt; 0">info~Testing the "reorderChildren" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@reorderChildren) &gt; 0) and ($reorderChildren!= 'true') and ($reorderChildren!= 'false')">failed~[<value-of select="@reorderChildren" />] is not a valid value for the "reorderChildren" attribute</assert>
		 <assert test="(count(@reorderChildren) &gt; 0) and ($reorderChildren= 'true') or ($reorderChildren= 'false')">passed~[<value-of select="@reorderChildren" />] is a valid value for the "reorderChildren" attribute</assert>
		 
		 <!-- REQ_31.11.4 -->
         <!-- The <randomizationControls> element shall contain 0 or 1 selectionTiming attribute. -->         
         <assert test="count(@selectionTiming) &gt; 0">info~Testing the multiplicity of the "selectionTiming" attribute</assert>
	     <assert test="count(@selectionTiming) &gt; 0">passed~The &lt;randomizationControls&gt; element contains 1 "selectionTiming" attribute</assert>	
	     
	     <!-- REQ_31.11.4.1 -->
		 <!-- The selectionTiming attribute's value shall be one of the following restricted tokens: -->
		 <!-- once, onEachNewAttempt, never -->
		 <let name="selectionTiming" value="normalize-space(@selectionTiming)"/>
		 <assert test="count(@selectionTiming) &gt; 0">info~Testing the "selectionTiming" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@selectionTiming) &gt; 0) 
		 		and ($selectionTiming != 'once') 
		 		and ($selectionTiming != 'onEachNewAttempt') 
		 		and ($selectionTiming != 'never')">failed~[<value-of select="@selectionTiming" />] is not a valid value for the "selectionTiming" attribute</assert>
		 <assert test="(count(@selectionTiming) &gt; 0) and 
		 		( ($selectionTiming = 'once') 
		 		or ($selectionTiming = 'onEachNewAttempt') 
		 		or ($selectionTiming = 'never') )">passed~[<value-of select="@selectionTiming" />] is a valid value for the "selectionTiming" attribute</assert>
         
         <!-- REQ_31.11.4.2 -->
         <!-- If no selectionTiming attribute is defined then selection from the set of activities shall never be performed by the LMS -->
         <!-- Implemented by LMS -->
         
         <!-- REQ_31.11.5-->
         <!-- The <randomizationControls> element shall only be used as a child of the <sequencing> element. -->
         <assert test="true()">info~Testing the location of the &lt;randomizationControls&gt; element</assert>
         <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;randomizationControls&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
         <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;randomizationControls&gt; element is the child of the &lt;sequencing&gt; element</assert>
         
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>
      
      <rule id="deliveryControls" context="imsss:deliveryControls">
      
         <assert test="true()">info~Testing the &lt;deliveryControls&gt; element for conformance</assert>
      
         <!-- REQ_31.12.1 -->
         <!-- The <deliveryControls> element shall contain 0 or 1 tracked attribute.-->
      	 <assert test="count(@tracked) &gt; 0">info~Testing the multiplicity of the "tracked" attribute</assert>
	     <assert test="count(@tracked) &gt; 0">passed~The &lt;deliveryControls&gt; element contains 1 "tracked" attribute</assert>
         	     
	     <!-- REQ_31.12.1.1 -->
	     <!-- The tracked attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.12.1.2 -->
	     <!-- The tracked attribute's value shall be either true or false -->
	     <let name="tracked" value="normalize-space(@tracked)" />
	     <assert test="count(@tracked) &gt; 0">info~Testing the "tracked" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@tracked) &gt; 0) and ($tracked!= 'true') and ($tracked!= 'false')">failed~[<value-of select="@tracked" />] is not a valid value for the "tracked" attribute</assert>
		 <assert test="(count(@tracked) &gt; 0) and ($tracked= 'true') or ($tracked= 'false')">passed~[<value-of select="@tracked" />] is a valid value for the "tracked" attribute</assert>
         
         <!-- REQ_31.12.2 -->
         <!-- The <deliveryControls> element shall contain 0 or 1 completionSetByContent attribute.-->
      	 <assert test="count(@completionSetByContent) &gt; 0">info~Testing the multiplicity of the "completionSetByContent" attribute</assert>
	     <assert test="count(@completionSetByContent) &gt; 0">passed~The &lt;deliveryControls&gt; element contains 1 "completionSetByContent" attribute</assert>
         	     
	     <!-- REQ_31.12.2.1 -->
	     <!-- The completionSetByContent attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.12.2.2 -->
	     <!-- The completionSetByContent attribute's value shall be either true or false -->
	     <let name="completionSetByContent" value="normalize-space(@completionSetByContent)" />
	     <assert test="count(@completionSetByContent) &gt; 0">info~Testing the "completionSetByContent" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@completionSetByContent) &gt; 0) and ($completionSetByContent!= 'true') and ($completionSetByContent!= 'false')">failed~[<value-of select="@completionSetByContent" />] is not a valid value for the "completionSetByContent" attribute</assert>
		 <assert test="(count(@completionSetByContent) &gt; 0) and ($completionSetByContent= 'true') or ($completionSetByContent= 'false')">passed~[<value-of select="@completionSetByContent" />] is a valid value for the "completionSetByContent" attribute</assert>
         
         <!-- REQ_31.12.3 -->
         <!-- The <deliveryControls> element shall contain 0 or 1 objectiveSetByContent attribute.-->
      	 <assert test="count(@objectiveSetByContent) &gt; 0">info~Testing the multiplicity of the "objectiveSetByContent" attribute</assert>
	     <assert test="count(@objectiveSetByContent) &gt; 0">passed~The &lt;deliveryControls&gt; element contains 1 "objectiveSetByContent" attribute</assert>
         	     
	     <!-- REQ_31.12.3.1 -->
	     <!-- The objectiveSetByContent attribute's value shall be represented as an xs:boolean type. -->
	     <!-- Tested by IMSSS schema -->
         	     
	     <!-- REQ_31.12.3.2 -->
	     <!-- The objectiveSetByContent attribute's value shall be either true or false -->
	     <let name="objectiveSetByContent" value="normalize-space(@objectiveSetByContent)" />
	     <assert test="count(@objectiveSetByContent) &gt; 0">info~Testing the "objectiveSetByContent" attribute for conformance to the Vocabulary Data Type</assert>
		 <assert test="(count(@objectiveSetByContent) &gt; 0) and ($objectiveSetByContent!= 'true') and ($objectiveSetByContent!= 'false')">failed~[<value-of select="@objectiveSetByContent" />] is not a valid value for the "objectiveSetByContent" attribute</assert>
		 <assert test="(count(@objectiveSetByContent) &gt; 0) and ($objectiveSetByContent= 'true') or ($objectiveSetByContent= 'false')">passed~[<value-of select="@objectiveSetByContent" />] is a valid value for the "objectiveSetByContent" attribute</assert>
		 
		 <!-- REQ_31.12.4 -->
       <!-- The <deliveryControls> element shall only be used as a child of the <sequencing> element. -->
       <assert test="true()">info~Testing the location of the &lt;deliveryControls&gt; element</assert>
       <assert test="(local-name(parent::node()) != 'sequencing') or (namespace-uri(parent::node()) != 'http://www.imsglobal.org/xsd/imsss')">failed~The &lt;deliveryControls&gt; element must exist as a child of the &lt;sequencing&gt; element</assert>
       <assert test="(local-name(parent::node()) = 'sequencing') and (namespace-uri(parent::node()) = 'http://www.imsglobal.org/xsd/imsss')">passed~The &lt;deliveryControls&gt; element is the child of the &lt;sequencing&gt; element</assert>
      
      <!-- REQ_30.7.3.4.2 -->
      <!-- adlcp:scormType can only appear as an attribute on <resource> -->
      <assert test="count(@adlcp:scormType) &gt; 0">info~Testing the location of the "adlcp:scormType" attribute</assert>
      <assert test="count(@adlcp:scormType) &gt; 0">failed~The "adlcp:scormType" attribute must exist on a &lt;resource&gt; element</assert>
      
      <!-- REQ_30.6.3.3.2 -->
      <!-- adlseq:objectivesGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">info~Testing the location of the "adlseq:objectivesGlobalToSystem" attribute</assert>
      <assert test="count(@adlseq:objectivesGlobalToSystem) &gt; 0">failed~The "adlseq:objectivesGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>

      <!-- REQ_30.6.3.4.3 -->
      <!-- adlcp:sharedDataGlobalToSystem can only appear as an attribute on <organization> -->
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">info~Testing the location of the "adlcp:sharedDataGlobalToSystem" attribute</assert>
      <assert test="count(@adlcp:sharedDataGlobalToSystem) &gt; 0">failed~The "adlcp:sharedDataGlobalToSystem" attribute must exist on a &lt;organization&gt; element</assert>
	</rule>	
    
   </pattern>
</schema>
